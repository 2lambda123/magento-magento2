<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<actionGroups xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/actionGroupSchema.xsd">
    <actionGroup name="validateProductInProducts">
        <arguments>
            <argument name="page" defaultValue="ProductsOnStage"/>
            <argument name="productsIndex" defaultValue="1" type="string"/>
            <argument name="productIndex" defaultValue="1" type="string"/>
            <argument name="product" defaultValue="_defaultProduct"/>
            <argument name="isClickable" defaultValue="none" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{page.base(productsIndex)}}" stepKey="waitForProducts"/>
        <seeElement selector="{{page.productImage(productIndex)}}" stepKey="seeProductImage"/>
        <seeElement selector="{{page.productName(productIndex, product.name)}}" stepKey="seeProductName"/>
        <seeElement selector="{{page.productPrice(productIndex, product.price)}}" stepKey="seeProductPrice"/>
        <moveMouseOver selector="{{page.productImage(productIndex)}}" stepKey="moveMouseOverProduct"/>
        <seeElement selector="{{page.productAddToCart(productIndex)}}" stepKey="seeProductAddToCart"/>
        <seeElement selector="{{page.productAddToWishList(productIndex)}}" stepKey="seeProductAddToWishList"/>
        <seeElement selector="{{page.productAddToCompare(productIndex)}}" stepKey="seeProductAddToCompare"/>
        <executeJS function="return getComputedStyle(document.evaluate(&quot;{{page.productName(productIndex, product.name)}}&quot;, document.body).iterateNext()).pointerEvents" stepKey="getProductNamePointerEvents"/>
        <executeJS function="return getComputedStyle(document.evaluate(&quot;{{page.productAddToCart(productIndex)}}&quot;, document.body).iterateNext()).pointerEvents" stepKey="getAddToCartPointerEvents"/>
        <executeJS function="return getComputedStyle(document.evaluate(&quot;{{page.productAddToWishList(productIndex)}}&quot;, document.body).iterateNext()).pointerEvents" stepKey="getWishListPointerEvents"/>
        <executeJS function="return getComputedStyle(document.evaluate(&quot;{{page.productAddToCompare(productIndex)}}&quot;, document.body).iterateNext()).pointerEvents" stepKey="getAddToComparePointerEvents"/>
        <assertEquals stepKey="assertWhetherProductNameIsClickable">
            <expectedResult type="string">{{isClickable}}</expectedResult>
            <actualResult type="variable">getProductNamePointerEvents</actualResult>
        </assertEquals>
        <assertEquals stepKey="assertWhetherAddToCartIsClickable">
            <expectedResult type="string">{{isClickable}}</expectedResult>
            <actualResult type="variable">getAddToCartPointerEvents</actualResult>
        </assertEquals>
        <assertEquals stepKey="assertWhetherWishListIsClickable">
            <expectedResult type="string">{{isClickable}}</expectedResult>
            <actualResult type="variable">getWishListPointerEvents</actualResult>
        </assertEquals>
        <assertEquals stepKey="assertWhetherAddToCompareIsClickable">
            <expectedResult type="string">{{isClickable}}</expectedResult>
            <actualResult type="variable">getAddToComparePointerEvents</actualResult>
        </assertEquals>
    </actionGroup>
    <actionGroup name="validateProductCountInProducts">
        <arguments>
            <argument name="page" defaultValue=""/>
            <argument name="index" defaultValue="1" type="string"/>
            <argument name="count" defaultValue="" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{page.product(index)}}" stepKey="waitForProduct"/>
        <grabMultiple selector="{{page.product(index)}}" stepKey="grabProducts"/>
        <assertCount stepKey="assertCount" expected="{{count}}" expectedType="int" actualType="variable" actual="grabProducts"/>
    </actionGroup>
    <actionGroup name="selectCategoryFromCategoryDropDown">
        <arguments>
            <argument name="property" defaultValue="PageBuilderProductsSelectCategoryDropDown"/>
            <argument name="category" type="string"/>
        </arguments>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <waitForElementVisible time="2" selector="{{EditPanelForm.panelMultiSelectFieldControl(property.section, property.fieldName)}}" stepKey="waitForMultiSelectFieldVisible"/>
        <click selector="{{EditPanelForm.panelMultiSelectFieldControl(property.section, property.fieldName)}}" stepKey="clickMultiSelectField"/>
        <waitForElementVisible selector="{{EditPanelForm.panelMultiSelectFieldControlInput(property.section, property.fieldName)}}" stepKey="waitForSearchField"/>
        <fillField selector="{{EditPanelForm.panelMultiSelectFieldControlInput(property.section, property.fieldName)}}" userInput="{{category}}" stepKey="inputSearchField"/>
        <waitForElementVisible selector="{{EditPanelForm.panelMultiSelectFieldControlResult(property.section, property.fieldName, category)}}" stepKey="waitForResult"/>
        <click selector="{{EditPanelForm.panelMultiSelectFieldControlResult(property.section, property.fieldName, category)}}" stepKey="clickResult"/>
        <click selector="{{EditPanelForm.panelFieldLabel(property.section, property.fieldName, property.section, property.name)}}" stepKey="clickOnFieldLabel"/>
        <waitForElementNotVisible selector="{{EditPanelForm.panelMultiSelectFieldControlInput(property.section, property.fieldName)}}" stepKey="waitForSearchFieldNotVisible"/>
        <see selector="{{EditPanelForm.panelMultiSelectFieldControl(property.section, property.fieldName)}}" userInput="{{category}}" stepKey="seeResultInField"/>
    </actionGroup>
    <actionGroup name="addSKUsToSelectProductsBySKU">
        <arguments>
            <argument name="property" defaultValue="PageBuilderProductsEnterSKUsInput"/>
            <argument name="SKUs" type="string"/>
        </arguments>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <waitForElement time="2" selector="{{EditPanelForm.panelFieldControl(property.section, property.fieldName)}}" stepKey="waitForElementVisible"/>
        <see userInput="{{property.name}}" selector="{{EditPanelForm.panelFieldLabel(property.section, property.fieldName, property.section, property.name)}}" stepKey="seePropertyLabel"/>
        <fillField selector="{{EditPanelForm.panelFieldControl(property.section, property.fieldName)}}" userInput="{{SKUs}}" stepKey="fillPropertyField"/>
        <click selector="{{EditPanelForm.panelFieldLabel(property.section, property.fieldName, property.section, property.name)}}" stepKey="clickOnFieldLabel"/>
    </actionGroup>
    <actionGroup name="addConditionToProductConditions">
        <arguments>
            <argument name="conditionType" defaultValue="PageBuilderProductsConditionCategory"/>
            <argument name="conditionInput" defaultValue="1" type="string"/>
            <argument name="index" defaultValue="1" type="string"/>
        </arguments>
        <comment userInput="addConditionToProductConditions" stepKey="comment"/>
        <waitForElementVisible selector="{{ProductsContentTypeForm.conditionsList}}" stepKey="waitForConditionsToLoad"/>
        <waitForElementVisible selector="{{ProductsContentTypeForm.conditionsListAddButton(index)}}" stepKey="waitForAddConditionButton"/>
        <click selector="{{ProductsContentTypeForm.conditionsListAddButton(index)}}" stepKey="clickAddConditionButton"/>
        <selectOption selector="{{ProductsContentTypeForm.conditionsListAddTypeSelect(index)}}" userInput="{{conditionType.value}}" stepKey="selectConditionType"/>
        <waitForPageLoad stepKey="waitForConditionFieldsToLoad"/>
        <click selector="{{ProductsContentTypeForm.conditionsListConditionPlaceholder}}" stepKey="revealCategoryInput"/>
        <fillField selector="{{ProductsContentTypeForm.conditionsListConditionInput}}" userInput="{{conditionInput}}" stepKey="fillCategoryField"/>
    </actionGroup>
    <actionGroup name="addConditionsCombinationToProductsAndSetAggregateParameters">
        <arguments>
            <argument name="aggregatorType" defaultValue="all" type="string"/>
            <argument name="booleanValueForAggregator" defaultValue="1" type="string"/>
            <argument name="index" defaultValue="1" type="string"/>
        </arguments>
        <comment userInput="addConditionsCombinationToProductsAndSetAggregateParameters" stepKey="comment"/>
        <waitForElementVisible selector="{{ProductsContentTypeForm.conditionsList}}" stepKey="waitForConditionsToLoad"/>
        <waitForElementVisible selector="{{ProductsContentTypeForm.conditionsListAddButton(index)}}" stepKey="waitForAddConditionButton"/>
        <click selector="{{ProductsContentTypeForm.conditionsListAddButton(index)}}" stepKey="clickAddConditionButton"/>
        <selectOption selector="{{ProductsContentTypeForm.conditionsListAddTypeSelect(index)}}" userInput="{{PageBuilderProductsConditionCombination.value}}" stepKey="selectCombinationOption"/>
        <waitForPageLoad stepKey="waitForConditionsCombinationTemplateToLoad"/>
        <click selector="{{ProductsContentTypeForm.conditionsCombinationAggregateSelector(index)}}" stepKey="clickAggregateType"/>
        <selectOption selector="{{ProductsContentTypeForm.conditionsCombinationAggregateSelectorSelect(index)}}" userInput="{{aggregatorType}}" stepKey="selectAggregateType"/>
        <waitForPageLoad stepKey="waitForAggregateTypeToLoad"/>
        <click selector="{{ProductsContentTypeForm.conditionsListText}}" stepKey="clearOptions"/>
        <click selector="{{ProductsContentTypeForm.conditionsCombinationAggregateBooleanSelector(index)}}" stepKey="clickAggregateTypeBoolean"/>
        <selectOption selector="{{ProductsContentTypeForm.conditionsCombinationAggregateBooleanSelectorSelect(index)}}" userInput="{{booleanValueForAggregator}}" stepKey="selectAggregateTypeBoolean"/>
        <waitForPageLoad stepKey="waitForAggregateTypeBooleanToLoad"/>
        <click selector="{{ProductsContentTypeForm.conditionsListText}}" stepKey="clearOptions2"/>
    </actionGroup>
    <actionGroup name="clickProductImageInProductsOnStorefront">
        <arguments>
            <argument name="product" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{ProductsOnStorefront.productImageByProductName(product)}}" stepKey="waitForProductImage"/>
        <click selector="{{ProductsOnStorefront.productImageByProductName(product)}}" stepKey="clickProductImage"/>
        <waitForPageLoad stepKey="waitForProductPageToLoad"/>
        <see selector="{{StorefrontProductInfoMainSection.productName}}" userInput="{{product}}" stepKey="seeProductName"/>
    </actionGroup>
    <actionGroup name="clickProductNameInProductsOnStorefront">
        <arguments>
            <argument name="product" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{ProductsOnStorefront.productNameByProductName(product)}}" stepKey="waitForProductName"/>
        <click selector="{{ProductsOnStorefront.productNameByProductName(product)}}" stepKey="clickProductName"/>
        <waitForPageLoad stepKey="waitForProductPageToLoad"/>
        <see selector="{{StorefrontProductInfoMainSection.productName}}" userInput="{{product}}" stepKey="seeProductName"/>
    </actionGroup>
    <actionGroup name="clickProductAddToCartInProductsOnStorefront">
        <arguments>
            <argument name="product" type="string"/>
        </arguments>
        <moveMouseOver selector="{{ProductsOnStorefront.productImageByProductName(product)}}" stepKey="moveMouseOverProduct"/>
        <click selector="{{ProductsOnStorefront.productAddToCartByProductName(product)}}" stepKey="clickProductAddToCart"/>
        <waitForPageLoad stepKey="waitForProductPageToLoad"/>
        <see userInput="You added {{product}} to your shopping cart." stepKey="seeAddToCartSuccessMessage"/>
    </actionGroup>
    <actionGroup name="clickProductAddToCompareInProductsOnStorefront">
        <arguments>
            <argument name="product" type="string"/>
        </arguments>
        <moveMouseOver selector="{{ProductsOnStorefront.productImageByProductName(product)}}" stepKey="moveMouseOverProduct"/>
        <click selector="{{ProductsOnStorefront.productAddToCompareByProductName(product)}}" stepKey="clickProductAddToCompare"/>
        <waitForPageLoad stepKey="waitForProductPageToLoad"/>
        <see userInput="You added product {{product}} to the comparison list." stepKey="seeComparisonListSuccessMessage"/>
    </actionGroup>
    <actionGroup name="clickProductAddToWishListInProductsOnStorefront">
        <arguments>
            <argument name="product" type="string"/>
        </arguments>
        <moveMouseOver selector="{{ProductsOnStorefront.productImageByProductName(product)}}" stepKey="moveMouseOverProduct"/>
        <click selector="{{ProductsOnStorefront.productAddToWishListByProductName(product)}}" stepKey="clickProductAddToWishList"/>
        <waitForPageLoad stepKey="waitForProductPageToLoad"/>
        <see userInput="You must login or register to add items to your wishlist." stepKey="seeWishListSuccessMessage"/>
    </actionGroup>
    <actionGroup name="validateSwatchInProducts">
        <annotations>
            <description>Verify a product swatch is displayed within the Product preview within Page Builder.</description>
        </annotations>
        <arguments>
            <argument name="page" defaultValue="" />
            <argument name="productGroupIndex" defaultValue="1" type="string"/>
            <argument name="productIndex" defaultValue="1" type="string"/>
            <argument name="swatch" defaultValue="" />
        </arguments>
        <waitForElementVisible selector="{{page.product(productGroupIndex)}}" stepKey="waitForProduct"/>
        <seeElement selector="{{page.productSwatch(productGroupIndex, productIndex, swatch.default_label)}}" stepKey="assertSwatch"/>
    </actionGroup>
</actionGroups>
