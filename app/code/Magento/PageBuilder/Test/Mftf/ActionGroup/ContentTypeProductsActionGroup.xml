<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<actionGroups xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/actionGroupSchema.xsd">
    <actionGroup name="validateProduct">
        <arguments>
            <argument name="page" defaultValue=""/>
            <argument name="index" defaultValue="1" type="string"/>
            <argument name="product" defaultValue="_defaultProduct"/>
        </arguments>
        <waitForElementVisible selector="{{page.base(index)}}" stepKey="waitForProduct"/>
        <waitForElementVisible selector="{{page.image(index)}}" stepKey="waitForProductImage"/>
        <waitForElementVisible selector="{{page.name(index, product.name)}}" stepKey="waitForProductName"/>
        <waitForElementVisible selector="{{page.price(index, product.price)}}" stepKey="waitForProductPrice"/>
        <!-- Must mouse over for elements to appear on storefront -->
        <moveMouseOver selector="{{page.image(index)}}" stepKey="moveMouseOverProduct"/>
        <waitForElementVisible selector="{{page.addToCart(index)}}" stepKey="waitForProductAddToCart"/>
        <waitForElementVisible selector="{{page.addToWishList(index)}}" stepKey="waitForProductAddToWishList"/>
        <waitForElementVisible selector="{{page.addToCompare(index)}}" stepKey="waitForProductAddToCompare"/>
    </actionGroup>
    <actionGroup name="validateProductInProductsOnStage">
        <arguments>
            <argument name="page" defaultValue=""/>
            <argument name="productsIndex" defaultValue="1" type="string"/>
            <argument name="productIndex" defaultValue="1" type="string"/>
            <argument name="product" defaultValue="_defaultProduct"/>
        </arguments>
        <waitForElementVisible selector="{{page.base(productsIndex)}}" stepKey="waitForProducts"/>
        <waitForElementVisible selector="{{page.productImage(productIndex)}}" stepKey="waitForProductImage"/>
        <waitForElementVisible selector="{{page.productName(productIndex, product.name)}}" stepKey="waitForProductName"/>
        <waitForElementVisible selector="{{page.productPrice(productIndex, product.price)}}" stepKey="waitForProductPrice"/>
        <waitForElementVisible selector="{{page.productAddToCart(productIndex)}}" stepKey="waitForProductAddToCart"/>
        <waitForElementVisible selector="{{page.productAddToWishList(productIndex)}}" stepKey="waitForProductAddToWishList"/>
        <waitForElementVisible selector="{{page.productAddToCompare(productIndex)}}" stepKey="waitForProductAddToCompare"/>
        <executeJS function="return getComputedStyle(document.evaluate(&quot;{{page.productName(productIndex, product.name)}}&quot;, document.body).iterateNext()).pointerEvents" stepKey="getProductNamePointerEvents"/>
        <assertEquals expected="none" expectedType="string" actualType="variable" actual="getProductNamePointerEvents" stepKey="assertProductNameNotClickable"/>
        <executeJS function="return getComputedStyle(document.evaluate(&quot;{{page.productAddToCart(productIndex)}}&quot;, document.body).iterateNext()).pointerEvents" stepKey="getAddToCartPointerEvents"/>
        <assertEquals expected="none" expectedType="string" actualType="variable" actual="getAddToCartPointerEvents" stepKey="assertAddToCartNotClickable"/>
        <executeJS function="return getComputedStyle(document.evaluate(&quot;{{page.productAddToWishList(productIndex)}}&quot;, document.body).iterateNext()).pointerEvents" stepKey="getWishlistPointerEvents"/>
        <assertEquals expected="none" expectedType="string" actualType="variable" actual="getWishlistPointerEvents" stepKey="assertWishlistNotClickable"/>
        <executeJS function="return getComputedStyle(document.evaluate(&quot;{{page.productAddToCompare(productIndex)}}&quot;, document.body).iterateNext()).pointerEvents" stepKey="getAddToComparePointerEvents"/>
        <assertEquals expected="none" expectedType="string" actualType="variable" actual="getAddToComparePointerEvents" stepKey="assertAddToCompareNotClickable"/>
    </actionGroup>
    <actionGroup name="validateProductInProducts">
        <arguments>
            <argument name="page" defaultValue=""/>
            <argument name="productsIndex" defaultValue="1" type="string"/>
            <argument name="productIndex" defaultValue="1" type="string"/>
            <argument name="product" defaultValue="_defaultProduct"/>
        </arguments>
        <waitForElementVisible selector="{{page.base(productsIndex)}}" stepKey="waitForProducts"/>
        <waitForElementVisible selector="{{page.productImage(productIndex)}}" stepKey="waitForProductImage"/>
        <waitForElementVisible selector="{{page.productName(productIndex, product.name)}}" stepKey="waitForProductName"/>
        <waitForElementVisible selector="{{page.productPrice(productIndex, product.price)}}" stepKey="waitForProductPrice"/>
        <!-- Must mouse over for elements to appear on storefront -->
        <moveMouseOver selector="{{page.productImage(productIndex)}}" stepKey="moveMouseOverProduct"/>
        <waitForElementVisible selector="{{page.productAddToCart(productIndex)}}" stepKey="waitForProductAddToCart"/>
        <waitForElementVisible selector="{{page.productAddToWishList(productIndex)}}" stepKey="waitForProductAddToWishList"/>
        <waitForElementVisible selector="{{page.productAddToCompare(productIndex)}}" stepKey="waitForProductAddToCompare"/>
    </actionGroup>
    <actionGroup name="validateProductCountInProducts">
        <arguments>
            <argument name="page" defaultValue=""/>
            <argument name="index" defaultValue="1" type="string"/>
            <argument name="count" defaultValue="" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{page.product(index)}}" stepKey="waitForProduct"/>
        <grabMultiple selector="{{page.product(index)}}" stepKey="grabProducts"/>
        <assertCount stepKey="assertCount" expected="{{count}}" expectedType="int" actualType="variable" actual="grabProducts"/>
    </actionGroup>
    <actionGroup name="addConditionToProductConditions">
        <arguments>
            <argument name="conditionType" defaultValue="PageBuilderProductsConditionCategory"/>
            <argument name="conditionInput" defaultValue="1" type="string"/>
            <argument name="index" defaultValue="1" type="string"/>
        </arguments>
        <comment userInput="addConditionToProductConditions" stepKey="comment"/>
        <waitForElementVisible selector="{{ProductsContentTypeForm.conditionsList}}" stepKey="waitForConditionsToLoad"/>
        <waitForElementVisible selector="{{ProductsContentTypeForm.conditionsListAddButton(index)}}" stepKey="waitForAddConditionButton"/>
        <click selector="{{ProductsContentTypeForm.conditionsListAddButton(index)}}" stepKey="clickAddConditionButton"/>
        <selectOption selector="{{ProductsContentTypeForm.conditionsListAddTypeSelect(index)}}" userInput="{{conditionType.value}}" stepKey="selectConditionType"/>
        <waitForPageLoad stepKey="waitForConditionFieldsToLoad"/>
        <click selector="{{ProductsContentTypeForm.conditionsListConditionPlaceholder}}" stepKey="revealCategoryInput"/>
        <fillField selector="{{ProductsContentTypeForm.conditionsListConditionInput}}" userInput="{{conditionInput}}" stepKey="fillCategoryField"/>
    </actionGroup>
    <actionGroup name="addConditionsCombinationToProductsAndSetAggregateParameters">
        <arguments>
            <argument name="aggregatorType" defaultValue="all" type="string"/>
            <argument name="booleanValueForAggregator" defaultValue="1" type="string"/>
            <argument name="index" defaultValue="1" type="string"/>
        </arguments>
        <comment userInput="addConditionsCombinationToProductsAndSetAggregateParameters" stepKey="comment"/>
        <waitForElementVisible selector="{{ProductsContentTypeForm.conditionsList}}" stepKey="waitForConditionsToLoad"/>
        <waitForElementVisible selector="{{ProductsContentTypeForm.conditionsListAddButton(index)}}" stepKey="waitForAddConditionButton"/>
        <click selector="{{ProductsContentTypeForm.conditionsListAddButton(index)}}" stepKey="clickAddConditionButton"/>
        <selectOption selector="{{ProductsContentTypeForm.conditionsListAddTypeSelect(index)}}" userInput="{{PageBuilderProductsConditionCombination.value}}" stepKey="selectCombinationOption"/>
        <waitForPageLoad stepKey="waitForConditionsCombinationTemplateToLoad"/>
        <click selector="{{ProductsContentTypeForm.conditionsCombinationAggregateSelector(index)}}" stepKey="clickAggregateType"/>
        <selectOption selector="{{ProductsContentTypeForm.conditionsCombinationAggregateSelectorSelect(index)}}" userInput="{{aggregatorType}}" stepKey="selectAggregateType"/>
        <waitForPageLoad stepKey="waitForAggregateTypeToLoad"/>
        <click selector="{{ProductsContentTypeForm.conditionsListText}}" stepKey="clearOptions"/>
        <click selector="{{ProductsContentTypeForm.conditionsCombinationAggregateBooleanSelector(index)}}" stepKey="clickAggregateTypeBoolean"/>
        <selectOption selector="{{ProductsContentTypeForm.conditionsCombinationAggregateBooleanSelectorSelect(index)}}" userInput="{{booleanValueForAggregator}}" stepKey="selectAggregateTypeBoolean"/>
        <waitForPageLoad stepKey="waitForAggregateTypeBooleanToLoad"/>
        <click selector="{{ProductsContentTypeForm.conditionsListText}}" stepKey="clearOptions2"/>
    </actionGroup>
</actionGroups>
