<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->
<actionGroups xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/actionGroupSchema.xsd">
    <actionGroup name="addImageToStage">
        <arguments>
            <argument name="property"/>
        </arguments>
        <comment userInput="Attach image A to PageBuilder stage" stepKey="commentAttach"/>
        <attachFile userInput="{{property.value}}" selector="{{ImageOnStage.attachImageBtn}}" stepKey="attachImageFileOnStage"/>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <waitForElementVisible selector="{{ImageOnStage.imagePreview}}" stepKey="waitForImagePreview"/>
        <waitForElementVisible selector="{{ImageOnStage.imageSourceOnStage(property.fileName)}}" stepKey="waitForImageSource"/>
    </actionGroup>
    <actionGroup name="verifyUploadImageButtons">
        <arguments>
            <argument name="contentType"/>
            <argument name="section"/>
            <argument name="offsetXCoordinate" defaultValue="null" type="string"/>
            <argument name="offsetYCoordinate" defaultValue="null" type="string"/>
        </arguments>
        <comment userInput="Hover uploaded image to check Upload New Image button and Select From Gallery button" stepKey="commentHover"/>
        <moveMouseOver selector="{{PageBuilderStage.contentTypeInStage(contentType.role)}}" x="{{offsetXCoordinate}}" y="{{offsetYCoordinate}}" stepKey="onMouseOverBannerContentTypeStage"/>
        <waitForElementVisible selector="{{section.uploadNewImageBtn}}" stepKey="waitForUploadNewImageBtn" />
        <waitForElementVisible selector="{{section.selectFromGalleryImageBtn}}" stepKey="seeSelectFromGalleryBtn2" />
    </actionGroup>
    <actionGroup name="verifyImageOnSlideout">
        <arguments>
            <argument name="property"/>
        </arguments>
        <comment userInput="Verify image display on preview of slide-out" stepKey="commentVerifyImage"/>
        <waitForElementVisible selector="{{ImageOnConfigurationPanel.imageName(property.value)}}" stepKey="seeImageNameOnPreview"/>
        <waitForElementVisible selector="{{ImageOnConfigurationPanel.imageSource(property.fileName)}}" stepKey="seeMainImageSource"/>
    </actionGroup>
    <actionGroup name="validateImage">
        <arguments>
            <argument name="section"/>
            <argument name="pageNamePrefix" defaultValue="admin" type="string"/>
            <argument name="image"/>
            <argument name="index" defaultValue="1" type="string"/>
        </arguments>
        <comment userInput="validateImage" stepKey="comment"/>
        <waitForElementVisible selector="{{section.base(index)}}" stepKey="waitForBaseElement"/>
        <waitForElementVisible selector="{{section.imageSourceByIndex(index, image.fileName)}}" stepKey="waitForImage"/>
        <grabAttributeFrom selector="{{section.imageSourceByIndex(index, image.fileName)}}" userInput="src" stepKey="contentTypeSrc"/>
        <!-- Grab base URL -->
        <executeJS function="return '{{pageNamePrefix}}'" stepKey="pageNamePrefix"/>
        <grabFromCurrentUrl regex="/(^.+(?=\/$pageNamePrefix))/" stepKey="baseURL"/>
        <!-- Return the string value of image -->
        <!--<executeJS function="return '{$contentTypeStyle}'.match(/((?&lt;=(src: url\((&quot;|\'))).+(?=(&quot;|\')\);))/)[0]" stepKey="imageSrcValue"/>-->
        <!-- Convert all characters in string variables to regex friendly strings  -->
        <executeJS function="return '{$baseURL}'.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\\\^\\$\|]/g, '\\\\$&amp;')" stepKey="regexBaseURL"/>
        <executeJS function="return '{{image.path}}'.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\\\^\\$\|]/g, '\\\\$&amp;')" stepKey="regexFilePath"/>
        <assertRegExp stepKey="assertImageContainsFileInformation">
            <expectedResult type="string">/{$regexBaseURL}\/pub\/media.*{$regexFilePath}.*\/{{image.fileName}}(_\d+)?\.{{image.extension}}/</expectedResult>
            <actualResult type="variable">$contentTypeSrc</actualResult>
        </assertRegExp>
    </actionGroup>
</actionGroups>
