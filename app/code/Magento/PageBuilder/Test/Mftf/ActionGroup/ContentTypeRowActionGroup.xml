<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<actionGroups xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="../../../../../../../dev/tests/acceptance/vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/Test/etc/actionGroupSchema.xsd">
    <!-- Validate Row All Background Attributes -->
    <actionGroup name="validateRowBackgroundAttributesWithAllUpdated">
        <arguments>
            <argument name="page" defaultValue=""/>
            <argument name="index" defaultValue="1" type="string"/>
            <argument name="backgroundColor" defaultValue=""/>
            <argument name="backgroundImage" defaultValue=""/>
            <argument name="backgroundPosition" defaultValue="PageBuilderRowBackgroundPosition_Default"/>
            <argument name="backgroundSize" defaultValue="PageBuilderRowBackgroundSize_Default"/>
            <argument name="backgroundRepeat" defaultValue="PageBuilderRowBackgroundRepeat_Default"/>
            <argument name="backgroundAttachment" defaultValue="PageBuilderRowBackgroundAttachment_Default"/>
        </arguments>
        <waitForElementVisible selector="{{page.base(index)}}" stepKey="waitForRow"/>
        <waitForElementVisible selector="{{page.backgroundColor(index, backgroundColor.rgb)}}" stepKey="waitForBackgroundColor"/>
        <waitForElementVisible selector="{{page.backgroundImage(index, backgroundImage.fileName, backgroundImage.extension)}}" stepKey="waitForBackgroundImage"/>
        <waitForElementVisible selector="{{page.backgroundPosition(index, backgroundPosition.styleValue)}}" stepKey="waitForBackgroundPosition"/>
        <waitForElementVisible selector="{{page.backgroundSize(index, backgroundSize.value)}}" stepKey="waitForBackgroundSize"/>
        <waitForElementVisible selector="{{page.backgroundRepeat(index, backgroundRepeat.styleValue)}}" stepKey="waitForBackgroundRepeat"/>
        <waitForElementVisible selector="{{page.backgroundAttachment(index, backgroundAttachment.value)}}" stepKey="waitForBackgroundAttachment"/>
    </actionGroup>
    <actionGroup name="validateRowBackgroundAttributesWithAllUpdatedAndParallaxEnabled">
        <arguments>
            <argument name="page" defaultValue=""/>
            <argument name="index" defaultValue="1" type="string"/>
            <argument name="backgroundColor" defaultValue=""/>
            <argument name="backgroundImage" defaultValue=""/>
            <argument name="backgroundPosition" defaultValue="PageBuilderRowBackgroundPosition_Default"/>
            <argument name="backgroundSize" defaultValue="PageBuilderRowBackgroundSize_Default"/>
            <argument name="backgroundRepeat" defaultValue="PageBuilderRowBackgroundRepeat_Default"/>
            <argument name="backgroundAttachment" defaultValue="PageBuilderRowBackgroundAttachment_Default"/>
        </arguments>
        <waitForElementVisible selector="{{page.base(index)}}" stepKey="waitForRow"/>
        <waitForElementVisible selector="{{page.backgroundColor(index, backgroundColor.rgb)}}" stepKey="waitForBackgroundColor"/>
        <waitForElementVisible selector="{{page.parallaxBackgroundImage(index, backgroundImage.fileName, backgroundImage.extension)}}" stepKey="waitForBackgroundImage"/>
        <waitForElementVisible selector="{{page.backgroundPosition(index, backgroundPosition.styleValue)}}" stepKey="waitForBackgroundPosition"/>
        <waitForElementVisible selector="{{page.backgroundSize(index, backgroundSize.value)}}" stepKey="waitForBackgroundSize"/>
        <waitForElementVisible selector="{{page.backgroundRepeat(index, backgroundRepeat.styleValue)}}" stepKey="waitForBackgroundRepeat"/>
        <waitForElementVisible selector="{{page.backgroundAttachment(index, backgroundAttachment.value)}}" stepKey="waitForBackgroundAttachment"/>
    </actionGroup>
    <!-- Validate Row Parallax Background -->
    <actionGroup name="validateRowParallaxBackgroundAttributes">
        <arguments>
            <argument name="page" defaultValue=""/>
            <argument name="index" defaultValue="1" type="string"/>
            <argument name="parallaxStateValue" defaultValue=""/>
            <argument name="parallaxSpeedValue" defaultValue=""/>
        </arguments>
        <waitForElementVisible selector="{{page.base(index)}}" stepKey="waitForRow"/>
        <waitForElementVisible selector="{{page.parallaxState(index, parallaxStateValue.value)}}" stepKey="waitForParallaxBackgroundState"/>
        <waitForElementVisible selector="{{page.parallaxSpeed(index, parallaxSpeedValue.value)}}" stepKey="waitForParallaxBackgroundSpeed"/>
    </actionGroup>
    <!-- Validate Contained Row Appearance on stage -->
    <actionGroup name="validateContainedRowAppearanceOnStage">
        <comment userInput="Increase window size to see varying widths for rows" stepKey="commentResizeWindow"/>
        <resizeWindow width="1920" height="1024" stepKey="resizeWindow"/>
        <executeJS function="return {{PageBuilderStage.stageWidthJS}}" stepKey="stageWidth"/>
        <executeJS function="return {{RowOnStage.rowWidthJS('contained', '0')}}" stepKey="rowWidth"/>
        <assertGreaterThan stepKey="assertRowWidthGreaterThanZero">
            <expectedResult type="int">0</expectedResult>
            <actualResult type="variable">rowWidth</actualResult>
        </assertGreaterThan>
        <assertLessThan stepKey="assertRowWidthLessThanStage">
            <expectedResult type="variable">stageWidth</expectedResult>
            <actualResult type="variable">rowWidth</actualResult>
        </assertLessThan>
    </actionGroup>
    <!-- Validate Full Width Row Appearance on stage -->
    <actionGroup name="validateFullWidthRowAppearanceOnStage">
        <comment userInput="Increase window size to see varying widths for rows" stepKey="commentResizeWindow"/>
        <resizeWindow width="1920" height="1024" stepKey="resizeWindow"/>
        <executeJS function="return {{PageBuilderStage.stageWidthJS}}" stepKey="stageWidth"/>
        <executeJS function="return {{RowOnStage.rowWidthJS('full-width', '0')}}" stepKey="rowWidth"/>
        <executeJS function="return parseInt({{RowOnStage.rowH2ChildWidthJS('full-width', '0')}} + {{PageBuilderPaddingPropertyRowDefault.paddingLeft}} + {{PageBuilderPaddingPropertyRowDefault.paddingRight}})" stepKey="rowElementWidth"/>
        <assertGreaterThan stepKey="assertRowWidthGreaterThanZero">
            <expectedResult type="int">0</expectedResult>
            <actualResult type="variable">rowWidth</actualResult>
        </assertGreaterThan>
        <assertEquals stepKey="assertRowWidthEqualsStage">
            <expectedResult type="variable">stageWidth</expectedResult>
            <actualResult type="variable">rowWidth</actualResult>
        </assertEquals>
        <assertGreaterThan stepKey="assertRowWidthGreaterThanContents">
            <expectedResult type="variable">rowElementWidth</expectedResult>
            <actualResult type="variable">rowWidth</actualResult>
        </assertGreaterThan>
    </actionGroup>
    <!-- Validate Full Bleed Row Appearance on stage -->
    <actionGroup name="validateFullBleedRowAppearanceOnStage">
        <comment userInput="Increase window size to see varying widths for rows" stepKey="commentResizeWindow"/>
        <resizeWindow width="1920" height="1024" stepKey="resizeWindow"/>
        <executeJS function="return {{PageBuilderStage.stageWidthJS}}" stepKey="stageWidth"/>
        <executeJS function="return {{RowOnStage.rowWidthJS('full-bleed', '0')}}" stepKey="rowWidth"/>
        <executeJS function="return parseInt({{RowOnStage.rowH2ChildWidthJS('full-bleed', '0')}} + {{PageBuilderPaddingPropertyRowDefault.paddingLeft}} + {{PageBuilderPaddingPropertyRowDefault.paddingRight}})" stepKey="rowElementWidth"/>
        <assertGreaterThan stepKey="assertRowWidthGreaterThanZero">
            <expectedResult type="int">0</expectedResult>
            <actualResult type="variable">rowWidth</actualResult>
        </assertGreaterThan>
        <assertEquals stepKey="assertRowWidthEqualsStage">
            <expectedResult type="variable">stageWidth</expectedResult>
            <actualResult type="variable">rowWidth</actualResult>
        </assertEquals>
        <assertEquals stepKey="assertRowWidthEqualsContentsPlusPadding">
            <expectedResult type="variable">rowElementWidth</expectedResult>
            <actualResult type="variable">rowWidth</actualResult>
        </assertEquals>
    </actionGroup>
    <!-- Validate Contained Row Appearance on Storefront -->
    <actionGroup name="validateContainedRowAppearanceOnStorefront">
        <comment userInput="Increase window size to see varying widths for rows" stepKey="commentResizeWindow"/>
        <resizeWindow width="1920" height="1024" stepKey="resizeWindow"/>
        <executeJS function="return {{PageBuilderStoreFront.pageWidthJS}}" stepKey="pageWidth"/>
        <executeJS function="return {{RowOnStorefront.rowWidthJS('contained', '0')}}" stepKey="rowWidth"/>
        <assertGreaterThan stepKey="assertRowWidthGreaterThanZero">
            <expectedResult type="int">0</expectedResult>
            <actualResult type="variable">rowWidth</actualResult>
        </assertGreaterThan>
        <assertLessThan stepKey="assertRowWidthLessThanPage">
            <expectedResult type="variable">pageWidth</expectedResult>
            <actualResult type="variable">rowWidth</actualResult>
        </assertLessThan>
    </actionGroup>
    <!-- Validate Full Width Row Appearance on Storefront -->
    <actionGroup name="validateFullWidthRowAppearanceOnStorefront">
        <comment userInput="Increase window size to see varying widths for rows" stepKey="commentResizeWindow"/>
        <resizeWindow width="1920" height="1024" stepKey="resizeWindow"/>
        <executeJS function="return {{PageBuilderStoreFront.pageWidthJS}}" stepKey="pageWidth"/>
        <executeJS function="return {{RowOnStorefront.rowWidthJS('full-width', '0')}}" stepKey="rowWidth"/>
        <executeJS function="return parseInt({{RowOnStorefront.rowH2ChildWidthJS('full-width', '0')}} + {{PageBuilderPaddingPropertyRowDefault.paddingLeft}} + {{PageBuilderPaddingPropertyRowDefault.paddingRight}})" stepKey="rowElementWidth"/>
        <assertGreaterThan stepKey="assertRowWidthGreaterThanZero">
            <expectedResult type="int">0</expectedResult>
            <actualResult type="variable">rowWidth</actualResult>
        </assertGreaterThan>
        <assertEquals stepKey="assertRowWidthEqualsPage">
            <expectedResult type="variable">pageWidth</expectedResult>
            <actualResult type="variable">rowWidth</actualResult>
        </assertEquals>
        <assertGreaterThan stepKey="assertRowWidthGreaterThanContents">
            <expectedResult type="variable">rowElementWidth</expectedResult>
            <actualResult type="variable">rowWidth</actualResult>
        </assertGreaterThan>
    </actionGroup>
    <!-- Validate Full Bleed Row Appearance on Storefront -->
    <actionGroup name="validateFullBleedRowAppearanceOnStorefront">
        <comment userInput="Increase window size to see varying widths for rows" stepKey="commentResizeWindow"/>
        <resizeWindow width="1920" height="1024" stepKey="resizeWindow"/>
        <executeJS function="return {{PageBuilderStoreFront.pageWidthJS}}" stepKey="pageWidth"/>
        <executeJS function="return {{RowOnStorefront.rowWidthJS('full-bleed', '0')}}" stepKey="rowWidth"/>
        <executeJS function="return parseInt({{RowOnStorefront.rowH2ChildWidthJS('full-bleed', '0')}} + {{PageBuilderPaddingPropertyRowDefault.paddingLeft}} + {{PageBuilderPaddingPropertyRowDefault.paddingRight}})" stepKey="rowElementWidth"/>
        <assertGreaterThan stepKey="assertRowWidthGreaterThanZero">
            <expectedResult type="int">0</expectedResult>
            <actualResult type="variable">rowWidth</actualResult>
        </assertGreaterThan>
        <assertEquals stepKey="assertRowWidthEqualsPage">
            <expectedResult type="variable">pageWidth</expectedResult>
            <actualResult type="variable">rowWidth</actualResult>
        </assertEquals>
        <assertEquals stepKey="assertRowWidthEqualsContentsPlusPadding">
            <expectedResult type="variable">rowElementWidth</expectedResult>
            <actualResult type="variable">rowWidth</actualResult>
        </assertEquals>
    </actionGroup>
</actionGroups>
