<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<actionGroups xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/actionGroupSchema.xsd">
    <actionGroup name="addSlide">
        <arguments>
            <argument name="slideGroupIndex" defaultValue="1" type="string"/>
        </arguments>
        <comment userInput="Adding Slide" stepKey="comment"/>
        <executeJS function="return document.getElementsByClassName('pagebuilder-slide').length+1" stepKey="initialNumberOfSlidesPlusOne"/>
        <scrollTo selector="{{PageBuilderPanel.searchPanel}}" x="0" y="-150" stepKey="scrollToSearchPanel"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusSlide"/>
        <moveMouseOver selector="{{PageBuilderStage.contentTypeInStageByIndex(PageBuilderSliderContentType.role, slideGroupIndex)}}" stepKey="mouseOverSlider"/>
        <waitForPageLoad stepKey="waitForPageLoad1"/>
        <waitForElementVisible selector="{{PageBuilderContentTypeOptionsMenu.contentTypeOptionsMenu(PageBuilderSliderContentType.role)}}" stepKey="waitForOptionsMenu"/>
        <waitForElementVisible selector="{{PageBuilderContentTypeOptionsMenu.contentTypeAdd(PageBuilderSliderContentType.role)}}" stepKey="waitForAddSlideButton"/>
        <click selector="{{PageBuilderContentTypeOptionsMenu.contentTypeAdd(PageBuilderSliderContentType.role)}}" stepKey="clickAddSlideButton"/>
        <waitForPageLoad stepKey="waitForPageLoad2"/>
        <executeJS function="return document.getElementsByClassName('pagebuilder-slide').length" stepKey="numberOfSlidesAfterAdd"/>
        <assertEquals stepKey="assertOneMoreSlide">
            <expectedResult type="variable">initialNumberOfSlidesPlusOne</expectedResult>
            <actualResult type="variable">numberOfSlidesAfterAdd</actualResult>
        </assertEquals>
    </actionGroup>
    <actionGroup name="switchSlide">
        <arguments>
            <argument name="section" defaultValue="SliderOnFrontend"/>
            <argument name="index" defaultValue="2" type="string"/>
        </arguments>
        <waitForElementVisible selector="{{SliderOnFrontend.slideNavigator(index)}}" stepKey="waitForSliderButton"/>
        <click selector="{{SliderOnFrontend.slideNavigator(index)}}" stepKey="clickSliderButton"/>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <waitForElementVisible selector="{{SlideOnFrontend.slide(index)}}" stepKey="waitForSlide"/>
    </actionGroup>
    <actionGroup name="unfocusSlideOptions">
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="clickOutsideLiveEdit"/>
        <waitForPageLoad stepKey="waitForAnimation" time="30"/>
        <waitForElementNotVisible selector="{{SlideOnBackend.optionTitle}}" stepKey="dontSeeSlideOptionsEdit"/>
    </actionGroup>
    <actionGroup name="inlineEditWYSIWYGFromStageForSlideCollageAppearancesInSmallColumns" extends="inlineEditWYSIWYGFromStage">
        <click selector="{{SlideOnBackend.base(index)}}" stepKey="focusOnEditorArea"/>
    </actionGroup>
    <actionGroup name="validateSlideOverlayAndButtonPoster">
        <arguments>
            <argument name="column"/>
            <argument name="slide"/>
            <argument name="slideBorderWidth" defaultValue="PageBuilderAdvancedBorderWidthProperty0"/>
            <argument name="diffThreshold" defaultValue="0" type="string"/>
        </arguments>
        <executeJS function="return document.querySelector('{{column.columnX('1')}}').clientWidth" stepKey="columnWidth"/>
        <executeJS function="return parseInt({{slide.slideJS('1')}}.getBoundingClientRect().width)" stepKey="slideWidth"/>
        <executeJS function="return parseInt({$columnWidth} - {{PageBuilderPaddingPropertyColumnDefault.paddingLeft}} - {{PageBuilderPaddingPropertyColumnDefault.paddingRight}})" stepKey="expectedSlideWidth"/>
        <executeJS function="return Math.abs({$expectedSlideWidth} - {$slideWidth})" stepKey="slideDiff"/>
        <!-- We will allow a 2px offset to account for rounding and any additional threshold that is passed in as an argument -->
        <executeJS function="return parseInt({{diffThreshold}} + 2)" stepKey="acceptableOffset"/>
        <assertLessThanOrEqual stepKey="assertSlideWidthEqualsColumnWidthLessColumnPaddingAndColumnBorderWidth">
            <expectedResult type="variable">acceptableOffset</expectedResult>
            <actualResult type="variable">slideDiff</actualResult>
        </assertLessThanOrEqual>
        <executeJS function="return parseInt({{slide.overlayJS('1')}}.getBoundingClientRect().width)" stepKey="overlayWidth"/>
        <executeJS function="return parseInt({$slideWidth} - {{PageBuilderPaddingPropertyDefault.paddingLeft}} - {{PageBuilderPaddingPropertyDefault.paddingRight}} - ({{slideBorderWidth.value}} * 2))" stepKey="expectedOverlayWidth"/>
        <executeJS function="return Math.abs({$expectedOverlayWidth} - {$overlayWidth})" stepKey="overlayDiff"/>
        <assertLessThanOrEqual stepKey="assertOverlayWidthEqualsSlideWidthLessSlidePaddingAndSlideBorderWidth">
            <expectedResult type="variable">acceptableOffset</expectedResult>
            <actualResult type="variable">overlayDiff</actualResult>
        </assertLessThanOrEqual>
        <executeJS function="return parseInt({{slide.contentJS('1')}}.getBoundingClientRect().width)" stepKey="contentWidth"/>
        <executeJS function="return parseInt({$overlayWidth} - {{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.paddingLeft}} - {{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.paddingRight}})" stepKey="expectedContentWidth"/>
        <executeJS function="return Math.abs({$expectedContentWidth} - {$contentWidth})" stepKey="contentDiff"/>
        <assertLessThanOrEqual stepKey="assertContentWidthEqualsOverlayWidthLessPadding">
            <expectedResult type="variable">acceptableOffset</expectedResult>
            <actualResult type="variable">contentDiff</actualResult>
        </assertLessThanOrEqual>
        <executeJS function="return parseInt({{slide.buttonJS('1')}}.getBoundingClientRect().width)" stepKey="buttonWidth"/>
        <!-- wysiwyg content may shrink smaller, but buttons will never be smaller than 36px (17px padding + 1px border) -->
        <executeJS function="return Math.max(36, {$expectedContentWidth})" stepKey="expectedButtonWidth"/>
        <executeJS function="return Math.abs({$expectedButtonWidth} - {$buttonWidth})" stepKey="buttonDiff"/>
        <assertLessThanOrEqual stepKey="assertButtonWidthEqualsOverlayWidthLessPadding">
            <expectedResult type="variable">acceptableOffset</expectedResult>
            <actualResult type="variable">buttonDiff</actualResult>
        </assertLessThanOrEqual>
    </actionGroup>
    <actionGroup name="validateSlideOverlayAndButtonCollage">
        <arguments>
            <argument name="column"/>
            <argument name="slide"/>
            <argument name="slideBorderWidth" defaultValue="PageBuilderAdvancedBorderWidthProperty0"/>
            <argument name="diffThreshold" defaultValue="0" type="string"/>
        </arguments>
        <executeJS function="return document.querySelector('{{column.columnX('1')}}').clientWidth" stepKey="columnWidth"/>
        <executeJS function="return parseInt({{slide.slideJS('1')}}.getBoundingClientRect().width)" stepKey="slideWidth"/>
        <executeJS function="return parseInt({$columnWidth} - {{PageBuilderPaddingPropertyColumnDefault.paddingLeft}} - {{PageBuilderPaddingPropertyColumnDefault.paddingRight}})" stepKey="expectedSlideWidth"/>
        <executeJS function="return Math.abs({$expectedSlideWidth} - {$slideWidth})" stepKey="slideDiff"/>
        <!-- We will allow a 2px offset to account for rounding and any additional threshold that is passed in as an argument -->
        <executeJS function="return parseInt({{diffThreshold}} + 2)" stepKey="acceptableOffset"/>
        <assertLessThanOrEqual stepKey="assertSlideWidthEqualsColumnWidthLessColumnPaddingAndColumnBorderWidth">
            <expectedResult type="variable">acceptableOffset</expectedResult>
            <actualResult type="variable">slideDiff</actualResult>
        </assertLessThanOrEqual>
        <executeJS function="return parseInt({{slide.overlayJS('1')}}.getBoundingClientRect().width)" stepKey="overlayWidth"/>
        <executeJS function="return parseInt({$slideWidth} - {{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.paddingLeft}} - {{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.paddingRight}} - ({{slideBorderWidth.value}} * 2))" stepKey="expectedOverlayWidth"/>
        <executeJS function="return Math.abs({$expectedOverlayWidth} - {$overlayWidth})" stepKey="overlayDiff"/>
        <assertLessThanOrEqual stepKey="assertOverlayWidthEqualsSlideWidthLessSlidePaddingAndSlideBorderWidth">
            <expectedResult type="variable">acceptableOffset</expectedResult>
            <actualResult type="variable">overlayDiff</actualResult>
        </assertLessThanOrEqual>
        <executeJS function="return parseInt({{slide.contentJS('1')}}.getBoundingClientRect().width)" stepKey="contentWidth"/>
        <executeJS function="return parseInt({$overlayWidth} - {{PageBuilderPaddingPropertyOverlayDefault.paddingLeft}} - {{PageBuilderPaddingPropertyOverlayDefault.paddingRight}})" stepKey="expectedContentWidth"/>
        <executeJS function="return Math.abs({$expectedContentWidth} - {$contentWidth})" stepKey="contentDiff"/>
        <assertLessThanOrEqual stepKey="assertContentWidthEqualsOverlayWidthLessPadding">
            <expectedResult type="variable">acceptableOffset</expectedResult>
            <actualResult type="variable">contentDiff</actualResult>
        </assertLessThanOrEqual>
        <executeJS function="return parseInt({{slide.buttonJS('1')}}.getBoundingClientRect().width)" stepKey="buttonWidth"/>
        <!-- wysiwyg content may shrink smaller, but buttons will never be smaller than 36px (17px padding + 1px border) -->
        <executeJS function="return Math.max(36, {$expectedContentWidth})" stepKey="expectedButtonWidth"/>
        <executeJS function="return Math.abs({$expectedButtonWidth} - {$buttonWidth})" stepKey="buttonDiff"/>
        <assertLessThanOrEqual stepKey="assertButtonWidthEqualsOverlayWidthLessPadding">
            <expectedResult type="variable">acceptableOffset</expectedResult>
            <actualResult type="variable">buttonDiff</actualResult>
        </assertLessThanOrEqual>
    </actionGroup>
</actionGroups>
