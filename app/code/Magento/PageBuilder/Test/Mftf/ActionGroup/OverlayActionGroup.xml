<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<actionGroups xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/actionGroupSchema.xsd">
    <!-- Poster Appearance -->
    <actionGroup name="validateOverlayPositionPoster">
        <arguments>
            <argument name="page"/>
            <argument name="index" defaultValue="1" type="string"/>
            <argument name="padding" defaultValue="PageBuilderPaddingProperty40"/>
        </arguments>
        <!-- Validate top edge of overlay -->
        <comment userInput="Validate top edge of overlay" stepKey="commentValidateTopEdgeOfOverlayWithPadding"/>
        <executeJS function="return {{page.wrapperJS(index)}}.getBoundingClientRect().top" stepKey="wrapperTopPosition"/>
        <executeJS function="return {{page.overlayJS(index)}}.getBoundingClientRect().top" stepKey="overlayTopPosition"/>
        <executeJS function="return Math.round(({$overlayTopPosition}/{$wrapperTopPosition})*100)/100" stepKey="overlayTopRatio"/>
        <assertEquals stepKey="assertOverlayTopRatio">
            <expectedResult type="int">1</expectedResult>
            <actualResult type="variable">overlayTopRatio</actualResult>
        </assertEquals>
        <!-- Validate right edge of overlay -->
        <comment userInput="Validate right edge of overlay" stepKey="commentValidateRightEdgeOfOverlay"/>
        <executeJS function="return {{page.wrapperJS(index)}}.getBoundingClientRect().right" stepKey="wrapperRightPosition"/>
        <executeJS function="return {{page.overlayJS(index)}}.getBoundingClientRect().right" stepKey="overlayRightPosition"/>
        <executeJS function="return Math.round(({$wrapperRightPosition}/{$overlayRightPosition})*100)/100" stepKey="overlayRightRatio"/>
        <assertEquals stepKey="assertOverlayRightRatio">
            <expectedResult type="int">1</expectedResult>
            <actualResult type="variable">overlayRightRatio</actualResult>
        </assertEquals>
        <!-- Validate bottom edge of overlay -->
        <comment userInput="Validate bottom edge of overlay" stepKey="commentValidateBottomEdgeOfOverlay"/>
        <executeJS function="return {{page.wrapperJS(index)}}.getBoundingClientRect().bottom" stepKey="wrapperBottomPosition"/>
        <executeJS function="return {{page.overlayJS(index)}}.getBoundingClientRect().bottom" stepKey="overlayBottomPosition"/>
        <executeJS function="return Math.round(({$wrapperBottomPosition}/{$overlayBottomPosition})*100)/100" stepKey="overlayBottomRatio"/>
        <assertEquals stepKey="assertOverlayBottomRatio">
            <expectedResult type="int">1</expectedResult>
            <actualResult type="variable">overlayBottomRatio</actualResult>
        </assertEquals>
        <!-- Validate left edge of overlay -->
        <comment userInput="Validate left edge of overlay" stepKey="commentValidateLeftEdgeOfOverlay"/>
        <executeJS function="return {{page.wrapperJS(index)}}.getBoundingClientRect().left" stepKey="wrapperLeftPosition"/>
        <executeJS function="return {{page.overlayJS(index)}}.getBoundingClientRect().left" stepKey="overlayLeftPosition"/>
        <executeJS function="return Math.round(({$wrapperLeftPosition}/{$overlayLeftPosition})*100)/100" stepKey="overlayLeftRatio"/>
        <assertEquals stepKey="assertOverlayLeftRatio">
            <expectedResult type="int">1</expectedResult>
            <actualResult type="variable">overlayLeftRatio</actualResult>
        </assertEquals>
    </actionGroup>
    <!-- Collage Appearances -->
    <!-- Checks the position of the overlay with small padding value. This action group may not work with large padding values -->
    <actionGroup name="validateOverlayPositionCollageLeft">
        <arguments>
            <argument name="page"/>
            <argument name="index" defaultValue="1" type="string"/>
            <argument name="padding" defaultValue="PageBuilderPaddingProperty40"/>
        </arguments>
        <!-- Validate right edge of overlay -->
        <comment userInput="Validate right edge of overlay" stepKey="commentValidateRightEdgeOfOverlay"/>
        <executeJS function="return {{page.wrapperJS(index)}}.getBoundingClientRect().right" stepKey="wrapperRightPosition"/>
        <executeJS function="return {{page.overlayJS(index)}}.getBoundingClientRect().right" stepKey="overlayRightPosition"/>
        <executeJS function="return Math.round(({$wrapperRightPosition}-{$overlayRightPosition})*100)/100" stepKey="overlaySpaceRight"/>
        <assertGreaterThanOrEqual stepKey="assertOverlaySpaceRightGreaterThanOrEqualToRightPadding">
            <expectedResult type="int">{{padding.paddingRight}}</expectedResult>
            <actualResult type="variable">overlaySpaceRight</actualResult>
        </assertGreaterThanOrEqual>
        <!-- Validate left edge of overlay -->
        <comment userInput="Validate left edge of overlay" stepKey="commentValidateLeftEdgeOfOverlay"/>
        <executeJS function="return {{page.wrapperJS(index)}}.getBoundingClientRect().left" stepKey="wrapperLeftPosition"/>
        <executeJS function="return {{page.overlayJS(index)}}.getBoundingClientRect().left" stepKey="overlayLeftPosition"/>
        <executeJS function="return Math.round(({$overlayLeftPosition}-{$wrapperLeftPosition})*100)/100" stepKey="overlayPadding"/>
        <assertEquals stepKey="assertOverlayIsEqualToPadding">
            <expectedResult type="int">{{padding.paddingLeft}}</expectedResult>
            <actualResult type="variable">overlayPadding</actualResult>
        </assertEquals>
    </actionGroup>
    <!-- Checks the position of the overlay with small padding value. This action group may not work with large padding values -->
    <actionGroup name="validateOverlayPositionCollageRight">
        <arguments>
            <argument name="page"/>
            <argument name="index" defaultValue="1" type="string"/>
            <argument name="padding" defaultValue="PageBuilderPaddingProperty40"/>
        </arguments>
        <!-- Validate right edge of overlay -->
        <comment userInput="Validate right edge of overlay" stepKey="commentValidateRightEdgeOfOverlay"/>
        <executeJS function="return {{page.wrapperJS(index)}}.getBoundingClientRect().right" stepKey="wrapperRightPosition"/>
        <executeJS function="return {{page.overlayJS(index)}}.getBoundingClientRect().right" stepKey="overlayRightPosition"/>
        <executeJS function="return Math.round(({$wrapperRightPosition}-{$overlayRightPosition})*100)/100" stepKey="overlayPadding"/>
        <assertEquals stepKey="assertOverlayIsEqualToPadding">
            <expectedResult type="int">{{padding.paddingRight}}</expectedResult>
            <actualResult type="variable">overlayPadding</actualResult>
        </assertEquals>
        <!-- Validate left edge of overlay -->
        <comment userInput="Validate left edge of overlay" stepKey="commentValidateLeftEdgeOfOverlay"/>
        <executeJS function="return {{page.wrapperJS(index)}}.getBoundingClientRect().left" stepKey="wrapperLeftPosition"/>
        <executeJS function="return {{page.overlayJS(index)}}.getBoundingClientRect().left" stepKey="overlayLeftPosition"/>
        <executeJS function="return Math.round(({$overlayLeftPosition}-{$wrapperLeftPosition})*100)/100" stepKey="overlaySpaceLeft"/>
        <assertGreaterThanOrEqual stepKey="assertOverlaySpaceLeftGreaterThanOrEqualToLeftPadding">
            <expectedResult type="int">{{padding.paddingLeft}}</expectedResult>
            <actualResult type="variable">overlaySpaceLeft</actualResult>
        </assertGreaterThanOrEqual>
    </actionGroup>
    <!-- Checks the position of the overlay with small padding value. This action group may not work with large padding values -->
    <actionGroup name="validateOverlayPositionCollageCenter">
        <arguments>
            <argument name="page"/>
            <argument name="index" defaultValue="1" type="string"/>
            <argument name="padding" defaultValue="PageBuilderPaddingProperty40"/>
        </arguments>
        <!-- Validate right edge of overlay -->
        <executeJS function="return {{page.wrapperJS(index)}}.getBoundingClientRect().right" stepKey="wrapperRightPosition"/>
        <executeJS function="return {{page.overlayJS(index)}}.getBoundingClientRect().right" stepKey="overlayRightPosition"/>
        <executeJS function="return Math.round(({$wrapperRightPosition}-{$overlayRightPosition})*100)/100" stepKey="overlaySpaceRight"/>
        <assertGreaterThanOrEqual stepKey="assertOverlaySpaceRightGreaterThanOrEqualToRightPadding">
            <expectedResult type="int">{{padding.paddingRight}}</expectedResult>
            <actualResult type="variable">overlaySpaceRight</actualResult>
        </assertGreaterThanOrEqual>
        <!-- Validate left edge of overlay -->
        <comment userInput="Validate left edge of overlay" stepKey="commentValidateLeftEdgeOfOverlay"/>
        <executeJS function="return {{page.wrapperJS(index)}}.getBoundingClientRect().left" stepKey="wrapperLeftPosition"/>
        <executeJS function="return {{page.overlayJS(index)}}.getBoundingClientRect().left" stepKey="overlayLeftPosition"/>
        <executeJS function="return Math.round(({$overlayLeftPosition}-{$wrapperLeftPosition})*100)/100" stepKey="overlaySpaceLeft"/>
        <assertGreaterThanOrEqual stepKey="assertOverlaySpaceLeftGreaterThanOrEqualToLeftPadding">
            <expectedResult type="int">{{padding.paddingLeft}}</expectedResult>
            <actualResult type="variable">overlaySpaceLeft</actualResult>
        </assertGreaterThanOrEqual>
    </actionGroup>
    <!-- Overlay Position -->
    <actionGroup name="validateOverlayPositionTop">
        <arguments>
            <argument name="page"/>
            <argument name="index" defaultValue="1" type="string"/>
            <argument name="padding" defaultValue="PageBuilderPaddingProperty40"/>
        </arguments>
        <!-- Validate top edge of overlay with padding -->
        <comment userInput="Validate top edge of overlay with padding" stepKey="commentValidateTopEdgeOfOverlayWithPadding"/>
        <executeJS function="return {{page.wrapperJS(index)}}.getBoundingClientRect().top" stepKey="wrapperTopPosition"/>
        <executeJS function="return {{page.overlayJS(index)}}.getBoundingClientRect().top-{{padding.paddingTop}}" stepKey="overlayTopPositionWithPadding"/>
        <executeJS function="return Math.round(({$overlayTopPositionWithPadding}/{$wrapperTopPosition})*100)/100" stepKey="overlayTopRatio"/>
        <assertEquals stepKey="assertOverlayTopRatio">
            <expectedResult type="int">1</expectedResult>
            <actualResult type="variable">overlayTopRatio</actualResult>
        </assertEquals>
    </actionGroup>
    <actionGroup name="validateOverlayPositionBottom">
        <arguments>
            <argument name="page"/>
            <argument name="index" defaultValue="1" type="string"/>
            <argument name="padding" defaultValue="PageBuilderPaddingProperty40"/>
        </arguments>
        <!-- Validate bottom edge of overlay -->
        <comment userInput="Validate bottom edge of overlay" stepKey="commentValidateBottomEdgeOfOverlay"/>
        <executeJS function="return {{page.wrapperJS(index)}}.getBoundingClientRect().top+{{padding.paddingTop}}+120" stepKey="wrapperTopPaddingContent"/>
        <executeJS function="return {{page.overlayJS(index)}}.getBoundingClientRect().bottom" stepKey="overlayBottomPosition"/>
        <executeJS function="return Math.round(({$wrapperTopPaddingContent}/{$overlayBottomPosition})*100)/100" stepKey="overlayBottomRatio"/>
        <assertEquals stepKey="assertOverlayBottomRatio">
            <expectedResult type="int">1</expectedResult>
            <actualResult type="variable">overlayBottomRatio</actualResult>
        </assertEquals>
        <!-- Validate bottom edge of overlay is within parent -->
        <comment userInput="Validate bottom edge of overlay is within parent" stepKey="commentValidateBottomEdgeOfOverlayIsWithinParent"/>
        <executeJS function="return {{page.wrapperJS(index)}}.getBoundingClientRect().bottom-{{padding.paddingBottom}}" stepKey="wrapperBottomPositionNoPadding"/>
        <assertLessThanOrEqual stepKey="assertOverlayBottomIsWithinParent">
            <expectedResult type="variable">wrapperBottomPositionNoPadding</expectedResult>
            <actualResult type="variable">overlayBottomPosition</actualResult>
        </assertLessThanOrEqual>
    </actionGroup>
    <actionGroup name="validateOverlayAndButtonPoster">
        <arguments>
            <argument name="column"/>
            <argument name="element"/>
            <argument name="elementBorderWidth" defaultValue="PageBuilderAdvancedBorderWidthProperty0"/>
            <argument name="diffThreshold" defaultValue="0" type="string"/>
        </arguments>
        <executeJS function="return document.querySelector('{{column.columnX('1')}}').clientWidth" stepKey="columnWidth"/>
        <executeJS function="return parseInt({{element.elementJS('1')}}.getBoundingClientRect().width)" stepKey="elementWidth"/>
        <executeJS function="return parseInt({$columnWidth} - {{PageBuilderPaddingProperty10.paddingLeft}} - {{PageBuilderPaddingProperty10.paddingRight}})" stepKey="expectedElementWidth"/>
        <executeJS function="return Math.abs({$expectedElementWidth} - {$elementWidth})" stepKey="elementDiff"/>
        <!-- We will allow a 2px offset to account for rounding and any additional threshold that is passed in as an argument -->
        <executeJS function="return parseInt({{diffThreshold}} + 2)" stepKey="acceptableOffset"/>
        <assertLessThanOrEqual stepKey="assertElementWidthEqualsColumnWidthLessColumnPaddingAndColumnBorderWidth">
            <expectedResult type="variable">acceptableOffset</expectedResult>
            <actualResult type="variable">elementDiff</actualResult>
        </assertLessThanOrEqual>
        <executeJS function="return parseInt({{element.overlayJS('1')}}.getBoundingClientRect().width)" stepKey="overlayWidth"/>
        <executeJS function="return parseInt({$elementWidth} - {{PageBuilderPaddingPropertyDefault.paddingLeft}} - {{PageBuilderPaddingPropertyDefault.paddingRight}} - ({{elementBorderWidth.value}} * 2))" stepKey="expectedOverlayWidth"/>
        <executeJS function="return Math.abs({$expectedOverlayWidth} - {$overlayWidth})" stepKey="overlayDiff"/>
        <assertLessThanOrEqual stepKey="assertOverlayWidthEqualsElementWidthLessElementPaddingAndElementBorderWidth">
            <expectedResult type="variable">acceptableOffset</expectedResult>
            <actualResult type="variable">overlayDiff</actualResult>
        </assertLessThanOrEqual>
        <executeJS function="return parseInt({{element.contentJS('1')}}.getBoundingClientRect().width)" stepKey="contentWidth"/>
        <executeJS function="return parseInt({$overlayWidth} - {{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.paddingLeft}} - {{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.paddingRight}})" stepKey="expectedContentWidth"/>
        <executeJS function="return Math.abs({$expectedContentWidth} - {$contentWidth})" stepKey="contentDiff"/>
        <assertLessThanOrEqual stepKey="assertContentWidthEqualsOverlayWidthLessPadding">
            <expectedResult type="variable">acceptableOffset</expectedResult>
            <actualResult type="variable">contentDiff</actualResult>
        </assertLessThanOrEqual>
        <executeJS function="return parseInt({{element.buttonJS('1')}}.getBoundingClientRect().width)" stepKey="buttonWidth"/>
        <!-- wysiwyg content may shrink smaller, but buttons will never be smaller than 36px (17px padding + 1px border) -->
        <executeJS function="return Math.max(36, {$expectedContentWidth})" stepKey="expectedButtonWidth"/>
        <executeJS function="return Math.abs({$expectedButtonWidth} - {$buttonWidth})" stepKey="buttonDiff"/>
        <assertLessThanOrEqual stepKey="assertButtonWidthEqualsOverlayWidthLessPadding">
            <expectedResult type="variable">acceptableOffset</expectedResult>
            <actualResult type="variable">buttonDiff</actualResult>
        </assertLessThanOrEqual>
    </actionGroup>
    <actionGroup name="validateOverlayAndButtonCollage">
        <arguments>
            <argument name="column"/>
            <argument name="element"/>
            <argument name="elementBorderWidth" defaultValue="PageBuilderAdvancedBorderWidthProperty0"/>
            <argument name="diffThreshold" defaultValue="0" type="string"/>
        </arguments>
        <executeJS function="return document.querySelector('{{column.columnX('1')}}').clientWidth" stepKey="columnWidth"/>
        <executeJS function="return parseInt({{element.elementJS('1')}}.getBoundingClientRect().width)" stepKey="elementWidth"/>
        <executeJS function="return parseInt({$columnWidth} - {{PageBuilderPaddingProperty10.paddingLeft}} - {{PageBuilderPaddingProperty10.paddingRight}})" stepKey="expectedElementWidth"/>
        <executeJS function="return Math.abs({$expectedElementWidth} - {$elementWidth})" stepKey="elementDiff"/>
        <!-- We will allow a 2px offset to account for rounding and any additional threshold that is passed in as an argument -->
        <executeJS function="return parseInt({{diffThreshold}} + 2)" stepKey="acceptableOffset"/>
        <assertLessThanOrEqual stepKey="assertElementWidthEqualsColumnWidthLessColumnPaddingAndColumnBorderWidth">
            <expectedResult type="variable">acceptableOffset</expectedResult>
            <actualResult type="variable">elementDiff</actualResult>
        </assertLessThanOrEqual>
        <executeJS function="return parseInt({{element.overlayJS('1')}}.getBoundingClientRect().width)" stepKey="overlayWidth"/>
        <executeJS function="return parseInt({$elementWidth} - {{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.paddingLeft}} - {{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.paddingRight}} - ({{elementBorderWidth.value}} * 2))" stepKey="expectedOverlayWidth"/>
        <executeJS function="return Math.abs({$expectedOverlayWidth} - {$overlayWidth})" stepKey="overlayDiff"/>
        <assertLessThanOrEqual stepKey="assertOverlayWidthEqualsElementWidthLessElementPaddingAndElementBorderWidth">
            <expectedResult type="variable">acceptableOffset</expectedResult>
            <actualResult type="variable">overlayDiff</actualResult>
        </assertLessThanOrEqual>
        <executeJS function="return parseInt({{element.contentJS('1')}}.getBoundingClientRect().width)" stepKey="contentWidth"/>
        <executeJS function="return parseInt({$overlayWidth} - {{PageBuilderPaddingPropertyOverlayDefault.paddingLeft}} - {{PageBuilderPaddingPropertyOverlayDefault.paddingRight}})" stepKey="expectedContentWidth"/>
        <executeJS function="return Math.abs({$expectedContentWidth} - {$contentWidth})" stepKey="contentDiff"/>
        <assertLessThanOrEqual stepKey="assertContentWidthEqualsOverlayWidthLessPadding">
            <expectedResult type="variable">acceptableOffset</expectedResult>
            <actualResult type="variable">contentDiff</actualResult>
        </assertLessThanOrEqual>
        <executeJS function="return parseInt({{element.buttonJS('1')}}.getBoundingClientRect().width)" stepKey="buttonWidth"/>
        <!-- wysiwyg content may shrink smaller, but buttons will never be smaller than 36px (17px padding + 1px border) -->
        <executeJS function="return Math.max(36, {$expectedContentWidth})" stepKey="expectedButtonWidth"/>
        <executeJS function="return Math.abs({$expectedButtonWidth} - {$buttonWidth})" stepKey="buttonDiff"/>
        <assertLessThanOrEqual stepKey="assertButtonWidthEqualsOverlayWidthLessPadding">
            <expectedResult type="variable">acceptableOffset</expectedResult>
            <actualResult type="variable">buttonDiff</actualResult>
        </assertLessThanOrEqual>
    </actionGroup>
</actionGroups>
