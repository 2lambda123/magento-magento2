<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<actionGroups xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/actionGroupSchema.xsd">
    <actionGroup name="validateContentTypeHeightOnStage">
        <arguments>
            <argument name="contentType"/>
            <argument name="index" defaultValue="1" type="string"/>
            <argument name="containerDefaultHeight" defaultValue="1"/>
            <argument name="expectedPaddingTop" defaultValue="1"/>
            <argument name="expectedPaddingBottom" defaultValue="1"/>
        </arguments>
        <executeJS function="{{PageBuilderStage.computedHeightOnStage(contentType.role,index)}}" stepKey="actualStageContentTypeHeight"/>
        <executeJS function="return Math.round({{containerDefaultHeight.value}}+{{expectedPaddingTop.paddingTop}}+{{expectedPaddingBottom.paddingBottom}})" stepKey="expectedContentTypeHeightWithPadding"/>
        <assertEquals stepKey="assertHeightOnStageMatchesExpected">
            <expectedResult type="variable">actualStageContentTypeHeight</expectedResult>
            <actualResult type="variable">expectedContentTypeHeightWithPadding</actualResult>
        </assertEquals>
    </actionGroup>
    <actionGroup name="validateContentTypeHeightOnStageWithoutPadding">
        <arguments>
            <argument name="contentType"/>
            <argument name="index" defaultValue="1" type="string"/>
            <argument name="containerDefaultHeight" defaultValue="1"/>
        </arguments>
        <executeJS function="{{PageBuilderStage.computedHeightOnStage(contentType.role,index)}}" stepKey="actualStageContentTypeHeight"/>
        <executeJS function="return Math.round({{containerDefaultHeight.value}})" stepKey="expectedContentTypeHeightWithPadding"/>
        <assertEquals stepKey="assertHeightOnStageMatchesExpected">
            <expectedResult type="variable">actualStageContentTypeHeight</expectedResult>
            <actualResult type="variable">expectedContentTypeHeightWithPadding</actualResult>
        </assertEquals>
    </actionGroup>
    <actionGroup name="validateContentTypeInsideContainerStage">
        <arguments>
            <argument name="contentType"/>
            <argument name="contentTypeIndex" defaultValue="1" type="string"/>
            <argument name="containerTargetType"/>
            <argument name="containerTargetIndex" defaultValue="1" type="string"/>
            <argument name="positionInContainer" defaultValue="1" type="string"/>
        </arguments>
        <waitForElementVisible time="30" selector="{{PageBuilderStage.contentTypeInsideContainerStage(containerTargetType.role, containerTargetIndex, positionInContainer, contentType.role, contentTypeIndex)}}" stepKey="waitForContentTypeStage"/>
    </actionGroup>
    <actionGroup name="validateContentTypeNotInsideContainerStage">
        <arguments>
            <argument name="contentType"/>
            <argument name="contentTypeIndex" defaultValue="1" type="string"/>
            <argument name="containerTargetType"/>
            <argument name="containerTargetIndex" defaultValue="1" type="string"/>
            <argument name="positionInContainer" defaultValue="1" type="string"/>
        </arguments>
        <waitForElementVisible time="30" selector="{{PageBuilderStage.contentTypeInStageByIndex(containerTargetType.role, containerTargetIndex)}}" stepKey="waitForContentTypeStage"/>
        <dontSeeElementInDOM selector="{{PageBuilderStage.contentTypeInsideContainerStage(containerTargetType.role, containerTargetIndex, positionInContainer, contentType.role, contentTypeIndex)}}" stepKey="dontSeeContentTypeInContainer"/>
    </actionGroup>
    <actionGroup name="goToMediaStorageFromStage">
        <arguments>
            <argument name="contentType"/>
            <argument name="section"/>
            <argument name="offsetXCoordinate" defaultValue="null" type="string"/>
            <argument name="offsetYCoordinate" defaultValue="null" type="string"/>
        </arguments>
        <comment userInput="Hover over content type in stage and click Select From Gallery button" stepKey="commentHover"/>
        <moveMouseOver selector="{{PageBuilderStage.contentTypeInStage(contentType.role)}}" x="{{offsetXCoordinate}}" y="{{offsetYCoordinate}}" stepKey="onMouseOverImageContentTypeStage"/>
        <waitForElementVisible selector="{{section.selectFromGalleryImageBtn}}" stepKey="seeSelectFromGalleryBtn2" />
        <click selector="{{section.selectFromGalleryImageBtn}}" stepKey="clickSelectFromGalleryBtn1" />
        <waitForPageLoad stepKey="waitForPageLoad"/>
    </actionGroup>
    <actionGroup name="uploadImageToContentTypeFromStage">
        <arguments>
            <argument name="property"/>
        </arguments>
        <attachFile userInput="{{property.value}}" selector="{{PageBuilderStage.uploadLocalImageBtn}}" stepKey="attachImageFromLocalToStage"/>
        <waitForLoadingMaskToDisappear stepKey="waitForLoadingMaskToDisappear"/>
        <waitForElementVisible selector="{{PageBuilderStage.imageSource(property.fileName)}}" stepKey="waitForMainImageSource1"/>
    </actionGroup>
    <actionGroup name="inlineEditWYSIWYGFromStage">
        <arguments>
            <argument name="contentType"/>
            <argument name="content" type="string"/>
            <argument name="index" defaultValue="1" type="string"/>
        </arguments>
        <click selector="{{PageBuilderStage.inlineWYSIWYGEditor(contentType.role, index)}}" stepKey="focusOnEditorArea"/>
        <waitForElementVisible selector="{{PageBuilderStage.inlineWYSIWYGEditorPanel(contentType.role, index)}}" stepKey="waitForEditorPanel"/>
        <fillField selector="{{PageBuilderStage.inlineWYSIWYGEditor(contentType.role, index)}}" userInput="{{content}}" stepKey="enterContentIntoEditor"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="loseFocusFromEditor"/>
    </actionGroup>
</actionGroups>
