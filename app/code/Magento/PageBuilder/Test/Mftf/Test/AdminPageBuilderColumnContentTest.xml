<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="../../../../../../../dev/tests/acceptance/vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/Test/etc/testSchema.xsd">
    <test name="TabsAddToColumnAndHeightAdjusts">
        <annotations>
            <features value="Pagebuilder"/>
            <stories value="Column"/>
            <title value="Add Tabs into Column and Column Height Adjusts"/>
            <description value="User sees columns adjusting their height to the Tabs height that was dropped to them"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-86953"/>
            <testCaseId value="MAGETWO-90670"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-column"/>
            <group value="pagebuilder-tabs"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragColumnIntoStage">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <comment userInput="Drag Tabs to Column" stepKey="commentDragTabsToColumn"/>
        <click selector="{{PageBuilderPanel.interactiveGroup}}" stepKey="clickInteractiveGroup"/>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragTabsIntoFirstColumn">
            <argument name="contentType" value="PageBuilderTabsContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="1"/>
        </actionGroup>
        <comment userInput="Validate Column Height adjusts to Tabs Height" stepKey="commentValidateColumnHeightWithTabs"/>
        <executeJS function="{{PageBuilderStage.computedHeightOnStage(PageBuilderTabsContentType.role,'1')}}" stepKey="actualStageTabsHeight"/>
        <executeJS function="{{PageBuilderStage.computedHeightOnStage(PageBuilderColumnContentType.role,'1')}}" stepKey="actualStageColumnHeightWithTabs"/>
        <executeJS function="return Math.round({$actualStageTabsHeight}+{{PageBuilderPaddingProperty10.paddingTop}}+{{PageBuilderPaddingProperty10.paddingBottom}})" stepKey="expectedColumnHeightWithTabsAndPadding"/>
        <assertEquals stepKey="assertColumnHeightAdjustsToTabsHeight">
            <expectedResult type="variable">expectedColumnHeightWithTabsAndPadding</expectedResult>
            <actualResult type="variable">actualStageColumnHeightWithTabs</actualResult>
        </assertEquals>
        <comment userInput="Validate Row Height adjusts to Tabs inside Column" stepKey="commentValidateRowHeightWithColumnAndTabs"/>
        <executeJS function="{{PageBuilderStage.computedHeightOnStage(PageBuilderRowContentType.role,'1')}}" stepKey="actualStageRowHeightWithColumnsAndTabs"/>
        <executeJS function="return Math.round({$actualStageColumnHeightWithTabs}+{{PageBuilderPaddingProperty10.paddingTop}}+{{PageBuilderPaddingProperty10.paddingBottom}})" stepKey="expectedRowHeightWithColumnTabsAndPadding"/>
        <assertGreaterThanOrEqual stepKey="assertRowHeightAdjustsToTabsHeight">
            <expectedResult type="variable">expectedRowHeightWithColumnTabsAndPadding</expectedResult>
            <actualResult type="variable">actualStageRowHeightWithColumnsAndTabs</actualResult>
        </assertGreaterThanOrEqual>
    </test>
    <test name="TabsAddToColumnWithSetLargeMinimumHeightAndHeightDoesNotAdjust">
        <annotations>
            <features value="Pagebuilder"/>
            <stories value="Column"/>
            <title value="Add Tabs into Column that has large minimum height and Column Height does not shrink"/>
            <description value="User sees columns adjusting their height to the Tabs height that was dropped to them unless column minimum height is larger"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-86953"/>
            <testCaseId value="MAGETWO-92063"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-column"/>
            <group value="pagebuilder-tabs"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragColumnIntoStage">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <comment userInput="Enter column min height 500 px" stepKey="commentEnterColumnMinHeight"/>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditPanel">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterMinHeightProperty">
            <argument name="property" value="PageBuilderAppearanceMinHeightProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <comment userInput="Validate Column Height On Stage With Custom Min Height Matches Expected" stepKey="commentValidateColumnHeight"/>
        <actionGroup ref="validateContentTypeHeightOnStage" stepKey="assertInitialColumnHeightMatchesExpected">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
            <argument name="index" value="1"/>
            <argument name="containerDefaultHeight" value="PageBuilderAppearanceMinHeightProperty"/>
            <argument name="expectedPaddingTop" value="PageBuilderPaddingProperty10"/>
            <argument name="expectedPaddingBottom" value="PageBuilderPaddingProperty10"/>
        </actionGroup>
        <executeJS function="{{PageBuilderStage.computedHeightOnStage(PageBuilderColumnContentType.role,'1')}}" stepKey="actualStageInitialColumnHeight"/>
        <comment userInput="Validate Row Height adjusts to Column Height" stepKey="commentValidateRowHeightAdjustToColumn"/>
        <executeJS function="{{PageBuilderStage.computedHeightOnStage(PageBuilderRowContentType.role,'1')}}" stepKey="actualStageRowHeightWithColumns"/>
        <executeJS function="return Math.round({$actualStageInitialColumnHeight}+{{PageBuilderPaddingProperty10.paddingTop}}+{{PageBuilderPaddingProperty10.paddingBottom}})" stepKey="expectedRowHeightWithPaddingAndColumns"/>
        <assertGreaterThanOrEqual stepKey="assertRowHeightAdjustsToColumnHeight">
            <expectedResult type="variable">expectedRowHeightWithPaddingAndColumns</expectedResult>
            <actualResult type="variable">actualStageRowHeightWithColumns</actualResult>
        </assertGreaterThanOrEqual>
        <comment userInput="Drag Tabs to Column" stepKey="commentDragTabsToColumn"/>
        <click selector="{{PageBuilderPanel.interactiveGroup}}" stepKey="clickInteractiveGroup"/>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragTabsIntoFirstColumn">
            <argument name="contentType" value="PageBuilderTabsContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="1"/>
        </actionGroup>
        <comment userInput="Validate Column Height does not shrink to Tabs Height" stepKey="commentValidateColumnHeightWithTabs"/>
        <executeJS function="{{PageBuilderStage.computedHeightOnStage(PageBuilderColumnContentType.role,'1')}}" stepKey="actualStageColumnHeightWithTabs"/>
        <assertEquals stepKey="assertColumnHeightDoesNotAdjustToTabsHeight">
            <expectedResult type="variable">actualStageInitialColumnHeight</expectedResult>
            <actualResult type="variable">actualStageColumnHeightWithTabs</actualResult>
        </assertEquals>
        <comment userInput="Validate Row Height does not shrink to Tabs height" stepKey="commentValidateRowHeightWithColumnAndTabs"/>
        <executeJS function="{{PageBuilderStage.computedHeightOnStage(PageBuilderRowContentType.role,'1')}}" stepKey="actualStageRowHeightWithColumnsAndTabs"/>
        <executeJS function="return Math.round({$actualStageInitialColumnHeight}+{{PageBuilderPaddingProperty10.paddingTop}}+{{PageBuilderPaddingProperty10.paddingBottom}})" stepKey="expectedRowHeightWithColumnTabsAndPadding"/>
        <assertGreaterThanOrEqual stepKey="assertRowHeightAdjustsToTabsHeight">
            <expectedResult type="variable">expectedRowHeightWithColumnTabsAndPadding</expectedResult>
            <actualResult type="variable">actualStageRowHeightWithColumnsAndTabs</actualResult>
        </assertGreaterThanOrEqual>
    </test>
    <test name="TabsAddToColumnWithSetSmallMinimumHeightAndHeightAdjusts">
        <annotations>
            <features value="Pagebuilder"/>
            <stories value="Column"/>
            <title value="Add Tabs into Column that has small minimum height and Column Height adjusts"/>
            <description value="User sees columns adjusting their height to the Tabs height that was dropped to them if column minimum height is smaller"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-86953"/>
            <testCaseId value="MAGETWO-92254"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-column"/>
            <group value="pagebuilder-tabs"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragColumnIntoStage">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <comment userInput="Enter column min height 200 px" stepKey="commentEnterColumnMinHeight"/>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditPanel">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterMinHeightProperty">
            <argument name="property" value="PageBuilderAppearanceMinHeightProperty_200"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <comment userInput="Validate Column Height On Stage With Custom Min Height Matches Expected" stepKey="commentValidateColumnHeight"/>
        <executeJS function="{{PageBuilderStage.computedHeightOnStage(PageBuilderColumnContentType.role,'1')}}" stepKey="actualStageContentTypeHeight"/>
        <executeJS function="return Math.round({{PageBuilderAppearanceMinHeightProperty_200.value}} + {{PageBuilderPaddingProperty10.paddingTop}} + {{PageBuilderPaddingProperty10.paddingBottom}})" stepKey="expectedColumnHeight"/>
        <assertEquals stepKey="assertHeightOnStageMatchesExpected">
            <expectedResult type="variable">actualStageContentTypeHeight</expectedResult>
            <actualResult type="variable">expectedColumnHeight</actualResult>
        </assertEquals>
        <executeJS function="{{PageBuilderStage.computedHeightOnStage(PageBuilderColumnContentType.role,'1')}}" stepKey="actualStageInitialColumnHeight"/>
        <comment userInput="Validate Row Height adjusts to Column Height" stepKey="commentValidateRowHeightAdjustToColumn"/>
        <executeJS function="{{PageBuilderStage.computedHeightOnStage(PageBuilderRowContentType.role,'1')}}" stepKey="actualStageRowHeightWithColumns"/>
        <executeJS function="return Math.round({$actualStageInitialColumnHeight}+{{PageBuilderPaddingProperty10.paddingTop}}+{{PageBuilderPaddingProperty10.paddingBottom}})" stepKey="expectedRowHeightWithPaddingAndColumns"/>
        <assertGreaterThanOrEqual stepKey="assertRowHeightAdjustsToColumnHeight">
            <expectedResult type="variable">expectedRowHeightWithPaddingAndColumns</expectedResult>
            <actualResult type="variable">actualStageRowHeightWithColumns</actualResult>
        </assertGreaterThanOrEqual>
        <comment userInput="Drag Tabs to Column" stepKey="commentDragTabsToColumn"/>
        <click selector="{{PageBuilderPanel.interactiveGroup}}" stepKey="clickInteractiveGroup"/>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragTabsIntoFirstColumn">
            <argument name="contentType" value="PageBuilderTabsContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="1"/>
        </actionGroup>
        <comment userInput="Validate Column Height adjusts to Tabs Height" stepKey="commentValidateColumnHeightWithTabs"/>
        <executeJS function="{{PageBuilderStage.computedHeightOnStage(PageBuilderTabsContentType.role,'1')}}" stepKey="actualStageTabsHeight"/>
        <executeJS function="{{PageBuilderStage.computedHeightOnStage(PageBuilderColumnContentType.role,'1')}}" stepKey="actualStageColumnHeightWithTabs"/>
        <executeJS function="return Math.round({$actualStageTabsHeight}+{{PageBuilderPaddingProperty10.paddingTop}}+{{PageBuilderPaddingProperty10.paddingBottom}})" stepKey="expectedColumnHeightWithTabsAndPadding"/>
        <assertGreaterThanOrEqual stepKey="assertColumnHeightAdjustsToTabsHeight">
            <expectedResult type="variable">expectedColumnHeightWithTabsAndPadding</expectedResult>
            <actualResult type="variable">actualStageColumnHeightWithTabs</actualResult>
        </assertGreaterThanOrEqual>
        <comment userInput="Validate Row Height adjusts to Tabs inside Column" stepKey="commentValidateRowHeightWithColumnAndTabs"/>
        <executeJS function="{{PageBuilderStage.computedHeightOnStage(PageBuilderRowContentType.role,'1')}}" stepKey="actualStageRowHeightWithColumnsAndTabs"/>
        <executeJS function="return Math.round({$actualStageColumnHeightWithTabs}+{{PageBuilderPaddingProperty10.paddingTop}}+{{PageBuilderPaddingProperty10.paddingBottom}})" stepKey="expectedRowHeightWithColumnTabsAndPadding"/>
        <assertGreaterThanOrEqual stepKey="assertRowHeightAdjustsToTabsHeight">
            <expectedResult type="variable">expectedRowHeightWithColumnTabsAndPadding</expectedResult>
            <actualResult type="variable">actualStageRowHeightWithColumnsAndTabs</actualResult>
        </assertGreaterThanOrEqual>
    </test>
    <test name="MapAddToColumn">
        <annotations>
            <features value="Pagebuilder"/>
            <stories value="Column"/>
            <useCaseId value="MAGETWO-88269"/>
            <title value="Add Map to Column container and view on Admin and Storefront"/>
            <description value="As a Content Manager I want column to be a container so that I can add Map inside"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-86953"/>
            <testCaseId value="MAGETWO-89961"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-column"/>
            <group value="pagebuilder-map"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderMapContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragColumnIntoStage">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <!-- Add Tabs to Stage -->
        <click selector="{{PageBuilderPanel.interactiveGroup}}" stepKey="clickInteractiveGroup"/>
        <actionGroup ref="dragContentTypeToContainerAndExpectEditPanel" stepKey="dragMapOntoColumnAndExpectEditPanel">
            <argument name="contentType" value="PageBuilderMapContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="2" />
        </actionGroup>
        <!-- Update Edit Panel -->
        <comment userInput="Update Edit Panel" stepKey="commentEdit"/>
        <actionGroup ref="clickAddLocationButton" stepKey="clickAddLocationButton"/>
        <actionGroup ref="clickMapToAddOrMovePin" stepKey="addMapPin"/>
        <!-- Add Fill Required Fields -->
        <comment userInput="Add Fill Required Fields" stepKey="commentAddFillRequiredFields"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterLocationName">
            <argument name="property" value="PageBuilderMapLocationName_TestLocation"/>
        </actionGroup>
        <actionGroup ref="saveLocationForm" stepKey="saveLocationForm"/>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate Stage -->
        <comment userInput="User sees map displayed in column on Stage" stepKey="confirmMapOnStage"/>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="checkContentTypeInContainerStage">
            <argument name="contentType" value="PageBuilderMapContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateMapSettings" stepKey="validateMapStage">
            <argument name="page" value="MapOnStage"/>
            <argument name="height" value="PageBuilderMapHeightDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <comment userInput="View Map inside column on storefront" stepKey="viewMapOnStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderMapContentType"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeInsideContainerStorefront" stepKey="checkContentTypeInContainerStorefront">
            <argument name="contentType" value="PageBuilderMapContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateMapSettings" stepKey="validateMapStoreFront">
            <argument name="page" value="MapOnStorefront"/>
            <argument name="height" value="PageBuilderMapHeightDefaultProperty"/>
        </actionGroup>
    </test>
    <test name="ColumnsMoveContentBetweenColumns">
        <annotations>
            <features value="Pagebuilder"/>
            <stories value="Column"/>
            <title value="Move Heading between columns"/>
            <description value="As a Content Manager I want to be able to move content between column containers"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-88269"/>
            <testCaseId value="MAGETWO-92361"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-column"/>
            <group value="pagebuilder-heading"/>
            <group value="pagebuilder-row"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragColumnIntoStage">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragHeadingIntoColumn">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="1"/>
        </actionGroup>
        <comment userInput="Validate heading is in first column" stepKey="commentConfirmHeadingInFirstColumn"/>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="confirmHeadingInFirstColumn">
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="1"/>
            <argument name="positionInContainer" value="1"/>
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="clickOutsideLiveEditHeading" stepKey="clickOutsideLiveEditHeading">
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="moveContentTypeToContainer" stepKey="moveHeadingToRightColumn">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <seeNumberOfElements selector="{{PageBuilderStage.contentTypeInStage(PageBuilderHeadingContentType.role)}}" userInput="1" stepKey="validateOnlySingleHeading" />
        <comment userInput="Validate heading has moved to second column" stepKey="commentConfirmHeadingInSecondColumn"/>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="confirmHeadingInSecondColumn">
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="2"/>
            <argument name="positionInContainer" value="1"/>
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <comment userInput="Add additional row and column group" stepKey="commentAddNewRowAndColumn"/>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragRowIntoStage">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragColumnIntoNewRow">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetType" value="PageBuilderRowContentType"/>
            <argument name="containerTargetIndex" value="1"/>
        </actionGroup>
        <!-- As we add 2 new columns the heading is now in the 4th column -->
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="confirmHeadingInFourthColumn">
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="4"/>
            <argument name="positionInContainer" value="1"/>
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <comment userInput="Move heading from secondary group to first" stepKey="commentMoveColumnToFirstGroup"/>
        <actionGroup ref="moveContentTypeToContainer" stepKey="moveHeadingToFirstColumn">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="1"/>
        </actionGroup>
        <seeNumberOfElements selector="{{PageBuilderStage.contentTypeInStage(PageBuilderHeadingContentType.role)}}" userInput="1" stepKey="validateOnlySingleHeadingAfterMove" />
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="confirmHeadingInNewFirstColumn">
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="1"/>
            <argument name="positionInContainer" value="1"/>
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
    </test>
    <test name="ColumnDragColumnWithContentBetweenColumnGroups">
        <annotations>
            <features value="Pagebuilder"/>
            <stories value="Column"/>
            <title value="Drag Column containing Heading from one column group to another in the same row"/>
            <description value="Move column containing content blocks between column groups"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-87113"/>
            <useCaseId value="MAGETWO-86953"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-column"/>
            <group value="pagebuilder-heading"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragFirstColumnIntoStage">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <comment userInput="Drag Column beneath existing columns to make a new column group" stepKey="commentDragColumnBelowColumns"/>
        <actionGroup ref="dragContentTypeToDropZone" stepKey="dragColumnIntoStage">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="4"/>
            <argument name="containerTargetType" value="PageBuilderRowContentType"/>
            <argument name="containerTargetIndex" value="1"/>
            <argument name="dropZoneIndex" value="2"/>
        </actionGroup>
        <seeNumberOfElements selector="{{PageBuilderColumnSection.columnGroupColumns('1')}}" userInput="2" stepKey="seeTwoColumnsFirstGroup"/>
        <seeNumberOfElements selector="{{PageBuilderColumnSection.columnGroupColumns('2')}}" userInput="2" stepKey="seeTwoColumnsSecondGroup"/>
        <seeNumberOfElements selector="{{PageBuilderColumnSection.allColumns}}" userInput="4" stepKey="validateColumnGroupAdded"/>
        <comment userInput="Drag new column onto first group" stepKey="commentDragColumnToFirstColumnGroup"/>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragColumnIntoFirstColumnGroup">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="3"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <seeNumberOfElements selector="{{PageBuilderColumnSection.columnGroupColumns('1')}}" userInput="3" stepKey="seeThreeColumnsFirstGroup"/>
        <seeNumberOfElements selector="{{PageBuilderColumnSection.allColumns}}" userInput="5" stepKey="validateFiveTotalColumns"/>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragHeadingIntoColumn">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="3"/>
        </actionGroup>
        <comment userInput="Validate heading is in third column" stepKey="commentConfirmHeadingInThirdColumn"/>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="confirmHeadingInThirdColumn">
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="3"/>
            <argument name="positionInContainer" value="1"/>
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="clickOutsideLiveEditHeading" stepKey="clickOutsideLiveEditHeading">
            <argument name="index" value="1"/>
        </actionGroup>
        <comment userInput="Move column containing heading from first to second column group" stepKey="commentMoveColumnToSecondGroup"/>
        <actionGroup ref="dragColumnToAnotherColumnGroup" stepKey="moveColumnToSecondGroup">
            <argument name="contentTypeIndex" value="3"/>
            <argument name="containerTargetIndex" value="5"/>
        </actionGroup>
        <seeNumberOfElements selector="{{PageBuilderColumnSection.allColumns}}" userInput="5" stepKey="validateSameNumberOfColumns"/>
        <seeNumberOfElements selector="{{PageBuilderColumnSection.columnGroupColumns('1')}}" userInput="2" stepKey="seeTwoColumnsFirstGroupAgain"/>
        <seeNumberOfElements selector="{{PageBuilderColumnSection.columnGroupColumns('2')}}" userInput="3" stepKey="seeThreeColumnsSecondGroup"/>
        <seeNumberOfElements selector="{{PageBuilderStage.contentTypeInStage(PageBuilderHeadingContentType.role)}}" userInput="1" stepKey="validateOnlySingleHeadingAfterMove" />
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="confirmHeadingInMovedColumn">
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="4"/>
            <argument name="positionInContainer" value="1"/>
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
    </test>
    <test name="MoveContentIntoEmptyTallColumnGroup">
        <annotations>
            <features value="Pagebuilder"/>
            <stories value="Column"/>
            <title value="Drag content from a tall column into adjacent empty column"/>
            <description value="Move content from a tall column within a group into an empty column alongside"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-92572"/>
            <useCaseId value="MAGETWO-86953"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-column"/>
            <group value="pagebuilder-heading"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragFirstColumnIntoStage">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragHeadingIntoColumn">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="clickOutsideLiveEditHeading" stepKey="clickOutsideLiveEditHeading">
            <argument name="index" value="1"/>
        </actionGroup>
        <comment userInput="Create 10 headings to increase height of column group" stepKey="commentDuplicateHeading"/>
        <actionGroup ref="duplicateContentType" stepKey="duplicateFirstHeading">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="duplicateContentType" stepKey="duplicateSecondHeading">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="duplicateContentType" stepKey="duplicateThirdHeading">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="duplicateContentType" stepKey="duplicateFourthHeading">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="duplicateContentType" stepKey="duplicateFifthHeading">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="duplicateContentType" stepKey="duplicateSixthHeading">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="duplicateContentType" stepKey="duplicateSeventhHeading">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="duplicateContentType" stepKey="duplicateEighthHeading">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="duplicateContentType" stepKey="duplicateNinthHeading">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="duplicateContentType" stepKey="duplicateTenthHeading">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <comment userInput="Attempt to move heading into half way down other group" stepKey="commentMoveHeading"/>
        <actionGroup ref="moveContentTypeToContainer" stepKey="moveHeadingIntoExistingColumn">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="contentTypeIndex" value="5"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="1"/>
            <argument name="containerOffsetXCoordinate" value="10"/>
            <argument name="containerOffsetYCoordinate" value="600"/>
        </actionGroup>
        <comment userInput="Validate heading was moved successfully" stepKey="commentValidateHeadingMove"/>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="confirmHeadingInMovedColumn">
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="1"/>
            <argument name="positionInContainer" value="1"/>
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
    </test>
</tests>
