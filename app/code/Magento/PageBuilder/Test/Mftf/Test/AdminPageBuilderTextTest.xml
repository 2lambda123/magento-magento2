<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="../../../../../../../dev/tests/acceptance/vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/Test/etc/testSchema.xsd">
    <test name="AddWYSIWYGContentTypeToTabOnStage">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Text"/>
            <title value="Add WYSIWYG Text Content Type to Tabs on stage"/>
            <description value="Verify that user are able to interact with WYSIWYG Text Content Type to Column on stage"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-1416"/>
            <testCaseId value="MC-3470"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-text"/>
            <group value="pagebuilder-tabs-content"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="SwitchToVersion4ActionGroup" stepKey="switchToTinyMCE4" />
            <createData entity="_defaultCmsPage" stepKey="createCMSPage" />
            <createData entity="_defaultCmsPage" stepKey="createCMSPageB" />
        </before>
        <after>
            <actionGroup ref="navigateToMediaGallery" stepKey="navigateToMediaGallery"/>
            <click selector="{{MediaGallerySection.WysiwygArrow}}" stepKey="openWYSIWYGFolder"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="NavigateToFolder">
                <argument name="FolderName" value="{{ImageFolder.name}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage">
                <argument name="Image" value="ImageUpload3"/>
            </actionGroup>
            <deleteData createDataKey="createCMSPage" stepKey="deletePreReqCMSPage" />
            <deleteData createDataKey="createCMSPageB" stepKey="deletePreReqCMSPageB" />
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage1">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <!-- Add Tabs to Stage -->
        <comment userInput="Add Tabs to Stage" stepKey="addTabsToStage"/>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderTabsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragTabsIntoStage">
            <argument name="contentType" value="PageBuilderTabsContentType"/>
        </actionGroup>
        <!-- Add Text to Tab -->
        <comment userInput="Add Text to Tab" stepKey="commentAddTextToTab" />
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroupText">
            <argument name="group" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragTextOntoTab">
            <argument name="contentType" value="PageBuilderTextContentType"/>
            <argument name="containerTargetType" value="PageBuilderTabContentType"/>
            <argument name="containerTargetIndex" value="1" />
        </actionGroup>
        <!--Input text into stage-->
        <comment userInput="Input text into stage" stepKey="commentInputTextIntoStage"/>
        <click selector="{{TextOnStage.tinymce('1')}}" stepKey="focusOnEditorArea"/>
        <fillField selector="{{TextOnStage.tinymce('1')}}" userInput="{{PageBuilderTextContentTypeDefault.value}}" stepKey="fillTextToTinyMCE4"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="lostFocusFromWYSIWYG1"/>
        <!--Verify inputed text on slideout-->
        <comment userInput="Verify inputed text on slideout" stepKey="commentVerifyTextOnSlideout"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage1">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <switchToIFrame selector="{{TextOnConfiguration.tinyMCEIFrame}}" stepKey="switchToIFrame1"/>
        <waitForElementVisible selector="{{TextOnConfiguration.textInIFrame(PageBuilderTextContentTypeDefault.value)}}" stepKey="waitForText"/>
        <switchToIFrame stepKey="exitIFrame1"/>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings1"/>
        <!--Input variable into stage-->
        <comment userInput="Input variable into stage" stepKey="commentInputVariableIntoStage"/>
        <click selector="{{TextOnStage.tinymce('1')}}" stepKey="focusOnEditorArea1"/>
        <actionGroup ref="addVariableToTinyMCE" stepKey="addVariableToTinyMCE">
            <argument name="variable" value="TinyMCEVariableBaseURL"/>
        </actionGroup>
        <waitForElementVisible selector="{{TextOnStage.text('1', TinyMCEVariableBaseURL.editPanelValue)}}" stepKey="waitForVariableBaseURLStage"/>
        <!--Verify inputed variable on slideout-->
        <comment userInput="Verify inputed variable on slideout" stepKey="commentVerifyVariableOnSlideout"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="lostFocusFromWYSIWYG2"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <switchToIFrame selector="{{TextOnConfiguration.tinyMCEIFrame}}" stepKey="switchToIFrame2"/>
        <waitForElementVisible selector="{{TextOnConfiguration.tinyMCEVariable(TinyMCEVariableBaseURL.editPanelValue, '1')}}" stepKey="waitForVariable2"/>
        <switchToIFrame stepKey="exitIFrame2"/>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings2"/>
        <!--Input widget into stage-->
        <comment userInput="Input widget into stage" stepKey="commentInputWidgetIntoStage"/>
        <click selector="{{TextOnStage.tinymce('1')}}" stepKey="focusOnEditorArea2"/>
        <actionGroup ref="addPageLinkWidgetToTinyMCE" stepKey="addPageLinkWidgetToTinyMCE">
            <argument name="widget" value="TinyMCEWidgetCMSPageLink"/>
            <argument name="page" value="$$createCMSPageB.identifier$$"/>
        </actionGroup>
        <waitForElementVisible selector="{{TextOnStage.text('1', TinyMCEWidgetCMSPageLink.editPanelValue)}}" stepKey="waitForWidgetStage"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="lostFocusFromWYSIWYG3"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <switchToIFrame selector="{{TextOnConfiguration.tinyMCEIFrame}}" stepKey="switchToIFrame3"/>
        <waitForElementVisible selector="{{TextOnConfiguration.tinyMCEWidget(TinyMCEWidgetCMSPageLink.editPanelValue, '1')}}" stepKey="waitForWidget"/>
        <switchToIFrame stepKey="exitIFrame3"/>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <!--Input image into stage-->
        <comment userInput="Input image into stage" stepKey="commentInputImageIntoStage"/>
        <click selector="{{TextOnStage.tinymce('1')}}" stepKey="focusOnTextEditorArea"/>
        <click selector="{{TinyMCESection.InsertImageIcon}}" stepKey="clickInsertImageIcon" />
        <waitForPageLoad stepKey="waitForPageLoad" />
        <actionGroup ref="clickBrowseBtnOnUploadPopup" stepKey="clickBrowserBtn"/>
        <actionGroup ref="VerifyMediaGalleryStorageActions" stepKey="VerifyMediaGalleryStorageBtn"/>
        <actionGroup ref="CreateImageFolder" stepKey="CreateImageFolder">
            <argument name="ImageFolder" value="ImageFolder"/>
        </actionGroup>
        <actionGroup ref="attachImage" stepKey="attachImage1">
            <argument name="Image" value="ImageUpload3"/>
        </actionGroup>
        <actionGroup ref="saveImage" stepKey="insertImage"/>
        <actionGroup ref="fillOutUploadImagePopup" stepKey="fillOutUploadImagePopup" />
        <seeElement selector="{{CmsWYSIWYGSection.imageSource(ImageUpload3.fileName)}}" stepKey="assertMediaSourceOnStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Verify Text in Tab on storefront -->
        <comment userInput="View Tab on storefront" stepKey="viewTabOnStorefront"/>
        <amOnPage url="$$createCMSPage.identifier$$" stepKey="amOnPageTestPage"/>
        <see userInput="{{PageBuilderTextContentTypeDefault.value}}" stepKey="seeTextContentType"/>
        <seeElement selector="{{StorefrontCMSPageSection.imageSource(ImageUpload3.fileName)}}" stepKey="assertMediaSource"/>
        <seeElement selector="{{TextOnStorefront.text('1', '{{_ENV.MAGENTO_BASE_URL}}')}}" stepKey="waitForVariableStorefront"/>
        <seeElement selector="{{TextOnStorefront.textAreaWidget('1', '{{_ENV.MAGENTO_BASE_URL}}', $$createCMSPageB.identifier$$)}}" stepKey="waitForWidgetStorefront"/>
    </test>
    <test name="TextSaveEmptyTextContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Text"/>
            <title value="Verify Text placeholder and save empty Text Content Type"/>
            <description value="Verify placeholder and empty text content type, make sure there is no content display on storefront when saving an empty Text Content Type"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-1416"/>
            <testCaseId value="MC-3464"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <createData entity="_defaultCmsPage" stepKey="createCMSPage" />
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="SwitchToVersion4ActionGroup" stepKey="switchToTinyMCE4"/>
        </before>
        <after>
            <deleteData createDataKey="createCMSPage" stepKey="deletePreReqCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage1">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup1">
            <argument name="group" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragButtonsOntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <!--Assert Text placeholder-->
        <comment userInput="Assert Text placeholder" stepKey="assertTextPlaceholder"/>
        <seeElement selector="{{TextOnStage.placeholder('1')}}" stepKey="seeTextPlaceholder"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage2"/>
        <!--Verify empty content type on storefront-->
        <comment userInput="Verify empty content type on storefront" stepKey="commentVerifyEmptyBlock"/>
        <amOnPage url="$$createCMSPage.identifier$$" stepKey="amOnPageTestPage"/>
        <seeElementInDOM selector="{{TextOnStorefront.empty('1')}}" stepKey="seeEmptyTextContentType"/>
        <dontSeeElement selector="{{TextOnStorefront.empty('1')}}" stepKey="dontSeeEmptyTextContentTypeOnStorefront"/>
    </test>
    <test name="TextInlineTextEditing">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Text"/>
            <title value="Edit text inline in WYSIWYG and see on storefront"/>
            <description value="Verify that user are able to add text into Text Content Type and see it on storefront"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-1416"/>
            <testCaseId value="MC-3465"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <createData entity="_defaultCmsPage" stepKey="createCMSPage" />
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="SwitchToVersion4ActionGroup" stepKey="switchToTinyMCE4" />
        </before>
        <after>
            <deleteData createDataKey="createCMSPage" stepKey="deletePreReqCMSPage" />
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage1">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup1">
            <argument name="group" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragTextOntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <!--Input text into stage-->
        <comment userInput="Input text into stage" stepKey="commentInputTextIntoStage"/>
        <click selector="{{TextOnStage.tinymce('1')}}" stepKey="focusOnEditorArea"/>
        <fillField selector="{{TextOnStage.tinymce('1')}}" userInput="{{PageBuilderTextContentTypeDefault.value}}" stepKey="fillTextToTinyMCE4"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="lostFocusFromWYSIWYG1"/>
        <!--Verify inputed text on slideout-->
        <comment userInput="Verify inputed text on slideout" stepKey="commentVerifyTextOnSlideout"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <switchToIFrame selector="{{TextOnConfiguration.tinyMCEIFrame}}" stepKey="switchToIFrame1"/>
        <waitForElementVisible selector="{{TextOnConfiguration.textInIFrame(PageBuilderTextContentTypeDefault.value)}}" stepKey="waitForText"/>
        <switchToIFrame stepKey="exitIFrame1"/>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage2"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <!--Verify Text Content Type on stage after saving cms page-->
        <comment userInput="Verify text content type on storefront" stepKey="commentVerifyTextOnStage"/>
        <see userInput="{{PageBuilderTextContentTypeDefault.value}}" stepKey="seeTextOnStage"/>
        <!--Verify Text Content Type on storefront-->
        <comment userInput="Verify Text Content Type on storefront" stepKey="commentVerifyTextContenTypeOnStorefront"/>
        <amOnPage url="$$createCMSPage.identifier$$" stepKey="amOnPageTestPage"/>
        <see userInput="{{PageBuilderTextContentTypeDefault.value}}" stepKey="seeTextOnStorefront"/>
    </test>
    <test name="TextInlineImageEditing">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Text"/>
            <title value="Edit image inline in WYSIWYG and see on storefront"/>
            <description value="Verify that user are able to add image into Text Content Type and see it on storefront"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-1416"/>
            <testCaseId value="MC-3466"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <createData entity="_defaultCmsPage" stepKey="createCMSPage" />
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="SwitchToVersion4ActionGroup" stepKey="switchToTinyMCE4" />
            <actionGroup ref="useStaticURLForMediaContentInWYSIWYGActionGroup" stepKey="useStaticURLForMediaContentInWYSIWYG"/>
        </before>
        <after>
            <actionGroup ref="navigateToMediaGallery" stepKey="navigateToMediaGallery"/>
            <click selector="{{MediaGallerySection.WysiwygArrow}}" stepKey="openWYSIWYGFolder"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="NavigateToFolder">
                <argument name="FolderName" value="{{ImageFolder.name}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage">
                <argument name="Image" value="ImageUpload3"/>
            </actionGroup>
            <deleteData createDataKey="createCMSPage" stepKey="deletePreReqCMSPage" />
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage1">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup1">
            <argument name="group" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragTextOntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <click selector="{{TextOnStage.tinymce('1')}}" stepKey="focusOnTextEditorArea"/>
        <click selector="{{TinyMCESection.InsertImageIcon}}" stepKey="clickInsertImageIcon" />
        <waitForPageLoad stepKey="waitForPageLoad" />
        <actionGroup ref="clickBrowseBtnOnUploadPopup" stepKey="clickBrowserBtn"/>
        <actionGroup ref="VerifyMediaGalleryStorageActions" stepKey="VerifyMediaGalleryStorageBtn"/>
        <actionGroup ref="CreateImageFolder" stepKey="CreateImageFolder">
            <argument name="ImageFolder" value="ImageFolder"/>
        </actionGroup>
        <actionGroup ref="attachImage" stepKey="attachImage1">
            <argument name="Image" value="ImageUpload3"/>
        </actionGroup>
        <actionGroup ref="saveImage" stepKey="insertImage"/>
        <actionGroup ref="fillOutUploadImagePopup" stepKey="fillOutUploadImagePopup" />
        <waitForElementVisible selector="{{TextOnStage.tinymce('1')}}{{CmsWYSIWYGSection.imageSource(ImageUpload3.fileName)}}" stepKey="assertMediaSourceOnStage1"/>
        <!--Verify inputed image on slideout-->
        <comment userInput="Verify inputed image on slideout" stepKey="commentVerifyImageOnSlideout"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="lostFocusFromWYSIWYG1"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <switchToIFrame selector="{{TextOnConfiguration.tinyMCEIFrame}}" stepKey="switchToIFrame"/>
        <waitForElementVisible selector="{{TextOnConfiguration.tinyMCEImage(ImageUpload3.fileName)}}" stepKey="waitForImage3"/>
        <switchToIFrame stepKey="exitIFrame"/>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage2"/>
        <!--Verify image on stage after saving cms page-->
        <comment userInput="Verify image on stage" stepKey="commentVerifyImageOnStage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <waitForElementVisible selector="{{TextOnStage.tinymce('1')}}{{CmsWYSIWYGSection.imageSource(ImageUpload3.fileName)}}" stepKey="assertMediaSourceOnStage2"/>
        <!--Verify image on storefront-->
        <comment userInput="Verify image on storefront" stepKey="commentVerifyImageOnStorefront"/>
        <amOnPage url="$$createCMSPage.identifier$$" stepKey="amOnPageTestPage"/>
        <waitForElementVisible selector="{{TextOnStorefront.image('1',ImageUpload3.fileName)}}" stepKey="assertMediaSource"/>
    </test>
    <test name="TextInlineVariableEditing">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Text"/>
            <title value="Edit variable inline in WYSIWYG and see on storefront"/>
            <description value="Verify that user are able to add variable into Text Content Type and see it on storefront"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-1416"/>
            <testCaseId value="MC-3467"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <createData entity="_defaultCmsPage" stepKey="createCMSPage" />
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="SwitchToVersion4ActionGroup" stepKey="switchToTinyMCE4" />
        </before>
        <after>
            <deleteData createDataKey="createCMSPage" stepKey="deletePreReqCMSPage" />
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage1">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup1">
            <argument name="group" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragTextOntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <click selector="{{TextOnStage.tinymce('1')}}" stepKey="focusOnTextEditorArea"/>
        <actionGroup ref="addVariableToTinyMCE" stepKey="addVariableToTinyMCE">
            <argument name="variable" value="TinyMCEVariableCountry"/>
        </actionGroup>
        <waitForElementVisible selector="{{TextOnStage.text('1', TinyMCEVariableCountry.editPanelValue)}}" stepKey="waitForVariableCountryStage1"/>
        <!--Select another variable-->
        <comment userInput="Select another variable" stepKey="selectAnotherVariable"/>
        <doubleClick  selector="{{TextOnStage.text('1', TinyMCEVariableCountry.editPanelValue)}}" stepKey="doubleClickOnVariablePlaceholder"/>
        <waitForLoadingMaskToDisappear stepKey="waitForLoadingMaskToDisappear"/>
        <waitForElementVisible selector="{{VariableSection.Radio(TinyMCEVariableBaseURL.variableName)}}" stepKey="waitForVariable1"/>
        <checkOption selector="{{VariableSection.Radio(TinyMCEVariableBaseURL.variableName)}}" stepKey="selectVariable"/>
        <waitForElementVisible selector="{{VariableSection.InsertWidget}}" stepKey="waitForInsertVariable2"/>
        <click selector="{{VariableSection.InsertWidget}}" stepKey="clickInsertVariable2"/>
        <waitForElementNotVisible selector="{{VariableSection.InsertWidget}}" stepKey="waitForVariableModalToClose"/>
        <waitForElementVisible selector="{{TextOnStage.text('1', TinyMCEVariableBaseURL.editPanelValue)}}" stepKey="waitForVariabBaseURLleStage1"/>
        <!--Verify inputed variable on slideout-->
        <comment userInput="Verify inputed variable on slideout" stepKey="commentVerifyVariableOnSlideout"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="lostFocusFromWYSIWYG"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <switchToIFrame selector="{{TextOnConfiguration.tinyMCEIFrame}}" stepKey="switchToIFrame"/>
        <waitForElementVisible selector="{{TextOnConfiguration.tinyMCEVariable(TinyMCEVariableBaseURL.editPanelValue, '1')}}" stepKey="waitForVariable2"/>
        <switchToIFrame stepKey="exitIFrame"/>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage2"/>
        <!--Verify variable on stage after saving cms page-->
        <comment userInput="Verify variable on stage" stepKey="commentVerifyImageOnStage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <waitForElementVisible selector="{{TextOnStage.text('1', TinyMCEVariableBaseURL.editPanelValue)}}" stepKey="waitForVariabBaseURLleStage2"/>
        <!-- Validate Storefront -->
        <comment userInput="Verify variable  on storefront" stepKey="commentVerifyEmptyBlock"/>
        <amOnPage url="$$createCMSPage.identifier$$" stepKey="amOnPageTestPage"/>
        <waitForElementVisible selector="{{TextOnStorefront.text('1', _ENV.MAGENTO_BASE_URL)}}" stepKey="waitForVariableStorefront"/>
    </test>
    <test name="TextInlineWidgetEditing">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Text"/>
            <title value="Edit widget inline in WYSIWYG and see on storefront"/>
            <description value="Verify that user are able to add widget into Text Content Type and see it on storefront"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-1416"/>
            <testCaseId value="MC-3468"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <createData entity="_defaultCmsPage" stepKey="createCMSPageA" />
            <createData entity="_defaultCmsPage" stepKey="createCMSPageB" />
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="SwitchToVersion4ActionGroup" stepKey="switchToTinyMCE4" />
        </before>
        <after>
            <deleteData createDataKey="createCMSPageA" stepKey="deletePreReqCMSPageA" />
            <deleteData createDataKey="createCMSPageB" stepKey="deletePreReqCMSPageB" />
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage1">
            <argument name="CMSPage" value="$$createCMSPageA$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup1">
            <argument name="group" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragTextOntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <click selector="{{TextOnStage.tinymce('1')}}" stepKey="focusOnTextEditorArea"/>
        <actionGroup ref="addPageLinkWidgetToTinyMCE" stepKey="addPageLinkWidgetToTinyMCE">
            <argument name="widget" value="TinyMCEWidgetCMSPageLink"/>
            <argument name="page" value="$$createCMSPageB.identifier$$"/>
        </actionGroup>
        <waitForElementVisible selector="{{TextOnStage.text('1', TinyMCEWidgetCMSPageLink.editPanelValue)}}" stepKey="waitForWidgetStage1"/>
        <!--Verify widget edit page-->
        <comment userInput="Verify widget edit page" stepKey="commentVerifyEditWidget"/>
        <doubleClick  selector="{{TextOnStage.text('1', TinyMCEWidgetCMSPageLink.editPanelValue)}}" stepKey="doubleClickOnWidgetPlaceholder"/>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <waitForLoadingMaskToDisappear stepKey="waitForLoadingMaskToDisappear"/>
        <waitForElementVisible selector="{{WidgetSection.CancelBtnEnabled}}" stepKey="waitForWidgetType"/>
        <click selector="{{WidgetSection.CancelBtnEnabled}}" stepKey="clickInsertWidget2"/>
        <waitForLoadingMaskToDisappear stepKey="waitForLoadingMaskToDisappear5"/>
        <waitForElementNotVisible selector="{{WidgetSection.InsertWidget}}" stepKey="waitForInsertWidgetModalToClose"/>
        <!--Verify inputed widget on slideout-->
        <comment userInput="Verify inputed widget on slideout" stepKey="commentVerifyInputedWidget"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="lostFocusFromWYSIWYG"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <switchToIFrame selector="{{TextOnConfiguration.tinyMCEIFrame}}" stepKey="switchToIFrame"/>
        <waitForElementVisible selector="{{TextOnConfiguration.tinyMCEWidget(TinyMCEWidgetCMSPageLink.editPanelValue, '1')}}" stepKey="waitForWidget"/>
        <switchToIFrame stepKey="exitIFrame"/>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage2"/>
        <!-- Validate stage -->
        <comment userInput="Verify Widget Content Type on stage" stepKey="commentVerifyWidgetOnStage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <waitForElementVisible selector="{{TextOnStage.text('1', TinyMCEWidgetCMSPageLink.editPanelValue)}}" stepKey="waitForWidgetStage2"/>
        <!-- Validate Storefront -->
        <comment userInput="Verify Widget Content Type on storefront" stepKey="commentVerifyWidgetOnStorefront"/>
        <amOnPage url="$$createCMSPageA.identifier$$" stepKey="amOnPageTestPage"/>
        <seeElement selector="div.block-cms-link a[href='{{_ENV.MAGENTO_BASE_URL}}/$$createCMSPageB.identifier$$']" stepKey="waitForWidgetStorefront"/>
    </test>
    <test name="TextVerifyTinyMCE4ToolbarOnPageBuilderStage">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Text"/>
            <title value="TinyMCE4 toolbar on PageBuilder stage"/>
            <description value="Verify buttons on WYSIWYG toolbar inside PageBuilder"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-1412"/>
            <testCaseId value="MC-3463"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <createData entity="_defaultCmsPage" stepKey="createCMSPage" />
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="SwitchToVersion4ActionGroup" stepKey="switchToTinyMCE4" />
        </before>
        <after>
            <deleteData createDataKey="createCMSPage" stepKey="deletePreReqCMSPage" />
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage1">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup1">
            <argument name="group" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragButtonsOntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <click selector="{{TextOnStage.tinymce('1')}}" stepKey="focusOnTextEditorArea"/>
        <actionGroup ref="VerifyTinyMCEActionGroup" stepKey="verifyTinyMCE4"/>
        <actionGroup ref="VerifyMagentoEntityActionGroup" stepKey="verifyMagentoEntities"/>
        <seeElement selector="{{WYSIWYGOnPageBuilder.undo}}" stepKey="seeUndo"/>
        <seeElement selector="{{WYSIWYGOnPageBuilder.redo}}" stepKey="seeRedo"/>
        <seeElement selector="{{WYSIWYGOnPageBuilder.fontSize}}" stepKey="seeFontsize"/>
        <seeElement selector="{{WYSIWYGOnPageBuilder.textColor}}" stepKey="seeTextColor"/>
        <seeElement selector="{{WYSIWYGOnPageBuilder.backgroundColor}}" stepKey="seeBackgroundColor"/>
        <!--Verify FontSize-->
        <comment userInput="Verify FontSize" stepKey="commentVerifyFontSize"/>
        <click selector="{{WYSIWYGOnPageBuilder.fontSize}}" stepKey="clickOnFontSize"/>
        <see userInput="10px" stepKey="see10px" />
        <see userInput="12px" stepKey="see12px" />
        <see userInput="14px" stepKey="see14px" />
        <see userInput="16px" stepKey="see16px" />
        <see userInput="18px" stepKey="see18px" />
        <see userInput="20px" stepKey="see20px" />
        <see userInput="24px" stepKey="see24px" />
        <see userInput="26px" stepKey="see26px" />
        <see userInput="28px" stepKey="see28px" />
        <see userInput="32px" stepKey="see32px" />
        <see userInput="34px" stepKey="see34px" />
        <see userInput="36px" stepKey="see36px" />
        <see userInput="38px" stepKey="see38px" />
        <see userInput="40px" stepKey="see40px" />
        <see userInput="42px" stepKey="see42px" />
        <see userInput="48px" stepKey="see48px" />
        <see userInput="52px" stepKey="see52px" />
        <see userInput="56px" stepKey="see56px" />
        <see userInput="64px" stepKey="see64px" />
        <see userInput="72px" stepKey="see72px" />
        <!--Verify FontStyle on preview-->
        <comment userInput="Verify FontStyle on preview" stepKey="commentVerifyFontsizeOnPreview"/>
        <click selector="{{TextOnStage.tinymce('1')}}" stepKey="focusOnEditorArea"/>
        <fillField selector="{{TextOnStage.tinymce('1')}}" userInput="{{PageBuilderTextContentTypeDefault.value}}" stepKey="fillTextToTinyMCE4"/>
        <click selector="{{WYSIWYGOnPageBuilder.formatSelector}}" stepKey="expandFormatList"/>
        <see userInput="Important" stepKey="seeImportantStyle"/>
        <click selector="{{TextOnStage.importantStyle('1')}}" stepKey="selectFormatStyle" />
        <seeElement selector="{{TextOnStage.textInImportantStyle('1',PageBuilderTextContentTypeDefault.value)}}" stepKey="seeTextInImportantStyleOnPreview1" />
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage2"/>
        <!--Verify FontStyle on stage-->
        <comment userInput="Verify FontStyle on stage" stepKey="commentVerifyFontStyleOnStage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <seeElement selector="{{TextOnStage.textInImportantStyle('1',PageBuilderTextContentTypeDefault.value)}}" stepKey="seeTextInImportantStyleOnPreview2" />
        <!--Verify FontStyle on Storeview-->
        <comment userInput="Verify FontStyle on Storeview" stepKey="commentVerifyFontStyleOnStoreview"/>
        <amOnPage url="$$createCMSPage.identifier$$" stepKey="amOnPageTestPage2"/>
        <waitForPageLoad  stepKey="waitForPageLoad3"/>
        <seeElement selector="{{TextOnStage.textInImportantStyle('1',PageBuilderTextContentTypeDefault.value)}}" stepKey="seeTextInImportantStyleOnStorefront" />
    </test>
    <test name="TextAddTextWithCustomTinyMCE">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Text"/>
            <title value="Validate Custom WYSIWYG Inside Pagebuilder"/>
            <description value="Custom buttons on WYSIWYG toolbar inside PageBuilder"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-1412"/>
            <testCaseId value="MAGETWO-90274"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <createData entity="_defaultCmsPage" stepKey="createCMSPage" />
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="SwitchToVersion4ActionGroup" stepKey="switchToTinyMCE4" />
        </before>
        <after>
            <deleteData createDataKey="createCMSPage" stepKey="deletePreReqCMSPage" />
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage1">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragButtonsOntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <seeElement selector="{{WYSIWYGOnPageBuilder.undo}}" stepKey="seeUndo"/>
        <seeElement selector="{{WYSIWYGOnPageBuilder.redo}}" stepKey="seeRedo"/>
        <seeElement selector="{{WYSIWYGOnPageBuilder.fontSize}}" stepKey="seeFontsize"/>
        <seeElement selector="{{WYSIWYGOnPageBuilder.textColor}}" stepKey="seeTextColor"/>
        <seeElement selector="{{WYSIWYGOnPageBuilder.backgroundColor}}" stepKey="seeBackgroundColor"/>

        <!--Verify FontSize-->
        <click selector="{{WYSIWYGOnPageBuilder.fontSize}}" stepKey="clickOnFontSize"/>
        <see userInput="10px" stepKey="see10px" />
        <see userInput="12px" stepKey="see12px" />
        <see userInput="14px" stepKey="see14px" />
        <see userInput="16px" stepKey="see16px" />
        <see userInput="18px" stepKey="see18px" />
        <see userInput="20px" stepKey="see20px" />
        <see userInput="24px" stepKey="see24px" />
        <see userInput="26px" stepKey="see26px" />
        <see userInput="28px" stepKey="see28px" />
        <see userInput="32px" stepKey="see32px" />
        <see userInput="34px" stepKey="see34px" />
        <see userInput="36px" stepKey="see36px" />
        <see userInput="38px" stepKey="see38px" />
        <see userInput="40px" stepKey="see40px" />
        <see userInput="42px" stepKey="see42px" />
        <see userInput="48px" stepKey="see48px" />
        <see userInput="52px" stepKey="see52px" />
        <see userInput="56px" stepKey="see56px" />
        <see userInput="64px" stepKey="see64px" />
        <see userInput="72px" stepKey="see72px" />

        <!--Verify FontStyle on preview-->
        <executeJS function="tinyMCE.get('pagebuilder_text_form_content').setContent('{{PageBuilderTextContentTypeDefault.value}}');" stepKey="executeJSFillContent"/>
        <click selector="{{WYSIWYGOnPageBuilder.formatSelector}}" stepKey="expandFormatList"/>
        <see userInput="Important" stepKey="seeImportantStyle"/>
        <click selector="//span[text()='Important']" stepKey="selectFormatStyle" />
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <seeElement selector="//div/div[contains(normalize-space(@class), 'cms-content-important') and text()='{{PageBuilderTextContentTypeDefault.value}}']" stepKey="seeTextInImportantStyleOnPreview" />
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage2"/>

        <!--Verify FontStyle on Storeview-->
        <amOnPage url="$$createCMSPage.identifier$$" stepKey="amOnPageTestPage2"/>
        <waitForPageLoad  stepKey="waitForPageLoad3"/>
        <seeElement selector="//div[contains(normalize-space(@class), 'cms-content-important') and text()='{{PageBuilderTextContentTypeDefault.value}}']" stepKey="seeTextInImportantStyleOnStorefront" />
    </test>
    <test name="TextAddTextWithTinyMCE">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Text"/>
            <title value="Update General Values (string, Magento Variable, Magento Widget)"/>
            <description value="Validate that updating every attribute in the General form for Text will update the Stage and Storefront correctly."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-83925"/>
            <testCaseId value="MAGETWO-84263"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
                <argument name="contentType" value="PageBuilderTextContentType"/>
            </actionGroup>
            <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragButtonsOntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="addVariableToTinyMCE" stepKey="addVariableToTinyMCE">
            <argument name="variable" value="TinyMCEVariableBaseURL"/>
        </actionGroup>
        <!--Switch to iFrame 1-->
        <comment userInput="Switch to iFrame" stepKey="commentSwitchToIFrame1"/>
        <switchToIFrame selector="{{TextOnConfiguration.tinyMCEIFrame}}" stepKey="switchToIFrame1"/>
        <waitForElementVisible selector="{{TextOnConfiguration.tinyMCEVariable(TinyMCEVariableBaseURL.editPanelValue, '1')}}" stepKey="waitForVariable2"/>
        <switchToIFrame stepKey="exitIFrame1"/>
        <actionGroup ref="addPageLinkWidgetToTinyMCE" stepKey="addPageLinkWidgetToTinyMCE">
            <argument name="widget" value="TinyMCEWidgetCMSPageLink"/>
            <argument name="page" value="text{{PageBuilderPageTitle.pageName}}"/>
        </actionGroup>
        <!--Switch to iFrame-->
        <comment userInput="Switch to iFrame" stepKey="commentSwitchToIFrame"/>
        <switchToIFrame selector="{{TextOnConfiguration.tinyMCEIFrame}}" stepKey="switchToIFrame"/>
        <waitForElementVisible selector="{{TextOnConfiguration.tinyMCEWidget(TinyMCEWidgetCMSPageLink.editPanelValue, '1')}}" stepKey="waitForWidget"/>
        <switchToIFrame stepKey="exitIFrame"/>
        <actionGroup ref="addTextToTinyMCE" stepKey="enterText">
            <argument name="property" value="PageBuilderTextProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <waitForElementVisible selector="{{TextOnStage.mcePlaceholder('1', TinyMCEVariableBaseURL.variableNameEncoded)}}" stepKey="waitForVariableStage"/>
        <waitForElementVisible selector="{{TextOnStage.mcePlaceholder('1', TinyMCEWidgetCMSPageLink.stageValueEncoded)}}" stepKey="waitForWidgetStage"/>
        <waitForElementVisible selector="{{TextOnStage.text('1', PageBuilderTextProperty.value)}}" stepKey="waitForTextStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <waitForElementVisible selector="{{TextOnStorefront.text('1', _ENV.MAGENTO_BASE_URL)}}" stepKey="waitForVariableStorefront"/>
        <waitForElementVisible selector="div.block-cms-link a[href='{{_ENV.MAGENTO_BASE_URL}}text{{PageBuilderPageTitle.pageName}}']" stepKey="waitForWidgetStorefront"/>
        <waitForElementVisible selector="{{TextOnStorefront.text('1', PageBuilderTextProperty.value)}}" stepKey="waitForTextStorefront"/>
    </test>
    <test name="TextDelete">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Text"/>
            <title value="Delete Text"/>
            <description value="A user should be able to delete a Text content type. Verify on Stage amd Storefront."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-83925"/>
            <testCaseId value="MAGETWO-84919"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragContentTypeToStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="removeEmptyContentTypeFromStage" stepKey="removeEmptyContentTypeFromStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <dontSeeElement selector="{{PageBuilderStage.contentTypeInStage(PageBuilderTextContentType.role)}}" stepKey="dontSeeContentTypeInStage"/>
    </test>
    <test name="TextValidateAdvancedConfigurationDefaultValues">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Text"/>
            <title value="Validate Advanced Configuration Default Values"/>
            <description value="Validate the default values for every attribute in the Advanced Configuration section on the Edit Form, Stage, and Storefront for Text."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-83415"/>
            <testCaseId value="MAGETWO-84275"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragTextIntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCE" stepKey="enterText">
            <argument name="property" value="PageBuilderTextProperty"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection"/>
        <!-- Validate Edit Panel -->
        <comment userInput="Validate Edit Panel" stepKey="commentValidateEditPanel"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyNone"/>
        </actionGroup>
        <grabValueFrom selector="{{EditPanelForm.panelFieldControl(PageBuilderAdvancedBorderColorDefaultProperty.section, PageBuilderAdvancedBorderColorDefaultProperty.fieldName)}}" stepKey="getBorderColor"/>
        <assertEmpty actual="getBorderColor" actualType="variable" message="Text field has text: $getBorderColor" stepKey="assertBorderColor"/>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
        </actionGroup>
        <grabValueFrom selector="{{EditPanelForm.panelFieldControl(PageBuilderAdvancedCssClassesDefaultProperty.section, PageBuilderAdvancedCssClassesDefaultProperty.fieldName)}}" stepKey="getCssClasses"/>
        <assertEmpty actual="getCssClasses" actualType="variable" message="Text field was not empty. Had text: $getCssClasses" stepKey="assertCssClasses"/>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins">
            <argument name="property" value="PageBuilderMarginsPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding">
            <argument name="property" value="PageBuilderPaddingPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <actionGroup ref="validateAdvancedStyleWithNoAlignment" stepKey="validateStage">
            <argument name="page" value="TextOnStage"/>
            <argument name="border" value="PageBuilderAdvancedBorderPropertyNone"/>
            <argument name="borderWidth" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
            <argument name="borderRadius" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
            <argument name="margin" value="PageBuilderMarginsPropertyDefault"/>
            <argument name="padding" value="PageBuilderPaddingPropertyDefault"/>
            <argument name="index" value="1"/>            
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStage2"/>
        <actionGroup ref="validateAdvancedStyleWithNoAlignment" stepKey="validateStage2">
            <argument name="page" value="TextOnStage"/>
            <argument name="border" value="PageBuilderAdvancedBorderPropertyNone"/>
            <argument name="borderWidth" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
            <argument name="borderRadius" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
            <argument name="margin" value="PageBuilderMarginsPropertyDefault"/>
            <argument name="padding" value="PageBuilderPaddingPropertyDefault"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection2"/>
        <!-- Validate Edit Panel After Save -->
        <comment userInput="Validate Edit Panel After Save" stepKey="commentValidateEditPanel2"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment2">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder2">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyNone"/>
        </actionGroup>
        <grabValueFrom selector="{{EditPanelForm.panelFieldControl(PageBuilderAdvancedBorderColorDefaultProperty.section, PageBuilderAdvancedBorderColorDefaultProperty.fieldName)}}" stepKey="getBorderColor2"/>
        <assertEmpty actual="getBorderColor2" actualType="variable" message="Text field has text: $getBorderColor2" stepKey="assertBorderColor2"/>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth2">
            <argument name="property" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius2">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
        </actionGroup>
        <grabValueFrom selector="{{EditPanelForm.panelFieldControl(PageBuilderAdvancedCssClassesDefaultProperty.section, PageBuilderAdvancedCssClassesDefaultProperty.fieldName)}}" stepKey="getCssClasses2"/>
        <assertEmpty actual="getCssClasses2" actualType="variable" message="Text field was not empty. Had text: $getCssClasses2" stepKey="assertCssClasses2"/>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins2">
            <argument name="property" value="PageBuilderMarginsPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding2">
            <argument name="property" value="PageBuilderPaddingPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="validateAdvancedStyleWithNoAlignment" stepKey="validateStorefront">
            <argument name="page" value="TextOnStorefront"/>
            <argument name="border" value="PageBuilderAdvancedBorderPropertyNone"/>
            <argument name="borderWidth" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
            <argument name="borderRadius" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
            <argument name="margin" value="PageBuilderMarginsPropertyDefault"/>
            <argument name="padding" value="PageBuilderPaddingPropertyDefault"/>
            <argument name="index" value="1"/>
        </actionGroup>
    </test>
    <test name="TextUpdateAdvancedConfigurationValues">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Text"/>
            <title value="Update Advanced Configuration Values"/>
            <description value="Validate that updating every attribute in the Advanced Configuration form for Text will update the Stage and Storefront correctly."/>
            <severity value="CRITICAL"/>
            <useCaseId value="MAGETWO-89190"/>
            <testCaseId value="MAGETWO-89774"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragContentTypeToStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCE" stepKey="enterText">
            <argument name="property" value="PageBuilderTextProperty"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection"/>
        <!-- Update Values -->
        <comment userInput="Update Values" stepKey="commentUpdateValues"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDouble"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderColor">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderRadius">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusProperty12"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterCssClasses">
            <argument name="property" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldMargins" stepKey="enterMargins">
            <argument name="property" value="PageBuilderMarginsPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldPadding" stepKey="enterPadding">
            <argument name="property" value="PageBuilderPaddingPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <actionGroup ref="validateAdvancedStyleWithAllUpdated" stepKey="validateAllAdvancedStage">
            <argument name="page" value="TextOnStage"/>
            <argument name="alignment" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
            <argument name="border" value="PageBuilderAdvancedBorderPropertyDouble"/>
            <argument name="borderColor" value="PageBuilderAdvancedBorderColorProperty_green"/>
            <argument name="borderWidth" value="PageBuilderAdvancedBorderWidthProperty10"/>
            <argument name="borderRadius" value="PageBuilderAdvancedBorderRadiusProperty12"/>
            <argument name="cssClasses" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
            <argument name="margin" value="PageBuilderMarginsPropertyUnique"/>
            <argument name="padding" value="PageBuilderPaddingPropertyUnique"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="lostFocusFromWYSIWYG1"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection2"/>
        <!-- Validate Edit Panel -->
        <comment userInput="Validate Edit Panel" stepKey="commentValidateEditPanel"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDouble"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderColor">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusProperty12"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateCssClasses">
            <argument name="property" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
        </actionGroup>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins">
            <argument name="property" value="PageBuilderMarginsPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding">
            <argument name="property" value="PageBuilderPaddingPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStage2"/>
        <actionGroup ref="validateAdvancedStyleWithAllUpdated" stepKey="validateAllAdvancedStage2">
            <argument name="page" value="TextOnStage"/>
            <argument name="alignment" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
            <argument name="border" value="PageBuilderAdvancedBorderPropertyDouble"/>
            <argument name="borderColor" value="PageBuilderAdvancedBorderColorProperty_green"/>
            <argument name="borderWidth" value="PageBuilderAdvancedBorderWidthProperty10"/>
            <argument name="borderRadius" value="PageBuilderAdvancedBorderRadiusProperty12"/>
            <argument name="cssClasses" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
            <argument name="margin" value="PageBuilderMarginsPropertyUnique"/>
            <argument name="padding" value="PageBuilderPaddingPropertyUnique"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage3">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection3"/>
        <!-- Validate Edit Panel After Save -->
        <comment userInput="Validate Edit Panel After Save" stepKey="commentValidateEditPanel2"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment2">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder2">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDouble"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderColor2">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth2">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius2">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusProperty12"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateCssClasses2">
            <argument name="property" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
        </actionGroup>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins2">
            <argument name="property" value="PageBuilderMarginsPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding2">
            <argument name="property" value="PageBuilderPaddingPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="validateAdvancedStyleWithAllUpdated" stepKey="validateAllAdvancedStorefront">
            <argument name="page" value="TextOnStorefront"/>
            <argument name="alignment" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
            <argument name="border" value="PageBuilderAdvancedBorderPropertyDouble"/>
            <argument name="borderColor" value="PageBuilderAdvancedBorderColorProperty_green"/>
            <argument name="borderWidth" value="PageBuilderAdvancedBorderWidthProperty10"/>
            <argument name="borderRadius" value="PageBuilderAdvancedBorderRadiusProperty12"/>
            <argument name="cssClasses" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
            <argument name="margin" value="PageBuilderMarginsPropertyUnique"/>
            <argument name="padding" value="PageBuilderPaddingPropertyUnique"/>
            <argument name="index" value="1"/>
        </actionGroup>
    </test>
    <test name="TextDuplicate">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Text"/>
            <title value="Duplicate Text"/>
            <description value="A user should be able to duplicate a text content type. Verify on Stage and Storefront."/>
            <severity value="AVERAGE"/>
            <useCaseId value="MAGETWO-90461"/>
            <testCaseId value="MAGETWO-91075"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragIntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <!-- Fill All Fields -->
        <comment userInput="Fill All Fields" stepKey="commentEdit"/>
        <actionGroup ref="addTextToTinyMCE" stepKey="enterText">
            <argument name="property" value="PageBuilderTextProperty"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDouble"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderColor">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderRadius">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusProperty12"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterCssClasses">
            <argument name="property" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldMargins" stepKey="enterMargins">
            <argument name="property" value="PageBuilderMarginsPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldPadding" stepKey="enterPadding">
            <argument name="property" value="PageBuilderPaddingPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="lostFocusFromWYSIWYG1"/>
        <!-- Duplicate and Validate Stage -->
        <comment userInput="Duplicate" stepKey="commentDuplicate"/>
        <actionGroup ref="duplicateContentType" stepKey="duplicateContentType">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <actionGroup ref="validateAdvancedStyleWithAllUpdated" stepKey="validateAllAdvancedStage">
            <argument name="page" value="TextOnStage"/>
            <argument name="alignment" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
            <argument name="border" value="PageBuilderAdvancedBorderPropertyDouble"/>
            <argument name="borderColor" value="PageBuilderAdvancedBorderColorProperty_green"/>
            <argument name="borderWidth" value="PageBuilderAdvancedBorderWidthProperty10"/>
            <argument name="borderRadius" value="PageBuilderAdvancedBorderRadiusProperty12"/>
            <argument name="cssClasses" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
            <argument name="margin" value="PageBuilderMarginsPropertyUnique"/>
            <argument name="padding" value="PageBuilderPaddingPropertyUnique"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <waitForElementVisible selector="{{TextOnStage.text('2', PageBuilderTextProperty.value)}}" stepKey="waitForTextStage"/>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderTextContentType"/>
            <argument name="contentTypeIndex" value="2"/>
        </actionGroup>
        <!-- Validate Edit Panel For Duplicate -->
        <comment userInput="Validate Edit Panel For Duplicate" stepKey="commentValidateEdit"/>
        <actionGroup ref="validateTextInTinyMCE" stepKey="validateTextInTinyMCE1">
            <argument name="property" value="PageBuilderTextProperty"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandAdvancedSection2"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDouble"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderColor">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusProperty12"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateCssClasses">
            <argument name="property" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
        </actionGroup>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins">
            <argument name="property" value="PageBuilderMarginsPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding">
            <argument name="property" value="PageBuilderPaddingPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanel"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStage2"/>
        <actionGroup ref="validateAdvancedStyleWithAllUpdated" stepKey="validateAllAdvancedStage2">
            <argument name="page" value="TextOnStage"/>
            <argument name="alignment" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
            <argument name="border" value="PageBuilderAdvancedBorderPropertyDouble"/>
            <argument name="borderColor" value="PageBuilderAdvancedBorderColorProperty_green"/>
            <argument name="borderWidth" value="PageBuilderAdvancedBorderWidthProperty10"/>
            <argument name="borderRadius" value="PageBuilderAdvancedBorderRadiusProperty12"/>
            <argument name="cssClasses" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
            <argument name="margin" value="PageBuilderMarginsPropertyUnique"/>
            <argument name="padding" value="PageBuilderPaddingPropertyUnique"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <waitForElementVisible selector="{{TextOnStage.text('2', PageBuilderTextProperty.value)}}" stepKey="waitForTextStage2"/>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuOnStage3">
            <argument name="contentType" value="PageBuilderTextContentType"/>
            <argument name="contentTypeIndex" value="2"/>
        </actionGroup>
        <!-- Validate Edit Panel For Duplicate After Save -->
        <comment userInput="Validate Edit Panel For Duplicate After Save" stepKey="commentValidateEdit2"/>
        <actionGroup ref="validateTextInTinyMCE" stepKey="validateTextInTinyMCE2">
            <argument name="property" value="PageBuilderTextProperty"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandAdvancedSection3"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment2">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder2">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDouble"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderColor2">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth2">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius2">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusProperty12"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateCssClasses2">
            <argument name="property" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
        </actionGroup>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins2">
            <argument name="property" value="PageBuilderMarginsPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding2">
            <argument name="property" value="PageBuilderPaddingPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="validateAdvancedStyleWithAllUpdated" stepKey="validateAllAdvancedStorefront2">
            <argument name="page" value="TextOnStorefront"/>
            <argument name="alignment" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
            <argument name="border" value="PageBuilderAdvancedBorderPropertyDouble"/>
            <argument name="borderColor" value="PageBuilderAdvancedBorderColorProperty_green"/>
            <argument name="borderWidth" value="PageBuilderAdvancedBorderWidthProperty10"/>
            <argument name="borderRadius" value="PageBuilderAdvancedBorderRadiusProperty12"/>
            <argument name="cssClasses" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
            <argument name="margin" value="PageBuilderMarginsPropertyUnique"/>
            <argument name="padding" value="PageBuilderPaddingPropertyUnique"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <waitForElementVisible selector="{{TextOnStorefront.text('2', PageBuilderTextProperty.value)}}" stepKey="waitForTextStorefront"/>
    </test>
    <test name="TextValidateGeneralDefaultSettings">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Text"/>
            <title value="Validate General Default Settings"/>
            <description value="Validate the default values for every attribute in the General section on the Edit Form, Stage, and Storefront for Text."/>
            <severity value="AVERAGE"/>
            <useCaseId value="MAGETWO-90461"/>
            <testCaseId value="MAGETWO-91076"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragIntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="validateTextInTinyMCE" stepKey="validateTextInTinyMCE">
            <argument name="property" value="PageBuilderTextContentTypeEmpty"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage1"/>
        <waitForElementVisible selector="{{TextOnStage.text('1', PageBuilderTextContentTypeDefault.value)}}" stepKey="waitForTextStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStage2"/>
        <waitForElementVisible selector="{{TextOnStage.text('1', PageBuilderTextContentTypeDefault.value)}}" stepKey="waitForTextStage2"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <!-- Validate Edit Panel For Duplicate After Save -->
        <comment userInput="Validate Edit Panel For Duplicate After Save" stepKey="commentValidateEdit2"/>
        <actionGroup ref="validateTextInTinyMCE" stepKey="validateTextInTinyMCE2">
            <argument name="property" value="PageBuilderTextContentTypeEmpty"/>
        </actionGroup>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <waitForElementNotVisible selector="{{TextOnStorefront.base('1')}}" stepKey="waitForTextStorefront"/>
    </test>
    <test name="TextRequiredAttributes">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Text"/>
            <title value="Validate Required Attributes"/>
            <description value="Validate that required attributes are required for text."/>
            <severity value="AVERAGE"/>
            <useCaseId value="MAGETWO-90461"/>
            <testCaseId value="MAGETWO-91077"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragIntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <!-- Validate Cannot Save Edit Panel -->
        <comment userInput="Validate Cannot Save Edit Panel" stepKey="commentValidateCannotSave"/>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <waitForElementVisible time="5" selector="{{EditPanelForm.editFormSave}}" stepKey="waitForColumnSaveButton" />
        <click selector="{{EditPanelForm.editFormSave}}" stepKey="clickSaveColumn"/>
        <waitForPageLoad stepKey="waitForPageLoad2"/>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
    </test>
    <test name="TextDisabledWYSIWYGAddText">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Text"/>
            <title value="Disabled WYSIWYG - Update Textarea With String"/>
            <description value="Validate that textarea works for Text with WYSIWYG disabled."/>
            <severity value="AVERAGE"/>
            <useCaseId value="MAGETWO-90461"/>
            <testCaseId value="MAGETWO-91082"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-text"/>
            <group value="pagebuilder-customBeforeAfter"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragIntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <waitForElementVisible selector="{{TextOnConfiguration.textArea}}" stepKey="waitForTextOnEditPanel"/>
        <fillField selector="{{TextOnConfiguration.textArea}}" userInput="{{PageBuilderTextProperty.value}}" stepKey="fillTextField"/>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <waitForElementVisible selector="{{TextOnStage.textAreaText('1', PageBuilderTextProperty.value)}}" stepKey="waitForTextStage"/>
        <!-- Validate Edit Panel -->
        <comment userInput="Validate Edit Panel" stepKey="commentValidateEditPanel"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <waitForElementVisible selector="{{TextOnConfiguration.textArea}}" stepKey="waitForTextOnEditPanel2"/>
        <seeInField selector="{{TextOnConfiguration.textArea}}" userInput="{{PageBuilderTextProperty.value}}" stepKey="seeInField"/>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStage2"/>
        <waitForElementVisible selector="{{TextOnStage.textAreaText('1', PageBuilderTextProperty.value)}}" stepKey="waitForTextStage2"/>
        <!-- Validate Edit Panel -->
        <comment userInput="Validate Edit Panel After Save" stepKey="commentValidateEditPanel2"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage3">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <waitForElementVisible selector="{{TextOnConfiguration.textArea}}" stepKey="waitForTextOnEditPanel3"/>
        <seeInField selector="{{TextOnConfiguration.textArea}}" userInput="{{PageBuilderTextProperty.value}}" stepKey="seeInField2"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <waitForElementVisible selector="{{TextOnStorefront.textAreaText('1', PageBuilderTextProperty.value)}}" stepKey="waitForTextStorefront"/>
    </test>
    <test name="TextDisabledWYSIWYGAddWidget">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Text"/>
            <title value="Disabled WYSIWYG - Update Textarea With Widget"/>
            <description value="Validate that textarea works for Widget with WYSIWYG disabled."/>
            <severity value="AVERAGE"/>
            <useCaseId value="MAGETWO-90461"/>
            <testCaseId value="MAGETWO-91086"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-text"/>
            <group value="pagebuilder-customBeforeAfter"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
                <argument name="contentType" value="PageBuilderTextContentType"/>
            </actionGroup>
            <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragIntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="addPageLinkWidgetWYSIWYGDisabled" stepKey="addPageLinkWidgetWYSIWYGDisabled">
            <argument name="widget" value="PageBuilderTextArea_WidgetCMSPageLink"/>
            <argument name="page" value="text{{PageBuilderPageTitle.pageName}}"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <waitForElementVisible selector="{{TextOnStage.textAreaTextContains('1', PageBuilderTextArea_WidgetCMSPageLink.editPanelValue)}}" stepKey="waitForTextStage"/>
        <!-- Validate Edit Panel -->
        <comment userInput="Validate Edit Panel" stepKey="commentValidateEditPanel"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <waitForElementVisible selector="{{TextOnConfiguration.textArea}}" stepKey="waitForTextOnEditPanel2"/>
        <executeJS function="return document.getElementById('{{TextOnConfiguration.textAreaId}}').value;" stepKey="getText"/>
        <assertContains actual="getText" actualType="variable" expected="{{PageBuilderTextArea_WidgetCMSPageLink.editPanelValue}}" expectedType="string" stepKey="assertValue"/>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStage2"/>
        <waitForElementVisible selector="{{TextOnStage.textAreaTextContains('1', PageBuilderTextArea_WidgetCMSPageLink.editPanelValue)}}" stepKey="waitForTextStage2"/>
        <!-- Validate Edit Panel -->
        <comment userInput="Validate Edit Panel After Save" stepKey="commentValidateEditPanel2"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage3">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <waitForElementVisible selector="{{TextOnConfiguration.textArea}}" stepKey="waitForTextOnEditPanel3"/>
        <executeJS function="return document.getElementById('{{TextOnConfiguration.textAreaId}}').value;" stepKey="getText2"/>
        <assertContains actual="getText2" actualType="variable" expected="{{PageBuilderTextArea_WidgetCMSPageLink.editPanelValue}}" expectedType="string" stepKey="assertValue2"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <waitForElementVisible selector="{{TextOnStorefront.textAreaWidget('1', '{{_ENV.MAGENTO_BASE_URL}}', PageBuilderPageTitle.pageName)}}" stepKey="waitForTextStorefront"/>
    </test>
    <test name="TextDisabledWYSIWYGAddVariable">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Text"/>
            <title value="Disabled WYSIWYG - Update Textarea With Variable"/>
            <description value="Validate that textarea works for Variable with WYSIWYG disabled."/>
            <severity value="AVERAGE"/>
            <useCaseId value="MAGETWO-90461"/>
            <testCaseId value="MAGETWO-91092"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-text"/>
            <group value="pagebuilder-customBeforeAfter"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
                <argument name="contentType" value="PageBuilderTextContentType"/>
            </actionGroup>
            <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragIntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="addPageLinkVariableWYSIWYGDisabled" stepKey="addPageLinkVariableWYSIWYGDisabled">
            <argument name="variable" value="PageBuilderTextArea_VariableBaseURL"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <waitForElementVisible selector="{{TextOnStage.textAreaTextContains('1', PageBuilderTextArea_VariableBaseURL.editPanelValue)}}" stepKey="waitForTextStage"/>
        <!-- Validate Edit Panel -->
        <comment userInput="Validate Edit Panel" stepKey="commentValidateEditPanel"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <waitForElementVisible selector="{{TextOnConfiguration.textArea}}" stepKey="waitForTextOnEditPanel2"/>
        <executeJS function="return document.getElementById('{{TextOnConfiguration.textAreaId}}').value;" stepKey="getText"/>
        <assertContains actual="getText" actualType="variable" expected="{{PageBuilderTextArea_VariableBaseURL.editPanelValue}}" expectedType="string" stepKey="assertValue"/>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStage2"/>
        <waitForElementVisible selector="{{TextOnStage.textAreaTextContains('1', PageBuilderTextArea_VariableBaseURL.editPanelValue)}}" stepKey="waitForTextStage2"/>
        <!-- Validate Edit Panel -->
        <comment userInput="Validate Edit Panel After Save" stepKey="commentValidateEditPanel2"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage3">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <waitForElementVisible selector="{{TextOnConfiguration.textArea}}" stepKey="waitForTextOnEditPanel3"/>
        <executeJS function="return document.getElementById('{{TextOnConfiguration.textAreaId}}').value;" stepKey="getText2"/>
        <assertContains actual="getText2" actualType="variable" expected="{{PageBuilderTextArea_VariableBaseURL.editPanelValue}}" expectedType="string" stepKey="assertValue2"/>
        <amOnPage url="" stepKey="goToBaseURL"/>
        <grabFromCurrentUrl stepKey="grabBaseURL"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <waitForElementVisible selector="{{TextOnStorefront.textAreaText('1', '$grabBaseURL')}}" stepKey="waitForVariableStorefront"/>
    </test>
    <test name="TextCannotAddToStage">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Text"/>
            <title value="Cannot add Text to Stage"/>
            <description value="If user drags Text to Stage, it should have no effect"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-515"/>
            <testCaseId value="MC-3136"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-text"/>
            <group value="pagebuilder-cannotAddToStage"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="cannotDragContentTypeToTarget" stepKey="dragTextIntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
            <argument name="containerTargetType" value="PageBuilderStage"/>
        </actionGroup>
        <dontSeeElementInDOM selector="{{TextOnStage.base('1')}}" stepKey="dontSeeText"/>
    </test>
    <test name="TextCanAddToColumn">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Text"/>
            <title value="Add Text to Column container and view on Admin and Storefront"/>
            <description value="As a Content Manager I want column to be a container so that I can add Text inside"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-515"/>
            <testCaseId value="MC-3135"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-column"/>
            <group value="pagebuilder-text"/>
            <group value="pagebuilder-addToColumn"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragColumnIntoStage">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <!-- Add Text to Stage -->
        <comment userInput="Add Text to Stage" stepKey="addTextToStage"/>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandGroupElements">
            <argument name="group" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragTextOntoColumn">
            <argument name="contentType" value="PageBuilderTextContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="2" />
        </actionGroup>
        <!-- Validate Stage -->
        <comment userInput="User sees Text displayed in column on Stage" stepKey="confirmTextOnStage"/>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="checkContentTypeInContainerStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate stage after save" stepKey="validateTextOnStage"/>
        <actionGroup ref="validateContentTypeInsideContainerStage" stepKey="checkContentTypeInContainerStage2">
            <argument name="contentType" value="PageBuilderTextContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="View Text inside column on storefront" stepKey="viewTextOnStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeInsideContainerStorefrontInDOM" stepKey="checkContentTypeInContainerStorefront">
            <argument name="contentType" value="PageBuilderTextContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
    </test>
</tests>
