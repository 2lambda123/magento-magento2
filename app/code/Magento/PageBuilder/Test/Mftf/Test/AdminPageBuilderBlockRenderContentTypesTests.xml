<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AddBlockWithTabToCmsPage">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block"/>
            <title value="Add Block with Tab to CMS Page"/>
            <description value="Verify that admin are able to add a block instance type with tab content to Block Content Block and see it on frontend"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-3742"/>
            <useCaseId value="MC-1405"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="_defaultCmsPage" stepKey="createCMSPage" />
            <createData entity="_defaultBlock" stepKey="createPreReqBlock" />
        </before>
        <after>
            <deleteData createDataKey="createPreReqBlock" stepKey="deletePreReqBlock" />
            <deleteData createDataKey="createCMSPage" stepKey="deletePreReqCMSPage" />
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
            <argument name="CMSBlockPage" value="$$createPreReqBlock$$"/>
        </actionGroup>
        <!-- Add Tabs to Stage -->
        <comment userInput="Add Tabs to Stage" stepKey="addTabsToStage"/>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderTabsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragTabsIntoStage">
            <argument name="contentType" value="PageBuilderTabsContentType"/>
        </actionGroup>
        <actionGroup ref="addChildContentTypeFromOptionMenu" stepKey="addChildContentType">
            <argument name="contentType" value="PageBuilderTabsContentType"/>
        </actionGroup>
        <!-- User sees tabs displayed with 1st default tab item created by default -->
        <comment userInput="User sees tabs displayed with 1st default tab item created by default" stepKey="AC1"/>
        <actionGroup ref="openPageBuilderEditPanelSmallByIndex" stepKey="openEditPanel1">
            <argument name="section" value="TabOnStage"/>
        </actionGroup>
        <comment userInput="User configures custom tab name, min height, color for first tab" stepKey="AC2"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterFirstTabName">
            <argument name="property" value="PageBuilderTabNameRandom1"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterFirstTabMinHeight">
            <argument name="property" value="PageBuilderTabMinimumHeight200Property"/>
        </actionGroup>
        <comment userInput="I fill out color using Color Picker" stepKey="fillOutColorOnTab"/>
        <actionGroup ref="fillOutColorPicker" stepKey="fillOutColor">
            <argument name="colorCode" value="PageBuilderTabBackgroundColorPink"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeHEXInField7">
            <argument name="property" value="PageBuilderTabBackgroundColorPink"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <seeElement selector="{{TabOnStage.tabHeaderItemActive('1')}}" stepKey="seeFirstTabActiveAdminPreview"/>
        <comment userInput="User updates tab settings and saves configuration" stepKey="saveBlock"/>
        <click selector="{{BlockNewPagePageActionsSection.saveBlock}}" stepKey="clickSaveBlock"/>
        <waitForPageLoad stepKey="waitForPageToLoad"/>
        <!--Verify stage after save-->
        <comment userInput="Verify stage after save" stepKey="commentVerifyStageAfterSave"/>
        <seeElement selector="{{TabOnStage.tabHeaderItemActive('1')}}" stepKey="seeFirstTabActiveAdminPreviewAfterSave"/>
        <!--User goes to created CMS page-->
        <comment userInput="User goes to created CMS page" stepKey="NavigateToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandGroupAddContent">
            <argument name="group" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDrop">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createPreReqBlock$$"/>
        </actionGroup>
        <waitForElementVisible selector="{{BlockOnForm.title('$$createPreReqBlock.title$$')}}" stepKey="waitToSeeBlockTitle"/>
        <seeElement selector="{{BlockOnForm.title('$$createPreReqBlock.title$$')}}" stepKey="seeBlockTitleOnForm"/>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings2"/>
        <!--Check that tab was rendered on the stage-->
        <comment userInput="Check that tab was rendered on the stage" stepKey="commentCheckingThatTabAreRenderedOnTHeStage"/>
        <see selector="{{TabOnStorefront.tabHeader('1')}}" userInput="{{PageBuilderTabNameRandom1.value}}" stepKey="seeTab1TitleStorefront2"/>
        <seeElement selector="{{TabOnStorefront.tabHeaderItemActive('1')}}" stepKey="seeFirstTabActiveStorefront2"/>
        <seeElement selector="{{TabOnStorefront.backgroundColor('1', PageBuilderTabBackgroundColorPink.rgb)}}" stepKey="seeTab1BackgroundColor2"/>
        <actionGroup ref="openOptionsMenu" stepKey="openEditMenuOnStage3">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <seeElement selector="{{BlockOnStage.overlay('1')}}" stepKey="seeOverlayOnBlock"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!--Verify block on the frontend-->
        <comment userInput="Verify Block On Store front" stepKey="commentCheckingThatImageIsNotRenderedOnTheStoreFront"/>
        <amOnPage url="$$createCMSPage.identifier$$" stepKey="amOnPageTestPage"/>
        <see selector="{{TabOnStorefront.tabHeader('1')}}" userInput="{{PageBuilderTabNameRandom1.value}}" stepKey="seeTab1TitleStorefront"/>
        <seeElement selector="{{TabOnStorefront.tabHeaderItemActive('1')}}" stepKey="seeFirstTabActiveStorefront"/>
        <seeElement selector="{{TabOnStorefront.backgroundColor('1', PageBuilderTabBackgroundColorPink.rgb)}}" stepKey="seeTab1BackgroundColor"/>
        <see userInput="$$createPreReqBlock.content$$" stepKey="seeBlockContentOnCmsStage1"/>
    </test>
    <test name="AddBlockWithEmptyImageToCmsPage">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block"/>
            <title value="Add Block with Empty Image to CMS Page"/>
            <description value="Verify that admin are able to add a block instance type with empty image to Block Content Block and see it on frontend and on the stage"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-3740"/>
            <useCaseId value="MC-1405"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="_defaultCmsPage" stepKey="createCMSPage"/>
            <createData entity="_defaultBlock" stepKey="createPreReqBlock"/>
        </before>
        <after>
            <deleteData createDataKey="createPreReqBlock" stepKey="deletePreReqBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deletePreReqCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!--Add Image to block-->
        <comment userInput="Adding image to block" stepKey="commentAddingImageToBlock"/>
        <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
            <argument name="CMSBlockPage" value="$$createPreReqBlock$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderImageContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragImageIntoStage">
            <argument name="contentType" value="PageBuilderImageContentType"/>
        </actionGroup>
        <click selector="{{BlockNewPagePageActionsSection.saveBlock}}" stepKey="clickSaveBlock"/>
        <waitForPageLoad stepKey="waitForPageToLoad"/>
        <!--User goes to created CMS page-->
        <comment userInput="User goes to created CMS page" stepKey="NavigateToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandGroupAddContent">
            <argument name="group" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDrop">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createPreReqBlock$$"/>
        </actionGroup>
        <waitForElementVisible selector="{{BlockOnForm.title('$$createPreReqBlock.title$$')}}" stepKey="waitToSeeBlockTitle"/>
        <seeElement selector="{{BlockOnForm.title('$$createPreReqBlock.title$$')}}" stepKey="seeBlockTitleOnForm"/>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings2"/>
        <!--Check that image was not rendered on the stage-->
        <comment userInput="Check that image was not rendered on the stage" stepKey="commentCheckingThatImageIsNotRenderedOnTheStage"/>
        <executeJS function="return jQuery('.pagebuilder-block').css('height');" stepKey="height"/>
        <assertGreaterThanOrEqual stepKey="assertElementHight">
            <actualResult type="variable">height</actualResult>
            <expectedResult type="string">10px</expectedResult>
        </assertGreaterThanOrEqual>
        <seeElementInDOM selector="{{ImageOnStorefront.imageDisplay}}" stepKey="seeThatEmptyImageExistsInDomOnStage"/>
        <dontSeeElement selector="{{ImageOnStorefront.imageDisplay}}" stepKey="notSeeImageOnStage"/>
        <actionGroup ref="openOptionsMenu" stepKey="openEditMenuOnStage3">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <seeElement selector="{{BlockOnStage.overlay('1')}}" stepKey="seeOverlayOnBlock"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <amOnPage url="$$createCMSPage.identifier$$" stepKey="amOnPageTestPage"/>
        <!--Verify block on the frontend-->
        <comment userInput="Verify Block On Store front" stepKey="commentCheckingThatImageIsNotRenderedOnTheStoreFront"/>
        <seeElementInDOM selector="{{ImageOnStorefront.imageDisplay}}" stepKey="seeThatEmptyImageExistsInDomOnStorefront"/>
        <dontSeeElement selector="{{ImageOnStorefront.imageDisplay}}" stepKey="notSeeImageOnFrontend"/>
    </test>
    <test name="BlockImageIsRightAligned">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block"/>
            <title value="Image Can Be Right Aligned In Block"/>
            <description value="A user can right align an image in a Block"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-4293"/>
            <testCaseId value="MC-5174"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-image"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="_defaultBlock" stepKey="createPreReqBlock"/>
            <createData entity="_defaultCmsPage" stepKey="createCMSPage"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage">
                <argument name="CMSBlockPage" value="$$createPreReqBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createPreReqBlock" stepKey="deletePreReqBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deletePreReqCMSPage"/>
            <actionGroup ref="navigateToMediaGallery" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="NavigateToFolder">
                <argument name="FolderName" value="{{PageBuilderImageProperty_PNG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage">
                <argument name="Image" value="PageBuilderImageProperty_PNG"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Go to edit page of Block and configure Image -->
        <comment userInput="Go to edit page of Block and configure image" stepKey="commentGoToBlockEditPage"/>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderImageContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragImageIntoStage">
            <argument name="contentType" value="PageBuilderImageContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderImageContentType"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutPropertyGeneral" stepKey="attachImageFile">
            <argument name="property" value="PageBuilderImageProperty_PNG"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterImageCaptionProperty">
            <argument name="property" value="PageBuilderImageCaptionProperty"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyRight"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsInBlock"/>
        <click selector="{{BlockNewPagePageActionsSection.saveBlock}}" stepKey="clickSaveBlock"/>
        <waitForPageLoad time="30" stepKey="waitForStageToLoad"/>
        <!-- Go to CMS Page and choose Block -->
        <comment userInput="Go to CMS Page and choose Block" stepKey="commentGoToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandGroupAddContent">
            <argument name="group" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStageAfterDrop">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createPreReqBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Verify Right Alignment On Stage - Before Save -->
        <comment userInput="Verify right alignment on stage before save" stepKey="commentVerifyRightAlignmentOnStageBeforeSave"/>
        <seeElement selector="({{ImageOnStorefront.alignment('1', PageBuilderAdvancedAlignmentPropertyRight.value)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeImageAlignmentRightBeforeSave"/>
        <actionGroup ref="verifyAlignmentRightInBlock" stepKey="verifyAlignmentRightInBlockBeforeSave">
            <argument name="container" value="{{RowOnStorefront.innerCSS}}"/>
            <argument name="content" value="{{ImageOnStorefront.imageElementCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingProperty10"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStageAfterSave"/>
        <!-- Verify Right Alignment On Stage - After Save -->
        <comment userInput="Verify right alignment on stage after save" stepKey="commentVerifyRightAlignmentOnStageAfterSave"/>
        <seeElement selector="({{ImageOnStorefront.alignment('1', PageBuilderAdvancedAlignmentPropertyRight.value)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeImageAlignmentRightAfterSave"/>
        <actionGroup ref="verifyAlignmentRightInBlock" stepKey="verifyAlignmentRightInBlockAfterSave">
            <argument name="container" value="{{RowOnStorefront.innerCSS}}"/>
            <argument name="content" value="{{ImageOnStorefront.imageElementCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingProperty10"/>
        </actionGroup>
        <amOnPage url="$$createCMSPage.identifier$$" stepKey="amOnStorefrontCMSPage" />
        <waitForPageLoad stepKey="waitForCmsPageLoad"/>
        <!-- Verify Right Alignment In Storefront -->
        <comment userInput="Verify right alignment in storefront" stepKey="commentVerifyRightAlignmentInStorefront"/>
        <seeElement selector="({{ImageOnStorefront.alignment('1', PageBuilderAdvancedAlignmentPropertyRight.value)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeImageAlignmentRightStorefront"/>
        <actionGroup ref="verifyAlignmentRightInBlock" stepKey="verifyAlignmentRightInBlockStorefront">
            <argument name="container" value="{{RowOnStorefront.innerCSS}}"/>
            <argument name="content" value="{{ImageOnStorefront.imageElementCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingProperty10"/>
        </actionGroup>
    </test>
    <test name="BlockRowContentIsVerticallyAligned">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block"/>
            <title value="Row Content Can Be Vertically Aligned In Block"/>
            <description value="A user can vertically align row contents in a Block"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-4280"/>
            <testCaseId value="MC-5061"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-row"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin" />
            <createData entity="_defaultBlock" stepKey="createPreReqBlock" />
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage">
                <argument name="CMSBlockPage" value="$$createPreReqBlock$$" />
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createPreReqBlock" stepKey="deletePreReqBlock" />
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Edit Block and configure Row - Vertical Align Bottom -->
        <comment userInput="Edit Block and configure row vertical align bottom" stepKey="commentConfigureRowVerticalAlignBottom"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterMinHeightProperty">
            <argument name="property" value="PageBuilderMinHeightProperty_500"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterVerticalAlignmentBottomProperty">
            <argument name="property" value="PageBuilderVerticalAlignmentPropertyBottom"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsInBlock"/>
        <click selector="{{CmsNewBlockBlockActionsSection.savePage}}" stepKey="saveBlock"/>
        <waitForPageLoad time="30" stepKey="waitForStageToLoad"/>
        <!-- Go to CMS Page and choose Block -->
        <comment userInput="Go to CMS Page and choose Block" stepKey="commentGoToCMSPage"/>
        <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle1">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandGroupAddContent">
            <argument name="group" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDrop">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createPreReqBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Verify Vertical Alignment On Stage - Before Save -->
        <comment userInput="Verify min height and vertical alignment on stage before save" stepKey="commentVerifyMinHeightAndVerticalAlignmentOnStageBeforeSave"/>
        <seeElement selector="({{RowOnStorefront.rowStyle('1', PageBuilderMinHeightProperty_500.style)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeRowMinHeightBeforeSave"/>
        <seeElement selector="({{RowOnStorefront.rowStyle('1', PageBuilderVerticalAlignmentPropertyBottom.style)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeRowVerticalAlignmentBottomBeforeSave"/>
        <actionGroup ref="verifyVerticalAlignmentBottomInBlock" stepKey="verifyBottomAlignmentBeforeSave">
            <argument name="container" value="RowOnStorefront"/>
            <argument name="content" value="HtmlOnStorefront"/>
            <argument name="padding" value="PageBuilderPaddingProperty10"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500.value"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStageAfterSave"/>
        <!-- Verify Vertical Alignment On Stage - After Save -->
        <comment userInput="Verify min height and vertical alignment on stage after save" stepKey="commentVerifyMinHeightAndVerticalAlignmentOnStageAfterSave"/>
        <seeElement selector="({{RowOnStorefront.rowStyle('1', PageBuilderMinHeightProperty_500.style)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeRowMinHeightAfterSave"/>
        <seeElement selector="({{RowOnStorefront.rowStyle('1', PageBuilderVerticalAlignmentPropertyBottom.style)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeRowVerticalAlignmentBottomAfterSave"/>
        <actionGroup ref="verifyVerticalAlignmentBottomInBlock" stepKey="verifyBottomAlignmentAfterSave">
            <argument name="container" value="RowOnStorefront"/>
            <argument name="content" value="HtmlOnStorefront"/>
            <argument name="padding" value="PageBuilderPaddingProperty10"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500.value"/>
        </actionGroup>
        <!-- Verify Min Height and Vertical Alignment In Storefront -->
        <comment userInput="Verify min height and vertical alignment in storefront" stepKey="commentVerifyMinHeightAndVerticalAlignmentInStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <seeElement selector="({{RowOnStorefront.rowStyle('1', PageBuilderMinHeightProperty_500.style)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeRowMinHeightStorefront"/>
        <seeElement selector="({{RowOnStorefront.rowStyle('1', PageBuilderVerticalAlignmentPropertyBottom.style)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeRowVerticalAlignmentBottomStorefront"/>
        <actionGroup ref="verifyVerticalAlignmentBottomInBlock" stepKey="verifyBottomAlignmentStorefront">
            <argument name="container" value="RowOnStorefront"/>
            <argument name="content" value="HtmlOnStorefront"/>
            <argument name="padding" value="PageBuilderPaddingProperty10"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500.value"/>
        </actionGroup>
    </test>
    <test name="BlockRowContainedAppearanceHasEqualWidthToContents">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block"/>
            <title value="Row contained appearance has equal width to contents in Block"/>
            <description value="A user can see a row contained appearance has equal width to contents in a Block"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-5432"/>
            <testCaseId value="MC-5958"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-rowAppearances"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin" />
            <createData entity="_defaultBlock" stepKey="createPreReqBlock" />
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage">
                <argument name="CMSBlockPage" value="$$createPreReqBlock$$" />
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createPreReqBlock" stepKey="deletePreReqBlock" />
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Edit Block and configure Row -->
        <comment userInput="Edit Block and configure Row" stepKey="commentConfigureRowInBlock"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterRowAppearance">
            <argument name="property" value="PageBuilderRowAppearance_Contained"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsInBlock"/>
        <!-- Edit Block and configure Banner -->
        <comment userInput="Edit Block and configure Banner" stepKey="commentConfigureBannerInBlock"/>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandGroupElements">
            <argument name="group" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="containerTargetType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBannerMinHeight">
            <argument name="property" value="PageBuilderBannerMinimumHeightProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Plaintext_Green"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsInBlock2"/>
        <click selector="{{CmsNewBlockBlockActionsSection.savePage}}" stepKey="saveBlock"/>
        <waitForPageLoad time="30" stepKey="waitForStageToLoad"/>
        <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Go to CMS page and choose Block -->
        <comment userInput="Go to CMS page and choose Block" stepKey="commentGoToCMSPage"/>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle1">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandGroupAddContent">
            <argument name="group" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDrop">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createPreReqBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate width before save -->
        <comment userInput="Validate width before save" stepKey="commentValidateBeforeSave"/>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthBeforeSave">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceContainedCSS}}"/>
            <argument name="containerIndex" value="2"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
         <!-- Validate width after save -->
        <comment userInput="Validate width after save" stepKey="commentValidateAfterSave"/>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthAfterSave">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceContainedCSS}}"/>
            <argument name="containerIndex" value="2"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <!-- Validate width storefront -->
        <comment userInput="Validate width storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthStorefront">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceContainedCSS}}"/>
            <argument name="containerIndex" value="2"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
    </test>
    <test name="BlockRowFullWidthAppearanceHasEqualWidthToContents" extends="BlockRowContainedAppearanceHasEqualWidthToContents">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block"/>
            <title value="Row full width appearance has equal width to contents in Block"/>
            <description value="A user can see a row full width appearance has equal width to contents in a Block"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-5432"/>
            <testCaseId value="MC-6012"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-rowAppearances"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterRowAppearance">
            <argument name="property" value="PageBuilderRowAppearance_FullWidth"/>
        </actionGroup>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthBeforeSave">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceFullWidthCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthAfterSave">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceFullWidthCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthStorefront">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceFullWidthCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
    </test>
    <test name="BlockRowFullBleedAppearanceHasEqualWidthToContents" extends="BlockRowContainedAppearanceHasEqualWidthToContents">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block"/>
            <title value="Row full bleed appearance has equal width to contents in Block"/>
            <description value="A user can see a row full bleed appearance has equal width to contents in a Block"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-5432"/>
            <testCaseId value="MC-6011"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-rowAppearances"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterRowAppearance">
            <argument name="property" value="PageBuilderRowAppearance_FullBleed"/>
        </actionGroup>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthBeforeSave">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceFullBleedCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthAfterSave">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceFullBleedCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthStorefront">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceFullBleedCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
    </test>
</tests>
