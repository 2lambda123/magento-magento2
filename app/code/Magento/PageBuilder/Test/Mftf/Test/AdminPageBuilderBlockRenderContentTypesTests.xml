<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="BlockRenderTabsThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Tabs Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the Tabs content type through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-3742"/>
            <useCaseId value="MC-1405"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-tabs"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <resizeWindow width="1280" height="1024" stepKey="resizeWindowToDesktop"/>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="navigateToMediaGallery" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="navigateToDesktopImageFolder">
                <argument name="FolderName" value="{{PageBuilderBackgroundImage_JPG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="deleteBackgroundImage">
                <argument name="Image" value="PageBuilderBackgroundImage_JPG"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="deleteMobileBackgroundImage">
                <argument name="Image" value="PageBuilderBackgroundMobileImage_GIF"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Tabs -->
        <comment userInput="Add Tabs" stepKey="commentAddTabs"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderTabsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragTabsIntoStage">
            <argument name="contentType" value="PageBuilderTabsContentType"/>
        </actionGroup>
        <actionGroup ref="addChildContentTypeFromOptionMenu" stepKey="addChildContentType">
            <argument name="contentType" value="PageBuilderTabsContentType"/>
        </actionGroup>
        <!-- Edit Tab Group -->
        <comment userInput="Edit Tab Group" stepKey="commentEditTabs"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuTabs">
            <argument name="contentType" value="PageBuilderTabsContentType"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelFieldGeneral" stepKey="enterDefaultActiveTab2">
            <argument name="property" value="PageBuilderTabsDefaultActiveTab2"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterTabsMinHeight">
            <argument name="property" value="PageBuilderTabsDefinedMinHeight"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterNavAlignmentCenter">
            <argument name="property" value="PageBuilderTabsAlignmentCenter"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsTabs"/>
        <!-- Edit Tab 2 -->
        <comment userInput="Edit Tab 2" stepKey="commentEditTab2"/>
        <actionGroup ref="openPageBuilderEditPanelSmallByIndex" stepKey="openEditPanelTab2">
            <argument name="section" value="TabOnStage"/>
            <argument name="targetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setTabNameTab2">
            <argument name="property" value="PageBuilderTabNameRandom1"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setBackgroundColorTab2">
            <argument name="property" value="PageBuilderBackgroundColor_Hex_Grey"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachFileSlideOutPropertyTab2">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachFileSlideOutPropertyMobileTab2">
            <argument name="property" value="PageBuilderBackgroundMobileImage_GIF"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setBackgroundSizeTab2">
            <argument name="property" value="PageBuilderBackgroundSize_Auto"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="setBackgroundPositionTab2">
            <argument name="property" value="PageBuilderBackgroundPosition_Center"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="setBackgroundAttachmentTab2">
            <argument name="property" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setBackgroundRepeatTab2">
            <argument name="property" value="PageBuilderBackgroundRepeat_Enabled"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setMinHeightTab2">
            <argument name="property" value="PageBuilderMinHeightProperty_200"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setVerticalAlignmentTab2">
            <argument name="property" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsTab2"/>
        <!-- Add Divider To Tab 2 -->
        <comment userInput="Add Divider To Tab 2" stepKey="commentAddDividerToTab2"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelDividerMenuSection">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragDividerToTab2">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
            <argument name="containerTargetType" value="PageBuilderTabContentType"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <!-- Edit Tab 1 -->
        <comment userInput="Edit Tab 1" stepKey="commentEditTab1"/>
        <actionGroup ref="openPageBuilderEditPanelSmallByIndex" stepKey="openEditPanelTab1">
            <argument name="section" value="TabOnStage"/>
            <argument name="targetIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setBackgroundColorTab1">
            <argument name="property" value="PageBuilderBackgroundColor_RGB_Blue"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setMinHeightTab1">
            <argument name="property" value="PageBuilderMinHeightProperty_Empty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsTab1"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeElement selector="{{TabOnStage.tabHeaderItemActive('2')}}" stepKey="seeTab2ActiveCMSBlockStage"/>
        <seeElement selector="{{TabsOnStage.tabsContentMinHeight(PageBuilderTabsDefinedMinHeight.value)}}" stepKey="seeTabsMinHeightCMSBlockStage"/>
        <seeElement selector="{{TabsOnStage.tabsNavAligned(PageBuilderTabsAlignmentCenter.value)}}" stepKey="seeTabsNavAlignedCenterCMSBlockStage"/>
        <see selector="{{TabOnStage.tabHeader('2')}}" userInput="{{PageBuilderTabNameRandom1.value}}" stepKey="seeTab2TitleCMSBlockStage"/>
        <actionGroup ref="validateContentTypeHeightGreaterThanMinHeight" stepKey="validateTab2MinHeightCMSBlockStage">
            <argument name="content" value="{{TabOnStage.tabContentCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundAttributes" stepKey="validateTab2BackgroundAttributesCMSBlockStage">
            <argument name="section" value="TabOnStage"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Hex_Grey"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImage" stepKey="validateTab2BackgroundImageCMSBlockStage">
            <argument name="section" value="TabOnStage"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <seeElement selector="{{TabOnStage.verticalAlignContainer('2', PageBuilderVerticalAlignmentPropertyCenter.value)}}" stepKey="seeTab2VerticalAlignmentCMSBlockStage"/>
        <actionGroup ref="switchTabs" stepKey="switchTabsCMSBlockStage">
            <argument name="section" value="TabOnStage"/>
            <argument name="from" value="2"/>
            <argument name="to" value="1"/>
        </actionGroup>
        <seeElement selector="{{TabOnStage.backgroundColor('1', PageBuilderBackgroundColor_RGB_Blue.rgb)}}" stepKey="seeTab1BackgroundColorCMSBlockStage"/>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateTab1MinHeightCMSBlockStage">
            <argument name="content" value="{{TabOnStage.tabContentCSS}}"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{TabOnStorefront.tabHeaderItemActive('2')}}" stepKey="seeTab2ActiveCMSPageStage"/>
        <seeElement selector="{{TabsOnFrontend.tabsContentMinHeight(PageBuilderTabsDefinedMinHeight.value)}}" stepKey="seeTabsMinHeightCMSPageStage"/>
        <seeElement selector="{{TabsOnFrontend.tabsNavAligned(PageBuilderTabsAlignmentCenter.value)}}" stepKey="seeTabsNavAlignedCenterCMSPageStage"/>
        <see selector="{{TabOnStorefront.tabHeader('2')}}" userInput="{{PageBuilderTabNameRandom1.value}}" stepKey="seeTab2TitleCMSPageStage"/>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateTab2MinHeightCMSPageStage">
            <argument name="content" value="{{TabOnStorefront.tabContentCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateTab2BackgroundAttributesCMSPageStage">
            <argument name="section" value="TabOnStorefront"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Hex_Grey"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateTab2BackgroundImageCMSPageStage">
            <argument name="section" value="TabOnStorefront"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <seeElement selector="{{TabOnStorefront.verticalAlignContainer('2', PageBuilderVerticalAlignmentPropertyCenter.value)}}" stepKey="seeTab2VerticalAlignmentCMSPageStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToStoreFront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <waitForElementVisible selector="{{TabOnStorefront.tabHeaderItemActive('2')}}" stepKey="waitForTabsToRenderProperly"/>
        <seeElement selector="{{TabOnStorefront.tabHeaderItemActive('2')}}" stepKey="seeTab2ActiveCMSPageStorefront"/>
        <seeElement selector="{{TabsOnFrontend.tabsContentMinHeight(PageBuilderTabsDefinedMinHeight.value)}}" stepKey="seeTabsMinHeightCMSPageStorefront"/>
        <seeElement selector="{{TabsOnFrontend.tabsNavAligned(PageBuilderTabsAlignmentCenter.value)}}" stepKey="seeTabsNavAlignedCenterCMSPageStorefront"/>
        <see selector="{{TabOnStorefront.tabHeader('2')}}" userInput="{{PageBuilderTabNameRandom1.value}}" stepKey="seeTab2TitleCMSPageStorefront"/>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateTab2MinHeightCMSPageStorefront">
            <argument name="content" value="{{TabOnStorefront.tabContentCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateTab2BackgroundAttributesCMSPageStorefront">
            <argument name="section" value="TabOnStorefront"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Hex_Grey"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateTab2BackgroundImageCMSPageStorefront">
            <argument name="section" value="TabOnStorefront"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <seeElement selector="{{TabOnStorefront.verticalAlignContainer('2', PageBuilderVerticalAlignmentPropertyCenter.value)}}" stepKey="seeTab2VerticalAlignmentCMSPageStorefront"/>
        <actionGroup ref="switchTabs" stepKey="switchTabsCMSPageStorefront">
            <argument name="section" value="TabOnStorefront"/>
            <argument name="from" value="2"/>
            <argument name="to" value="1"/>
        </actionGroup>
        <seeElement selector="{{TabOnStorefront.backgroundColor('1', PageBuilderBackgroundColor_RGB_Blue.rgb)}}" stepKey="seeTab1BackgroundColorCMSPageStorefront"/>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateTab1MinHeightCMSPageStorefront">
            <argument name="content" value="{{TabOnStorefront.tabContentCSS}}"/>
            <argument name="height" value="PageBuilderTabsDefinedMinHeight"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront Mobile -->
        <comment userInput="Validate CMS Page Storefront Mobile" stepKey="commentValidateCMSPageStorefrontMobile"/>
        <resizeWindow width="767" height="1000" stepKey="resizeWindowToMobile"/>
        <actionGroup ref="switchTabs" stepKey="switchTabsCMSPageStorefrontMobile">
            <argument name="section" value="TabOnStorefront"/>
            <argument name="from" value="1"/>
            <argument name="to" value="2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateTab2BackgroundImageCMSPageStorefrontMobile">
            <argument name="section" value="TabOnStorefront"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundMobileImage_GIF"/>
            <argument name="index" value="2"/>
        </actionGroup>
    </test>
    <test name="AddBlockWithEmptyImageToCmsPage">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Add Block with Empty Image to CMS Page"/>
            <description value="Verify that admin are able to add a block instance type with empty image to Block Content Block and see it on frontend and on the stage"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-3740"/>
            <useCaseId value="MC-1405"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-image"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="_defaultCmsPage" stepKey="createCMSPage"/>
            <createData entity="_defaultBlock" stepKey="createCMSBlock"/>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deletePreReqBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deletePreReqCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!--Add Image to block-->
        <comment userInput="Adding image to block" stepKey="commentAddingImageToBlock"/>
        <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
            <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderImageContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragImageIntoStage">
            <argument name="contentType" value="PageBuilderImageContentType"/>
        </actionGroup>
        <click selector="{{BlockNewPagePageActionsSection.saveBlock}}" stepKey="clickSaveBlock"/>
        <waitForPageLoad stepKey="waitForPageToLoad"/>
        <!--User goes to created CMS page-->
        <comment userInput="User goes to created CMS page" stepKey="NavigateToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDrop">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <waitForElementVisible selector="{{BlockOnForm.title('$$createCMSBlock.title$$')}}" stepKey="waitToSeeBlockTitle"/>
        <seeElement selector="{{BlockOnForm.title('$$createCMSBlock.title$$')}}" stepKey="seeBlockTitleOnForm"/>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings2"/>
        <!--Check that image was not rendered on the stage-->
        <comment userInput="Check that image was not rendered on the stage" stepKey="commentCheckingThatImageIsNotRenderedOnTheStage"/>
        <executeJS function="return jQuery('.pagebuilder-block').css('height');" stepKey="height"/>
        <assertGreaterThanOrEqual stepKey="assertElementHight">
            <actualResult type="variable">height</actualResult>
            <expectedResult type="string">10px</expectedResult>
        </assertGreaterThanOrEqual>
        <seeElementInDOM selector="{{ImageOnStorefront.imageDisplay}}" stepKey="seeThatEmptyImageExistsInDomOnStage"/>
        <dontSeeElement selector="{{ImageOnStorefront.imageDisplay}}" stepKey="notSeeImageOnStage"/>
        <actionGroup ref="openOptionsMenu" stepKey="openEditMenuOnStage3">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <seeElement selector="{{BlockOnStage.overlay('1')}}" stepKey="seeOverlayOnBlock"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <amOnPage url="$$createCMSPage.identifier$$" stepKey="amOnPageTestPage"/>
        <!--Verify block on the frontend-->
        <comment userInput="Verify Block On Store front" stepKey="commentCheckingThatImageIsNotRenderedOnTheStoreFront"/>
        <seeElementInDOM selector="{{ImageOnStorefront.imageDisplay}}" stepKey="seeThatEmptyImageExistsInDomOnStorefront"/>
        <dontSeeElement selector="{{ImageOnStorefront.imageDisplay}}" stepKey="notSeeImageOnFrontend"/>
    </test>
    <test name="BlockImageIsRightAligned">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Image Can Be Right Aligned In Block"/>
            <description value="A user can right align an image in a Block"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-4293"/>
            <testCaseId value="MC-5174"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-image"/>
        </annotations>
        <before>
            <createData entity="_defaultBlock" stepKey="createCMSBlock"/>
            <createData entity="_defaultCmsPage" stepKey="createCMSPage"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deletePreReqBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deletePreReqCMSPage"/>
            <actionGroup ref="navigateToMediaGallery" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="NavigateToFolder">
                <argument name="FolderName" value="{{PageBuilderImageProperty_PNG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage">
                <argument name="Image" value="PageBuilderImageProperty_PNG"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Go to edit page of Block and configure Image -->
        <comment userInput="Go to edit page of Block and configure image" stepKey="commentGoToBlockEditPage"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderImageContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragImageIntoStage">
            <argument name="contentType" value="PageBuilderImageContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderImageContentType"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutPropertyGeneral" stepKey="attachImageFile">
            <argument name="property" value="PageBuilderImageProperty_PNG"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterImageCaptionProperty">
            <argument name="property" value="PageBuilderImageCaptionProperty"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyRight"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsInBlock"/>
        <click selector="{{BlockNewPagePageActionsSection.saveBlock}}" stepKey="clickSaveBlock"/>
        <waitForPageLoad time="30" stepKey="waitForStageToLoad"/>
        <!-- Go to CMS Page and choose Block -->
        <comment userInput="Go to CMS Page and choose Block" stepKey="commentGoToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStageAfterDrop">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Verify Right Alignment On Stage - Before Save -->
        <comment userInput="Verify right alignment on stage before save" stepKey="commentVerifyRightAlignmentOnStageBeforeSave"/>
        <seeElement selector="({{ImageOnStorefront.alignment('1', PageBuilderAdvancedAlignmentPropertyRight.value)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeImageAlignmentRightBeforeSave"/>
        <actionGroup ref="verifyAlignmentRightInBlock" stepKey="verifyAlignmentRightInBlockBeforeSave">
            <argument name="container" value="{{RowOnStorefront.innerCSS}}"/>
            <argument name="content" value="{{ImageOnStorefront.imageElementCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingProperty10"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStageAfterSave"/>
        <!-- Verify Right Alignment On Stage - After Save -->
        <comment userInput="Verify right alignment on stage after save" stepKey="commentVerifyRightAlignmentOnStageAfterSave"/>
        <seeElement selector="({{ImageOnStorefront.alignment('1', PageBuilderAdvancedAlignmentPropertyRight.value)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeImageAlignmentRightAfterSave"/>
        <actionGroup ref="verifyAlignmentRightInBlock" stepKey="verifyAlignmentRightInBlockAfterSave">
            <argument name="container" value="{{RowOnStorefront.innerCSS}}"/>
            <argument name="content" value="{{ImageOnStorefront.imageElementCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingProperty10"/>
        </actionGroup>
        <amOnPage url="$$createCMSPage.identifier$$" stepKey="amOnStorefrontCMSPage"/>
        <waitForPageLoad stepKey="waitForCmsPageLoad"/>
        <!-- Verify Right Alignment In Storefront -->
        <comment userInput="Verify right alignment in storefront" stepKey="commentVerifyRightAlignmentInStorefront"/>
        <seeElement selector="({{ImageOnStorefront.alignment('1', PageBuilderAdvancedAlignmentPropertyRight.value)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeImageAlignmentRightStorefront"/>
        <actionGroup ref="verifyAlignmentRightInBlock" stepKey="verifyAlignmentRightInBlockStorefront">
            <argument name="container" value="{{RowOnStorefront.innerCSS}}"/>
            <argument name="content" value="{{ImageOnStorefront.imageElementCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingProperty10"/>
        </actionGroup>
    </test>
    <test name="BlockRowContentIsVerticallyAligned">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Row Content Can Be Vertically Aligned In Block"/>
            <description value="A user can vertically align row contents in a Block"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-4280"/>
            <testCaseId value="MC-5061"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-row"/>
        </annotations>
        <before>
            <createData entity="_defaultBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deletePreReqBlock"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Edit Block and configure Row - Vertical Align Bottom -->
        <comment userInput="Edit Block and configure row vertical align bottom" stepKey="commentConfigureRowVerticalAlignBottom"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterMinHeightProperty">
            <argument name="property" value="PageBuilderMinHeightProperty_500"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterVerticalAlignmentBottomProperty">
            <argument name="property" value="PageBuilderVerticalAlignmentPropertyBottom"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsInBlock"/>
        <click selector="{{CmsNewBlockBlockActionsSection.savePage}}" stepKey="saveBlock"/>
        <waitForPageLoad time="30" stepKey="waitForStageToLoad"/>
        <!-- Go to CMS Page and choose Block -->
        <comment userInput="Go to CMS Page and choose Block" stepKey="commentGoToCMSPage"/>
        <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle1">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDrop">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Verify Vertical Alignment On Stage - Before Save -->
        <comment userInput="Verify min height and vertical alignment on stage before save" stepKey="commentVerifyMinHeightAndVerticalAlignmentOnStageBeforeSave"/>
        <seeElement selector="({{RowOnStorefront.rowStyle('1', PageBuilderMinHeightProperty_500.style)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeRowMinHeightBeforeSave"/>
        <seeElement selector="({{RowOnStorefront.rowStyle('1', PageBuilderVerticalAlignmentPropertyBottom.style)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeRowVerticalAlignmentBottomBeforeSave"/>
        <actionGroup ref="verifyVerticalAlignmentBottomInBlock" stepKey="verifyBottomAlignmentBeforeSave">
            <argument name="container" value="RowOnStorefront"/>
            <argument name="content" value="HtmlOnStorefront"/>
            <argument name="padding" value="PageBuilderPaddingProperty10"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500.value"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStageAfterSave"/>
        <!-- Verify Vertical Alignment On Stage - After Save -->
        <comment userInput="Verify min height and vertical alignment on stage after save" stepKey="commentVerifyMinHeightAndVerticalAlignmentOnStageAfterSave"/>
        <seeElement selector="({{RowOnStorefront.rowStyle('1', PageBuilderMinHeightProperty_500.style)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeRowMinHeightAfterSave"/>
        <seeElement selector="({{RowOnStorefront.rowStyle('1', PageBuilderVerticalAlignmentPropertyBottom.style)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeRowVerticalAlignmentBottomAfterSave"/>
        <actionGroup ref="verifyVerticalAlignmentBottomInBlock" stepKey="verifyBottomAlignmentAfterSave">
            <argument name="container" value="RowOnStorefront"/>
            <argument name="content" value="HtmlOnStorefront"/>
            <argument name="padding" value="PageBuilderPaddingProperty10"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500.value"/>
        </actionGroup>
        <!-- Verify Min Height and Vertical Alignment In Storefront -->
        <comment userInput="Verify min height and vertical alignment in storefront" stepKey="commentVerifyMinHeightAndVerticalAlignmentInStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <seeElement selector="({{RowOnStorefront.rowStyle('1', PageBuilderMinHeightProperty_500.style)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeRowMinHeightStorefront"/>
        <seeElement selector="({{RowOnStorefront.rowStyle('1', PageBuilderVerticalAlignmentPropertyBottom.style)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeRowVerticalAlignmentBottomStorefront"/>
        <actionGroup ref="verifyVerticalAlignmentBottomInBlock" stepKey="verifyBottomAlignmentStorefront">
            <argument name="container" value="RowOnStorefront"/>
            <argument name="content" value="HtmlOnStorefront"/>
            <argument name="padding" value="PageBuilderPaddingProperty10"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500.value"/>
        </actionGroup>
    </test>
    <test name="BlockRowContainedAppearanceHasEqualWidthToContents">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Row contained appearance has equal width to contents in Block"/>
            <description value="A user can see a row contained appearance has equal width to contents in a Block"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-5432"/>
            <testCaseId value="MC-5958"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-rowAppearances"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <createData entity="_defaultBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deletePreReqBlock"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Edit Block and configure Row -->
        <comment userInput="Edit Block and configure Row" stepKey="commentConfigureRowInBlock"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterRowAppearance">
            <argument name="property" value="PageBuilderRowAppearance_Contained"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsInBlock"/>
        <!-- Edit Block and configure Banner -->
        <comment userInput="Edit Block and configure Banner" stepKey="commentConfigureBannerInBlock"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandMenuSectionElements">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="containerTargetType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBannerMinHeight">
            <argument name="property" value="PageBuilderBannerMinimumHeightProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Plaintext_Green"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsInBlock2"/>
        <click selector="{{CmsNewBlockBlockActionsSection.savePage}}" stepKey="saveBlock"/>
        <waitForPageLoad time="30" stepKey="waitForStageToLoad"/>
        <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Go to CMS page and choose Block -->
        <comment userInput="Go to CMS page and choose Block" stepKey="commentGoToCMSPage"/>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle1">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDrop">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate width before save -->
        <comment userInput="Validate width before save" stepKey="commentValidateBeforeSave"/>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthBeforeSave">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceContainedCSS}}"/>
            <argument name="containerIndex" value="2"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
         <!-- Validate width after save -->
        <comment userInput="Validate width after save" stepKey="commentValidateAfterSave"/>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthAfterSave">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceContainedCSS}}"/>
            <argument name="containerIndex" value="2"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <!-- Validate width storefront -->
        <comment userInput="Validate width storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthStorefront">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceContainedCSS}}"/>
            <argument name="containerIndex" value="2"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
    </test>
    <test name="BlockRowFullWidthAppearanceHasEqualWidthToContents" extends="BlockRowContainedAppearanceHasEqualWidthToContents">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Row full width appearance has equal width to contents in Block"/>
            <description value="A user can see a row full width appearance has equal width to contents in a Block"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-5432"/>
            <testCaseId value="MC-6012"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-rowAppearances"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterRowAppearance">
            <argument name="property" value="PageBuilderRowAppearance_FullWidth"/>
        </actionGroup>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthBeforeSave">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceFullWidthCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthAfterSave">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceFullWidthCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthStorefront">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceFullWidthCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
    </test>
    <test name="BlockRowFullBleedAppearanceHasEqualWidthToContents" extends="BlockRowContainedAppearanceHasEqualWidthToContents">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Row full bleed appearance has equal width to contents in Block"/>
            <description value="A user can see a row full bleed appearance has equal width to contents in a Block"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-5432"/>
            <testCaseId value="MC-6011"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-rowAppearances"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterRowAppearance">
            <argument name="property" value="PageBuilderRowAppearance_FullBleed"/>
        </actionGroup>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthBeforeSave">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceFullBleedCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthAfterSave">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceFullBleedCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthStorefront">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceFullBleedCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
    </test>
    <test name="BlockRenderHeadingThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Heading Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the Heading content type through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-13783"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-heading"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Heading -->
        <comment userInput="Add Heading" stepKey="commentAddHeading"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragHeadingIntoStage">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="clickOutsideLiveEditHeading" stepKey="clickOutsideLiveEditHeading">
            <argument name="index" value="1"/>
        </actionGroup>
        <!-- Edit Heading -->
        <comment userInput="Edit Heading" stepKey="commentEditHeading"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuHeading">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setHeadingText">
            <argument name="property" value="PageBuilderHeadingTextProperty"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelFieldGeneral" stepKey="setHeadingTypeH1">
            <argument name="property" value="PageBuilderHeadingTypeProperty_H1"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsHeading"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeElement selector="{{HeadingOnStage.headingType(PageBuilderHeadingTypeProperty_H1.value, '1')}}" stepKey="seeHeadingStyleCMSBlockStage"/>
        <seeElement selector="{{HeadingOnStage.headingText(PageBuilderHeadingTypeProperty_H1.value, PageBuilderHeadingTextProperty.value, '1')}}" stepKey="seeHeadingTextCMSBlockStage"/>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{HeadingOnStorefront.headingType(PageBuilderHeadingTypeProperty_H1.value, '1')}}" stepKey="seeHeadingStyleCMSPageStage"/>
        <seeElement selector="{{HeadingOnStorefront.headingText(PageBuilderHeadingTypeProperty_H1.value, PageBuilderHeadingTextProperty.value, '1')}}" stepKey="seeHeadingTextCMSPageStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{HeadingOnStorefront.headingType(PageBuilderHeadingTypeProperty_H1.value, '1')}}" stepKey="seeHeadingStyleCMSPageStorefront"/>
        <seeElement selector="{{HeadingOnStorefront.headingText(PageBuilderHeadingTypeProperty_H1.value, PageBuilderHeadingTextProperty.value, '1')}}" stepKey="seeHeadingTextCMSPageStorefront"/>
    </test>
    <test name="BlockRenderDividerThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Divider Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the Divider content type through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-13784"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-divider"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Divider -->
        <comment userInput="Add Divider" stepKey="commentAddDivider"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragDividerIntoStage">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
        </actionGroup>
        <!-- Edit Divider -->
        <comment userInput="Edit Divider" stepKey="commentEditDivider"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuDivider">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setDividerLineColor">
            <argument name="property" value="PageBuilderDividerLineColor_Yellow"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setDividerLineThickness">
            <argument name="property" value="PageBuilderDividerLineThickness_10"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setDividerLineWidth">
            <argument name="property" value="PageBuilderDividerLineWidth_50"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsDivider"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeElement selector="{{DividerOnStage.color('1', PageBuilderDividerLineColor_Yellow.rgb)}}" stepKey="seeDividerColorCMSBlockStage"/>
        <seeElement selector="{{DividerOnStage.thickness('1', PageBuilderDividerLineThickness_10.value)}}" stepKey="seeDividerThicknessCMSBlockStage"/>
        <seeElement selector="{{DividerOnStage.width('1', PageBuilderDividerLineWidth_50.value)}}" stepKey="seeDividerWidthCMSBlockStage"/>
        <actionGroup ref="validateDividerWidthPercentage" stepKey="validateDividerWidthCMSBlockStage">
            <argument name="page" value="DividerOnStage"/>
            <argument name="dividerWidth" value="PageBuilderDividerLineWidth_50"/>
        </actionGroup>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{DividerOnStorefront.color('1', PageBuilderDividerLineColor_Yellow.rgb)}}" stepKey="seeDividerColorCMSPageStage"/>
        <seeElement selector="{{DividerOnStorefront.thickness('1', PageBuilderDividerLineThickness_10.value)}}" stepKey="seeDividerThicknessCMSPageStage"/>
        <seeElement selector="{{DividerOnStorefront.width('1', PageBuilderDividerLineWidth_50.value)}}" stepKey="seeDividerWidthCMSPageStage"/>
        <actionGroup ref="validateDividerWidthPercentage" stepKey="validateDividerWidthCMSPageStage">
            <argument name="page" value="DividerOnStorefront"/>
            <argument name="dividerWidth" value="PageBuilderDividerLineWidth_50"/>
            <argument name="expectedOffset" value="{{PageBuilderDividerLineThickness_10.value}}*2"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{DividerOnStorefront.color('1', PageBuilderDividerLineColor_Yellow.rgb)}}" stepKey="seeDividerColorCMSPageStorefront"/>
        <seeElement selector="{{DividerOnStorefront.thickness('1', PageBuilderDividerLineThickness_10.value)}}" stepKey="seeDividerThicknessCMSPageStorefront"/>
        <seeElement selector="{{DividerOnStorefront.width('1', PageBuilderDividerLineWidth_50.value)}}" stepKey="seeDividerWidthCMSPageStorefront"/>
        <actionGroup ref="validateDividerWidthPercentage" stepKey="validateDividerWidthCMSPageStorefront">
            <argument name="page" value="DividerOnStorefront"/>
            <argument name="dividerWidth" value="PageBuilderDividerLineWidth_50"/>
        </actionGroup>
    </test>
    <test name="BlockRenderButtonsThroughBlockContentTypeInlineNotSameSize">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Buttons Through Block Content Type: Inline and Not Same Size"/>
            <description value="Verify that users are able to successfully render and use the Buttons content type (inline and not same size) through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-13785"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-buttons"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Buttons -->
        <comment userInput="Add Buttons" stepKey="commentAddButtons"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderButtonsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragButtonsIntoStage">
            <argument name="contentType" value="PageBuilderButtonsContentType"/>
        </actionGroup>
        <actionGroup ref="unFocusOptionMenu" stepKey="unFocusOptionMenu">
            <argument name="contentType" value="PageBuilderButtonItemContentType"/>
        </actionGroup>
        <!-- Edit Button Group -->
        <comment userInput="Edit Button Group" stepKey="commentEditButtonGroup"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuButtons">
            <argument name="contentType" value="PageBuilderButtonsContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setAppearanceOption">
            <argument name="property" value="PageBuilderButtonGroupAppearance_Inline"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setSameSizeOption">
            <argument name="property" value="PageBuilderButtonGroupSameSize_Disabled"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsButtons"/>
        <!-- Edit Button Item -->
        <comment userInput="Edit Button Item" stepKey="commentEditButtonItem"/>
        <actionGroup ref="openPageBuilderEditPanelSmallByIndex" stepKey="openEditMenuOnStageButtonItem">
            <argument name="section" value="ButtonItemOnStage"/>
            <argument name="targetIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="fillButtonTextField">
            <argument name="property" value="PageBuilderButtonItemText_First"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelFieldGeneral" stepKey="fillButtonType">
            <argument name="property" value="PageBuilderButtonItemType_Secondary"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelLinkUrlField" stepKey="fillButtonLinkField">
            <argument name="property" value="PageBuilderButtonItemLink_NotSecure"/>
            <argument name="selection" value="{{ExternalLink.url}}"/>
            <argument name="newTab" value="PageBuilderButtonItemOpenInNewTab_False"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsButtonItem"/>
        <!-- Add 2nd Button Item -->
        <comment userInput="Add 2nd Button Item" stepKey="commentAddButtonItem"/>
        <actionGroup ref="duplicateSmallContentType" stepKey="duplicateSmallContentType">
            <argument name="section" value="ButtonItemOnStage"/>
            <argument name="targetIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="inlineEditButton" stepKey="inlineEditButton2">
            <argument name="text" value="PageBuilderButtonItemText_OneCharacter"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeNumberOfElements selector="{{ButtonItemOnStage.all}}" userInput="2" stepKey="see2ButtonsCMSBlockStage"/>
        <actionGroup ref="validateButtonItemContent" stepKey="validateButton1CMSBlockStage">
            <argument name="page" value="ButtonItemOnStage"/>
            <argument name="text" value="PageBuilderButtonItemText_First"/>
            <argument name="type" value="PageBuilderButtonItemType_Secondary"/>
            <argument name="url" value="PageBuilderButtonItemLink_NotSecure"/>
            <argument name="newTab" value="PageBuilderButtonItemOpenInNewTab_False"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemContent" stepKey="validateButton2CMSBlockStage">
            <argument name="page" value="ButtonItemOnStage"/>
            <argument name="text" value="PageBuilderButtonItemText_OneCharacter"/>
            <argument name="type" value="PageBuilderButtonItemType_Secondary"/>
            <argument name="url" value="PageBuilderButtonItemLink_NotSecure"/>
            <argument name="newTab" value="PageBuilderButtonItemOpenInNewTab_False"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateButtonGroupInlineAppearance" stepKey="validateButtonGroupAppearanceCMSBlockStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStage"/>
            <argument name="buttonItemPage" value="ButtonItemOnStage"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemsDifferentSizes" stepKey="validateButtonsSizesCMSBlockStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStage"/>
            <argument name="buttonItemPage" value="ButtonItemOnStage"/>
        </actionGroup>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeNumberOfElements selector="{{ButtonItemOnStorefront.all}}" userInput="2" stepKey="see2ButtonsCMSPageStage"/>
        <actionGroup ref="validateButtonItemContent" stepKey="validateButton1CMSPageStage">
            <argument name="page" value="ButtonItemOnStorefront"/>
            <argument name="text" value="PageBuilderButtonItemText_First"/>
            <argument name="type" value="PageBuilderButtonItemType_Secondary"/>
            <argument name="url" value="PageBuilderButtonItemLink_NotSecure"/>
            <argument name="newTab" value="PageBuilderButtonItemOpenInNewTab_False"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemContent" stepKey="validateButton2CMSPageStage">
            <argument name="page" value="ButtonItemOnStorefront"/>
            <argument name="text" value="PageBuilderButtonItemText_OneCharacter"/>
            <argument name="type" value="PageBuilderButtonItemType_Secondary"/>
            <argument name="url" value="PageBuilderButtonItemLink_NotSecure"/>
            <argument name="newTab" value="PageBuilderButtonItemOpenInNewTab_False"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateButtonGroupInlineAppearance" stepKey="validateButtonGroupAppearanceCMSPageStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemsDifferentSizes" stepKey="validateButtonsSizesCMSPageStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeNumberOfElements selector="{{ButtonItemOnStorefront.all}}" userInput="2" stepKey="see2ButtonsCMSPageStorefront"/>
        <actionGroup ref="validateButtonItemContent" stepKey="validateButton1CMSPageStorefront">
            <argument name="page" value="ButtonItemOnStorefront"/>
            <argument name="text" value="PageBuilderButtonItemText_First"/>
            <argument name="type" value="PageBuilderButtonItemType_Secondary"/>
            <argument name="url" value="PageBuilderButtonItemLink_NotSecure"/>
            <argument name="newTab" value="PageBuilderButtonItemOpenInNewTab_False"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemContent" stepKey="validateButton2CMSPageStorefront">
            <argument name="page" value="ButtonItemOnStorefront"/>
            <argument name="text" value="PageBuilderButtonItemText_OneCharacter"/>
            <argument name="type" value="PageBuilderButtonItemType_Secondary"/>
            <argument name="url" value="PageBuilderButtonItemLink_NotSecure"/>
            <argument name="newTab" value="PageBuilderButtonItemOpenInNewTab_False"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateButtonGroupInlineAppearance" stepKey="validateButtonGroupAppearanceCMSPageStorefront">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemsDifferentSizes" stepKey="validateButtonsSizesCMSPageStorefront">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <click selector="{{ButtonItemOnStorefront.buttonItemUrl('1', PageBuilderButtonItemLink_NotSecure.value)}}" stepKey="clickButtonCMSPageStorefront"/>
        <wait time="3" stepKey="waitArbitraryTimeForPotentialNavigationToOccurCMSPageStorefront"/>
        <seeCurrentUrlEquals url="{{PageBuilderButtonItemLink_NotSecure.value}}" stepKey="seeThatUrlIsChangedToButtonUrl"/>
    </test>
        <test name="BlockRenderButtonsThroughBlockContentTypeInlineSameSize" extends="BlockRenderButtonsThroughBlockContentTypeInlineNotSameSize">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Buttons Through Block Content Type: Inline and Same Size"/>
            <description value="Verify that users are able to successfully render and use the Buttons content type (inline and same size) through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-13927"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-buttons"/>
        </annotations>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setSameSizeOption">
            <argument name="property" value="PageBuilderButtonGroupSameSize_Enabled"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemsSameSize" stepKey="validateButtonsSizesCMSBlockStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemsSameSize" stepKey="validateButtonsSizesCMSPageStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemsSameSize" stepKey="validateButtonsSizesCMSPageStorefront">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
    </test>
    <test name="BlockRenderButtonsThroughBlockContentTypeStackedNotSameSize" extends="BlockRenderButtonsThroughBlockContentTypeInlineNotSameSize">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Buttons Through Block Content Type: Stacked and Not Same Size"/>
            <description value="Verify that users are able to successfully render and use the Buttons content type (stacked and not same size) through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-13928"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-buttons"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setAppearanceOption">
            <argument name="property" value="PageBuilderButtonGroupAppearance_Stacked"/>
        </actionGroup>
        <actionGroup ref="validateButtonGroupStackedAppearance" stepKey="validateButtonGroupAppearanceCMSBlockStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="validateButtonGroupStackedAppearance" stepKey="validateButtonGroupAppearanceCMSPageStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="validateButtonGroupStackedAppearance" stepKey="validateButtonGroupAppearanceCMSPageStorefront">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
    </test>
    <test name="BlockRenderButtonsThroughBlockContentTypeStackedSameSize" extends="BlockRenderButtonsThroughBlockContentTypeInlineNotSameSize">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Buttons Through Block Content Type: Stacked and Same Size"/>
            <description value="Verify that users are able to successfully render and use the Buttons content type (stacked and same size) through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-13929"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-buttons"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setAppearanceOption">
            <argument name="property" value="PageBuilderButtonGroupAppearance_Stacked"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setSameSizeOption">
            <argument name="property" value="PageBuilderButtonGroupSameSize_Enabled"/>
        </actionGroup>
        <actionGroup ref="validateButtonGroupStackedAppearance" stepKey="validateButtonGroupAppearanceCMSBlockStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemsSameSize" stepKey="validateButtonsSizesCMSBlockStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="validateButtonGroupStackedAppearance" stepKey="validateButtonGroupAppearanceCMSPageStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemsSameSize" stepKey="validateButtonsSizesCMSPageStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="validateButtonGroupStackedAppearance" stepKey="validateButtonGroupAppearanceCMSPageStorefront">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemsSameSize" stepKey="validateButtonsSizesCMSPageStorefront">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
    </test>
    <test name="BlockRenderHTMLThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render HTML Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the HTML content type through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-14806"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-html"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add HTML -->
        <comment userInput="Add HTML" stepKey="commentAddHTML"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderHtmlContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragHTMLIntoStage">
            <argument name="contentType" value="PageBuilderHtmlContentType"/>
        </actionGroup>
        <!-- Edit HTML -->
        <comment userInput="Edit HTML" stepKey="commentEditHTML"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuHtml">
            <argument name="contentType" value="PageBuilderHtmlContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelTextArea" stepKey="enterHtmlContent">
            <argument name="property" value="PageBuilderHtmlPropertyButton"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsHtml"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeElement selector="{{HtmlOnStage.base('1')}}" stepKey="seeHtmlBaseCMSBlockStage"/>
        <seeElement selector="{{HtmlOnStage.html('1', PageBuilderHtmlPropertyButton.selector)}}" stepKey="seeHtmlCMSBlockStage"/>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{HtmlOnStorefront.base('1')}}" stepKey="seeHtmlBaseCMSPageStage"/>
        <seeElement selector="{{HtmlOnStorefront.html('1', PageBuilderHtmlPropertyButton.selector)}}" stepKey="seeHtmlCMSPageStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{HtmlOnStorefront.base('1')}}" stepKey="seeHtmlBaseCMSPageStorefront"/>
        <seeElement selector="{{HtmlOnStorefront.html('1', PageBuilderHtmlPropertyButton.selectorOnFrontend)}}" stepKey="seeRenderedHtmlCMSPageStorefront"/>
        <click selector="{{HtmlOnStorefront.html('1', PageBuilderHtmlPropertyButton.selectorOnFrontend)}}" stepKey="clickRenderedHtmlButtonCMSPageStorefront"/>
        <wait time="3" stepKey="waitArbitraryTimeForPotentialNavigationToOccurCMSPageStorefront"/>
        <seeCurrentUrlEquals url="{{PageBuilderHtmlPropertyButton.url}}" stepKey="seeThatUrlIsChangedToHtmlLinkUrl"/>
    </test>
    <test name="BlockRenderVideoThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Video Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the video content type through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-14832"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-video"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Video -->
        <comment userInput="Add Video" stepKey="commentAddVideo"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderVideoContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragVideoIntoStage">
            <argument name="contentType" value="PageBuilderVideoContentType"/>
        </actionGroup>
        <!-- Edit Video -->
        <comment userInput="Edit Video" stepKey="commentEditVideo"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuVideo">
            <argument name="contentType" value="PageBuilderVideoContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterVideoUrlProperty">
            <argument name="property" value="PageBuilderVideoUrl_YouTube"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterVideoWidthProperty">
            <argument name="property" value="PageBuilderVideoWidth_500"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsVideo"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <actionGroup ref="validateVideo" stepKey="validateCMSBlockStage">
            <argument name="page" value="VideoOnStage"/>
            <argument name="url" value="PageBuilderVideoUrl_YouTube"/>
            <argument name="width" value="PageBuilderVideoWidth_500"/>
        </actionGroup>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <actionGroup ref="validateVideo" stepKey="validateCMSPageStage">
            <argument name="page" value="VideoOnStorefront"/>
            <argument name="url" value="PageBuilderVideoUrl_YouTube"/>
            <argument name="width" value="PageBuilderVideoWidth_500"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <actionGroup ref="validateVideo" stepKey="validateCMSPageStorefront">
            <argument name="page" value="VideoOnStorefront"/>
            <argument name="url" value="PageBuilderVideoUrl_YouTube"/>
            <argument name="width" value="PageBuilderVideoWidth_500"/>
        </actionGroup>
    </test>
    <test name="BlockRenderBlockThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Block Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the block content type through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-14834"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <createData entity="_defaultBlock" stepKey="createPreReqBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createPreReqBlock" stepKey="deletePreReqBlock"/>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Block -->
        <comment userInput="Add Block" stepKey="commentAddBlock"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <!-- Edit Block -->
        <comment userInput="Edit Block" stepKey="commentEditBlock"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createPreReqBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <actionGroup ref="verifyBlockOnStage" stepKey="verifyBlockCMSBlockStage">
            <argument name="block" value="$$createPreReqBlock$$"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoPageStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInPageGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="savePageEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{BlockOnStage.base('1')}}" stepKey="seeBlockOnCMSPageStage"/>
        <see selector="{{BlockOnStage.content('1')}}" userInput="$$createPreReqBlock.content$$" stepKey="seeBlockContentOnCMSPageStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{BlockOnStorefront.base('1')}}" stepKey="seeBlockCMSPageStorefront"/>
        <seeElement selector="{{BlockOnStorefront.base('2')}}" stepKey="seeNestedBlockCMSPageStorefront"/>
        <see selector="{{BlockOnStorefront.base('2')}}{{BlockOnStorefront.ancestor}}" userInput="$$createPreReqBlock.content$$" stepKey="seeBlockContentCMSPageStorefront"/>
    </test>
    <test name="BlockRenderImageThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Image Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the image content type through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-14874"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-image"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <resizeWindow width="1280" height="1024" stepKey="resizeWindowToDesktop"/>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="navigateToMediaGallery" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="NavigateToFolder">
                <argument name="FolderName" value="{{PageBuilderImageProperty_JPG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage">
                <argument name="Image" value="PageBuilderImageProperty_JPG"/>
            </actionGroup>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="NavigateToFolder2">
                <argument name="FolderName" value="{{PageBuilderMobileImagePropertyGif.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage2">
                <argument name="Image" value="PageBuilderMobileImagePropertyGif"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Image -->
        <comment userInput="Add Image" stepKey="commentAddImage"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderImageContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragImageIntoStage">
            <argument name="contentType" value="PageBuilderImageContentType"/>
        </actionGroup>
        <!-- Edit Image -->
        <comment userInput="Edit Image" stepKey="commentEditImage"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuImage">
            <argument name="contentType" value="PageBuilderImageContentType"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutPropertyGeneral" stepKey="attachImage">
            <argument name="property" value="PageBuilderImageProperty_JPG"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutPropertyGeneral" stepKey="attachMobileImage">
            <argument name="property" value="PageBuilderMobileImagePropertyGif"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelLinkUrlField" stepKey="enterLink">
            <argument name="property" value="PageBuilderImageLinkProperty"/>
            <argument name="selection" value="{{ExternalLink.url}}"/>
            <argument name="newTab" value="PageBuilderImageNewTab_False"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterImageCaption">
            <argument name="property" value="PageBuilderImageCaptionProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterAltText">
            <argument name="property" value="PageBuilderImageAltTextProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterTitleAttribute">
            <argument name="property" value="PageBuilderImageTitleAttributeProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsImage"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <waitForElementVisible selector="{{ImageOnStage.base('1')}}" stepKey="waitForImageCMSBlockStage"/>
        <see selector="{{ImageOnStage.imageCaption('1')}}" userInput="{{PageBuilderImageCaptionProperty.value}}" stepKey="seeImageCaptionCMSBlockStage"/>
        <seeElement selector="{{ImageOnStage.imageAltText('1', PageBuilderImageAltTextProperty.value)}}" stepKey="seeImageAltTextCMSBlockStage"/>
        <seeElement selector="{{ImageOnStage.imageTitleAttribute('1', PageBuilderImageTitleAttributeProperty.value)}}" stepKey="seeImageTitleAttributeCMSBlockStage"/>
        <actionGroup ref="validateImage" stepKey="validateImageCMSBlockStage">
            <argument name="section" value="ImageOnStage"/>
            <argument name="image" value="PageBuilderImageProperty_JPG"/>
        </actionGroup>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoPageStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInPageGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="savePageEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <waitForElementVisible selector="{{ImageOnStorefront.base('1')}}" stepKey="waitForImageCMSPageStage"/>
        <seeElement selector="{{ImageOnStorefront.imageDesktop('1')}}" stepKey="seeDesktopImageCMSPageStage"/>
        <see selector="{{ImageOnStorefront.imageCaption('1')}}" userInput="{{PageBuilderImageCaptionProperty.value}}" stepKey="seeImageCaptionCMSPageStage"/>
        <seeElement selector="{{ImageOnStorefront.imageAltText('1', PageBuilderImageAltTextProperty.value)}}" stepKey="seeImageAltTextCMSPageStage"/>
        <seeElement selector="{{ImageOnStorefront.imageTitleAttribute('1', PageBuilderImageTitleAttributeProperty.value)}}" stepKey="seeImageTitleAttributeCMSPageStage"/>
        <seeElement selector="{{ImageOnStorefront.imageLink('1', PageBuilderImageLinkProperty.value)}}" stepKey="seeImageLinkCMSPageStage"/>
        <seeElement selector="{{ImageOnStorefront.imageLinkTarget('1', PageBuilderImageNewTab_False.stageValue)}}" stepKey="seeImageLinkTargetCMSPageStage"/>
        <actionGroup ref="validateImage" stepKey="validateImageCMSPageStage">
            <argument name="section" value="ImageOnStorefront"/>
            <argument name="image" value="PageBuilderImageProperty_JPG"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <waitForElementVisible selector="{{ImageOnStorefront.base('1')}}" stepKey="waitForImageCMSPageStorefront"/>
        <seeElement selector="{{ImageOnStorefront.imageDesktop('1')}}" stepKey="seeDesktopImageCMSPageStorefront"/>
        <see selector="{{ImageOnStorefront.imageCaption('1')}}" userInput="{{PageBuilderImageCaptionProperty.value}}" stepKey="seeImageCaptionCMSPageStorefront"/>
        <seeElement selector="{{ImageOnStorefront.imageAltText('1', PageBuilderImageAltTextProperty.value)}}" stepKey="seeImageAltTextCMSPageStorefront"/>
        <seeElement selector="{{ImageOnStorefront.imageTitleAttribute('1', PageBuilderImageTitleAttributeProperty.value)}}" stepKey="seeImageTitleAttributeCMSPageStorefront"/>
        <seeElement selector="{{ImageOnStorefront.imageLink('1', PageBuilderImageLinkProperty.value)}}" stepKey="seeImageLinkCMSPageStorefront"/>
        <seeElement selector="{{ImageOnStorefront.imageLinkTarget('1', PageBuilderImageNewTab_False.stageValue)}}" stepKey="seeImageLinkTargetCMSPageStorefront"/>
        <actionGroup ref="validateImage" stepKey="validateImageCMSPageStorefront">
            <argument name="section" value="ImageOnStorefront"/>
            <argument name="image" value="PageBuilderImageProperty_JPG"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront Mobile -->
        <comment userInput="Validate CMS Page Storefront Mobile" stepKey="commentValidateCMSPageStorefrontMobile"/>
        <resizeWindow width="767" height="1000" stepKey="resizeWindowToMobileCMSPageStorefront"/>
        <waitForElementVisible selector="{{ImageOnStorefront.base('1')}}" stepKey="waitForImageCMSPageStorefrontMobile"/>
        <seeElement selector="{{ImageOnStorefront.imageMobile('1')}}" stepKey="seeMobileImageCMSPageStorefrontMobile"/>
        <see selector="{{ImageOnStorefront.imageCaption('1')}}" userInput="{{PageBuilderImageCaptionProperty.value}}" stepKey="seeImageCaptionCMSPageStorefrontMobile"/>
        <seeElement selector="{{ImageOnStorefront.imageAltText('1', PageBuilderImageAltTextProperty.value)}}" stepKey="seeImageAltTextCMSPageStorefrontMobile"/>
        <seeElement selector="{{ImageOnStorefront.imageTitleAttribute('1', PageBuilderImageTitleAttributeProperty.value)}}" stepKey="seeImageTitleAttributeCMSPageStorefrontMobile"/>
        <seeElement selector="{{ImageOnStorefront.imageLink('1', PageBuilderImageLinkProperty.value)}}" stepKey="seeImageLinkCMSPageStorefrontMobile"/>
        <seeElement selector="{{ImageOnStorefront.imageLinkTarget('1', PageBuilderImageNewTab_False.stageValue)}}" stepKey="seeImageLinkTargetCMSPageStorefrontMobile"/>
        <actionGroup ref="validateImage" stepKey="validateImageCMSPageStorefrontMobile">
            <argument name="section" value="ImageOnStorefront"/>
            <argument name="image" value="PageBuilderMobileImagePropertyGif"/>
        </actionGroup>
        <click selector="{{ImageOnStorefront.imageLink('1', PageBuilderImageLinkProperty.value)}}" stepKey="clickImageCMSPageStorefront"/>
        <wait time="3" stepKey="waitArbitraryTimeForPotentialNavigationToOccurCMSPageStorefront"/>
        <seeCurrentUrlEquals url="{{PageBuilderImageLinkProperty.value}}" stepKey="seeThatUrlIsChangedToImageLinkUrl"/>
    </test>
    <test name="BlockRenderRowContainedAppearanceWithParallaxThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Row Contained Appearance With Parallax Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the row content type contained appearance with parallax enabled through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-14933"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-parallax"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <resizeWindow width="1280" height="1024" stepKey="resizeWindowToDesktop"/>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="navigateToMediaGallery" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="navigateToDesktopImageFolder">
                <argument name="FolderName" value="{{PageBuilderBackgroundImage_JPG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="deleteBackgroundImage">
                <argument name="Image" value="PageBuilderBackgroundImage_JPG"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="deleteMobileBackgroundImage">
                <argument name="Image" value="PageBuilderBackgroundMobileImage_GIF"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Edit Row -->
        <comment userInput="Edit Row" stepKey="commentEditRow"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuRow">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <!-- Fill All Fields -->
        <comment userInput="Fill All Fields" stepKey="commentEdit"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearance">
            <argument name="property" value="PageBuilderRowAppearance_Contained"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Plaintext_Green"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachFileSlideOutProperty1">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachFileSlideOutProperty2">
            <argument name="property" value="PageBuilderBackgroundMobileImage_GIF"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="setBackgroundPosition">
            <argument name="property" value="PageBuilderBackgroundPosition_Center"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setBackgroundSize">
            <argument name="property" value="PageBuilderBackgroundSize_Auto"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="setBackgroundAttachment">
            <argument name="property" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setBackgroundRepeat">
            <argument name="property" value="PageBuilderBackgroundRepeat_Enabled"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="enableParallaxBackground">
            <argument name="property" value="PageBuilderRowParallax_Enabled"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterParallaxBackgroundSpeed">
            <argument name="property" value="PageBuilderRowParallaxSpeed_2"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterMinHeightProperty">
            <argument name="property" value="PageBuilderMinHeightProperty_500"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterVerticalAlignmentCenterProperty">
            <argument name="property" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsRow"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragDividerIntoStage">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
        </actionGroup>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <actionGroup ref="validateContainedRowAppearance" stepKey="validateRowAppearanceCMSBlockStage"/>
        <actionGroup ref="validateRowBackgroundAttributesWithAllUpdatedAndParallaxEnabled" stepKey="validateBackgroundCMSBlockStage">
            <argument name="page" value="RowOnStage"/>
            <argument name="index" value="1"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateRowParallaxBackgroundAttributes" stepKey="validateParallaxBackgroundCMSBlockStage">
            <argument name="page" value="RowOnStage"/>
            <argument name="index" value="1"/>
            <argument name="parallaxStateValue" value="PageBuilderRowParallax_Enabled"/>
            <argument name="parallaxSpeedValue" value="PageBuilderRowParallaxSpeed_2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainerForParallaxRow" stepKey="validateBackgroundImageCMSBlockStage">
            <argument name="section" value="RowOnStage"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateRowLayoutCMSBlockStage">
            <argument name="page" value="RowOnStage"/>
            <argument name="index" value="1"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateRowHeightCMSBlockStage">
            <argument name="content" value="{{RowOnStage.baseCSS}}"/>
            <argument name="padding" value="PageBuilderPaddingProperty10"/>
            <argument name="height" value="PageBuilderMinHeightProperty_500"/>
        </actionGroup>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Edit Row On CMS Page -->
        <comment userInput="Edit Row On CMS Page" stepKey="commentEditRowCMSPage"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuRowCMSPage">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceCMSPage">
            <argument name="property" value="PageBuilderRowAppearance_FullBleed"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldPadding" stepKey="enterPaddingCMSPage">
            <argument name="property" value="PageBuilderPaddingPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsRowCMSPage"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <actionGroup ref="validateContainedRowAppearance" stepKey="validateRowAppearanceCMSPageStage">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateRowBackgroundAttributesWithAllUpdatedAndParallaxEnabled" stepKey="validateRowBackgroundCMSPageStage">
            <argument name="page" value="RowOnStorefront"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateRowParallaxBackgroundAttributes" stepKey="validateRowParallaxBackgroundCMSPageStage">
            <argument name="page" value="RowOnStorefront"/>
            <argument name="index" value="2"/>
            <argument name="parallaxStateValue" value="PageBuilderRowParallax_Enabled"/>
            <argument name="parallaxSpeedValue" value="PageBuilderRowParallaxSpeed_2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainerForParallaxRow" stepKey="validateBackgroundImageCMSPageStage">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateRowLayoutCMSPageStage">
            <argument name="page" value="RowOnStorefront"/>
            <argument name="index" value="2"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="verifyVerticalAlignmentCenterInBlock" stepKey="verifyVerticalAlignmentCenterCMSPageStage">
            <argument name="container" value="RowOnStorefront"/>
            <argument name="content" value="DividerOnStorefront"/>
            <argument name="containerIndex" value="1"/>
            <argument name="contentIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateRowHeightCMSPageStage">
            <argument name="content" value="{{RowOnStorefront.baseCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_500"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <actionGroup ref="validateContainedRowAppearance" stepKey="validateRowAppearanceCMSPageStorefront">
            <argument name="pageOrStageWidthJS" value="{{PageBuilderStoreFront.pageWidthJS}}"/>
            <argument name="section" value="RowOnStorefront"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateRowBackgroundAttributesWithAllUpdatedAndParallaxEnabled" stepKey="validateRowBackgroundCMSPageStorefront">
            <argument name="page" value="RowOnStorefront"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateRowParallaxBackgroundAttributes" stepKey="validateRowParallaxBackgroundCMSPageStorefront">
            <argument name="page" value="RowOnStorefront"/>
            <argument name="index" value="2"/>
            <argument name="parallaxStateValue" value="PageBuilderRowParallax_Enabled"/>
            <argument name="parallaxSpeedValue" value="PageBuilderRowParallaxSpeed_2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainerForParallaxRow" stepKey="validateBackgroundImageCMSPageStorefront">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateRowLayoutCMSPageStorefront">
            <argument name="page" value="RowOnStorefront"/>
            <argument name="index" value="2"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="verifyVerticalAlignmentCenterInBlock" stepKey="verifyVerticalAlignmentCenterCMSPageStorefront">
            <argument name="container" value="RowOnStorefront"/>
            <argument name="content" value="DividerOnStorefront"/>
            <argument name="containerIndex" value="1"/>
            <argument name="contentIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateRowHeightCMSPageStorefront">
            <argument name="content" value="{{RowOnStorefront.baseCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_500"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront Mobile -->
        <comment userInput="Validate CMS Page Storefront Mobile" stepKey="commentValidateCMSPageStorefrontMobile"/>
        <resizeWindow width="767" height="1000" stepKey="resizeWindowToMobileCMSPageStorefront"/>
        <reloadPage stepKey="reloadPage"/>
        <waitForPageLoad stepKey="waitForReload"/>
        <actionGroup ref="validateBackgroundImageContainerForParallaxRow" stepKey="validateBackgroundImageCMSPageStorefrontMobile">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundMobileImage_GIF"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateRowHeightCMSPageStorefrontMobile">
            <argument name="content" value="{{RowOnStorefront.baseCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_500"/>
            <argument name="index" value="2"/>
        </actionGroup>
    </test>
    <test name="BlockRenderRowFullWidthAppearanceWithParallaxThroughBlockContentType" extends="BlockRenderRowContainedAppearanceWithParallaxThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Row Full Width Appearance With Parallax Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the row content type full width appearance with parallax enabled through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-14934"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-parallax"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearance">
            <argument name="property" value="PageBuilderRowAppearance_FullWidth"/>
        </actionGroup>
        <!-- Validate CMS Block Stage -->
        <actionGroup ref="validateFullWidthRowAppearance" stepKey="validateRowAppearanceCMSBlockStage"/>
        <!-- Validate CMS Page Stage -->
        <actionGroup ref="validateFullBleedRowAppearance" stepKey="validateRowAppearanceCMSPageStage">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="rowIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateRowBackgroundAttributesWithAllUpdatedAndParallaxEnabled" stepKey="validateRowBackgroundCMSPageStage">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateRowParallaxBackgroundAttributes" stepKey="validateRowParallaxBackgroundCMSPageStage">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="parallaxStateValue" value="PageBuilderRowParallax_Enabled"/>
            <argument name="parallaxSpeedValue" value="PageBuilderRowParallaxSpeed_2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainerForParallaxRow" stepKey="validateBackgroundImageCMSPageStage">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateRowLayoutCMSPageStage">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront -->
        <actionGroup ref="validateFullWidthRowAppearance" stepKey="validateRowAppearanceCMSPageStorefront">
            <argument name="pageOrStageWidthJS" value="{{PageBuilderStoreFront.pageWidthJS}}"/>
            <argument name="section" value="RowOnStorefront"/>
            <argument name="rowIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateRowBackgroundAttributesWithAllUpdatedAndParallaxEnabled" stepKey="validateRowBackgroundCMSPageStorefront">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateRowParallaxBackgroundAttributes" stepKey="validateRowParallaxBackgroundCMSPageStorefront">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="parallaxStateValue" value="PageBuilderRowParallax_Enabled"/>
            <argument name="parallaxSpeedValue" value="PageBuilderRowParallaxSpeed_2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainerForParallaxRow" stepKey="validateBackgroundImageCMSPageStorefront">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateRowLayoutCMSPageStorefront">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront Mobile -->
        <actionGroup ref="validateBackgroundImageContainerForParallaxRow" stepKey="validateBackgroundImageCMSPageStorefrontMobile">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundMobileImage_GIF"/>
            <argument name="index" value="2"/>
        </actionGroup>
    </test>
    <test name="BlockRenderRowFullBleedAppearanceWithParallaxThroughBlockContentType" extends="BlockRenderRowContainedAppearanceWithParallaxThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Row Full Bleed Appearance With Parallax Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the row content type full bleed appearance with parallax enabled through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-14936"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-parallax"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearance">
            <argument name="property" value="PageBuilderRowAppearance_FullBleed"/>
        </actionGroup>
        <!-- Validate CMS Block Stage -->
        <actionGroup ref="validateFullBleedRowAppearance" stepKey="validateRowAppearanceCMSBlockStage"/>
        <!-- Validate CMS Page Stage -->
        <actionGroup ref="validateFullBleedRowAppearance" stepKey="validateRowAppearanceCMSPageStage">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="rowIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateRowBackgroundAttributesWithAllUpdatedAndParallaxEnabled" stepKey="validateRowBackgroundCMSPageStage">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateRowParallaxBackgroundAttributes" stepKey="validateRowParallaxBackgroundCMSPageStage">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="parallaxStateValue" value="PageBuilderRowParallax_Enabled"/>
            <argument name="parallaxSpeedValue" value="PageBuilderRowParallaxSpeed_2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainerForParallaxRow" stepKey="validateBackgroundImageCMSPageStage">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateRowLayoutCMSPageStage">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront -->
        <actionGroup ref="validateFullBleedRowAppearance" stepKey="validateRowAppearanceCMSPageStorefront">
            <argument name="pageOrStageWidthJS" value="{{PageBuilderStoreFront.pageWidthJS}}"/>
            <argument name="section" value="RowOnStorefront"/>
            <argument name="rowIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateRowBackgroundAttributesWithAllUpdatedAndParallaxEnabled" stepKey="validateRowBackgroundCMSPageStorefront">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateRowParallaxBackgroundAttributes" stepKey="validateRowParallaxBackgroundCMSPageStorefront">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="parallaxStateValue" value="PageBuilderRowParallax_Enabled"/>
            <argument name="parallaxSpeedValue" value="PageBuilderRowParallaxSpeed_2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainerForParallaxRow" stepKey="validateBackgroundImageCMSPageStorefront">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateRowLayoutCMSPageStorefront">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront Mobile -->
        <actionGroup ref="validateBackgroundImageContainerForParallaxRow" stepKey="validateBackgroundImageCMSPageStorefrontMobile">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundMobileImage_GIF"/>
            <argument name="index" value="2"/>
        </actionGroup>
    </test>
    <test name="BlockRenderRowContainedAppearanceThroughBlockContentType" extends="BlockRenderRowContainedAppearanceWithParallaxThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Row Contained Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the row content type contained appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15088"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-row"/>
        </annotations>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="enableParallaxBackground">
            <argument name="property" value="PageBuilderRowParallax_Disabled"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="enterParallaxBackgroundSpeed"/>
        <!-- Validate CMS Block Stage -->
        <actionGroup ref="validateBackgroundAttributes" stepKey="validateBackgroundCMSBlockStage">
            <argument name="section" value="RowOnStage"/>
            <argument name="index" value="1"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="validateParallaxBackgroundCMSBlockStage"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSBlockStage">
            <argument name="section" value="RowOnStage_Contained"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <!-- Validate CMS Page Stage -->
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateRowBackgroundCMSPageStage">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="validateRowParallaxBackgroundCMSPageStage"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStage">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront -->
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateRowBackgroundCMSPageStorefront">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="validateRowParallaxBackgroundCMSPageStorefront"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStorefront">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront Mobile -->
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStorefrontMobile">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundMobileImage_GIF"/>
            <argument name="index" value="2"/>
        </actionGroup>
    </test>
    <test name="BlockRenderRowFullWidthAppearanceThroughBlockContentType" extends="BlockRenderRowContainedAppearanceWithParallaxThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Row Full Width Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the row content type full width appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15089"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-row"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearance">
            <argument name="property" value="PageBuilderRowAppearance_FullWidth"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="enableParallaxBackground">
            <argument name="property" value="PageBuilderRowParallax_Disabled"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="enterParallaxBackgroundSpeed"/>
        <!-- Validate CMS Block Stage -->
        <actionGroup ref="validateFullWidthRowAppearance" stepKey="validateRowAppearanceCMSBlockStage"/>
        <actionGroup ref="validateBackgroundAttributes" stepKey="validateBackgroundCMSBlockStage">
            <argument name="section" value="RowOnStage"/>
            <argument name="index" value="1"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="validateParallaxBackgroundCMSBlockStage"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSBlockStage">
            <argument name="section" value="RowOnStage"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <!-- Validate CMS Page Stage -->
        <actionGroup ref="validateFullBleedRowAppearance" stepKey="validateRowAppearanceCMSPageStage">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="rowIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateRowBackgroundCMSPageStage">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="validateRowParallaxBackgroundCMSPageStage"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStage">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateRowLayoutCMSPageStage">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront -->
        <actionGroup ref="validateFullWidthRowAppearance" stepKey="validateRowAppearanceCMSPageStorefront">
            <argument name="pageOrStageWidthJS" value="{{PageBuilderStoreFront.pageWidthJS}}"/>
            <argument name="section" value="RowOnStorefront"/>
            <argument name="rowIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateRowBackgroundCMSPageStorefront">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="validateRowParallaxBackgroundCMSPageStorefront"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStorefront">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateRowLayoutCMSPageStorefront">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront Mobile -->
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStorefrontMobile">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundMobileImage_GIF"/>
            <argument name="index" value="2"/>
        </actionGroup>
    </test>
    <test name="BlockRenderRowFullBleedAppearanceThroughBlockContentType" extends="BlockRenderRowContainedAppearanceWithParallaxThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Row Full Bleed Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the row content type full bleed appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15090"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-row"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearance">
            <argument name="property" value="PageBuilderRowAppearance_FullBleed"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="enableParallaxBackground">
            <argument name="property" value="PageBuilderRowParallax_Disabled"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="enterParallaxBackgroundSpeed"/>
        <!-- Validate CMS Block Stage -->
        <actionGroup ref="validateFullBleedRowAppearance" stepKey="validateRowAppearanceCMSBlockStage"/>
        <actionGroup ref="validateBackgroundAttributes" stepKey="validateBackgroundCMSBlockStage">
            <argument name="section" value="RowOnStage"/>
            <argument name="index" value="1"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="validateParallaxBackgroundCMSBlockStage"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSBlockStage">
            <argument name="section" value="RowOnStage"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <!-- Validate CMS Page Stage -->
        <actionGroup ref="validateFullBleedRowAppearance" stepKey="validateRowAppearanceCMSPageStage">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="rowIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateRowBackgroundCMSPageStage">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="validateRowParallaxBackgroundCMSPageStage"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStage">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateRowLayoutCMSPageStage">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront -->
        <actionGroup ref="validateFullBleedRowAppearance" stepKey="validateRowAppearanceCMSPageStorefront">
            <argument name="pageOrStageWidthJS" value="{{PageBuilderStoreFront.pageWidthJS}}"/>
            <argument name="section" value="RowOnStorefront"/>
            <argument name="rowIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateRowBackgroundCMSPageStorefront">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="validateRowParallaxBackgroundCMSPageStorefront"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStorefront">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateRowLayoutCMSPageStorefront">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront Mobile -->
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStorefrontMobile">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundMobileImage_GIF"/>
            <argument name="index" value="2"/>
        </actionGroup>
    </test>
    <test name="BlockRenderProductsThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Products Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the products content type through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-14878"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-products"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="_defaultCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createProduct1">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_defaultProduct" stepKey="createProduct2">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_defaultProduct" stepKey="createProduct3">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createProduct1" stepKey="deleteCreatedProduct1"/>
            <deleteData createDataKey="createProduct2" stepKey="deleteCreatedProduct2"/>
            <deleteData createDataKey="createProduct3" stepKey="deleteCreatedProduct3"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deleteCreatedCategory"/>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Products -->
        <comment userInput="Add Products" stepKey="commentAddProducts"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragProductsIntoStage">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <!-- Edit Products -->
        <comment userInput="Edit Products" stepKey="commentEditProducts"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuProducts">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="addCategoryConditionToProductsBlock" stepKey="addCategory">
            <argument name="page" value="ProductsContentTypeForm"/>
            <argument name="category" value="$$createPreReqCategory.id$$"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterNumberOfProductsToDisplay">
            <argument name="property" value="PageBuilderProductsCountPropertyTwo"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsProducts"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductsCountCMSBlockStage">
            <argument name="page" value="ProductsOnStage"/>
            <argument name="count" value="2"/>
        </actionGroup>
        <actionGroup ref="validateProductInProductsStage" stepKey="validateProductsCMSBlockStage">
            <argument name="page" value="ProductsOnStage"/>
        </actionGroup>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductsCountCMSPageStage">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="count" value="2"/>
        </actionGroup>
        <actionGroup ref="validateProductInProductsStorefront" stepKey="validateProductsCMSPageStage">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="isClickable" value="none"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductsCountCMSPageStorefront">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="count" value="2"/>
        </actionGroup>
        <actionGroup ref="validateProductInProductsStorefront" stepKey="validateProductsCMSPageStorefront">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="isClickable" value="auto"/>
        </actionGroup>
        <actionGroup ref="clickProductImageInProductsOnStorefront" stepKey="clickProductImageInProductsCMSPageStorefront">
            <argument name="product" value="$$createProduct3.name$$"/>
        </actionGroup>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront2">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <actionGroup ref="clickProductNameInProductsOnStorefront" stepKey="clickProductNameInProductsCMSPageStorefront">
            <argument name="product" value="$$createProduct3.name$$"/>
        </actionGroup>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront3">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <actionGroup ref="clickProductAddToCartInProductsOnStorefront" stepKey="clickProductAddToCartInProductsCMSPageStorefront">
            <argument name="product" value="$$createProduct3.name$$"/>
        </actionGroup>
        <actionGroup ref="clickProductAddToCompareInProductsOnStorefront" stepKey="clickProductAddToCompareInProductsCMSPageStorefront">
            <argument name="product" value="$$createProduct3.name$$"/>
        </actionGroup>
        <actionGroup ref="clickProductAddToWishListInProductsOnStorefront" stepKey="clickProductAddToWishListInProductsCMSPageStorefront"/>
    </test>
    <test name="BlockRenderMapThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Map Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the Map content type through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15153"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-map"/>
            <group value="pagebuilder-mapMapSettings"/>
            <group value="pagebuilder-requiresValidMapAPIKey"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <magentoCLI command="config:set cms/pagebuilder/google_maps_api_key ''" stepKey="setEmptyGoogleMapsAPIKey"/>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Map -->
        <comment userInput="Add Map" stepKey="commentAddMap"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSectionMedia">
            <argument name="contentType" value="PageBuilderMapContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragMapIntoStage">
            <argument name="contentType" value="PageBuilderMapContentType"/>
        </actionGroup>
        <!-- Edit Map -->
        <comment userInput="Edit Map" stepKey="commentEditMap"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuMap">
            <argument name="contentType" value="PageBuilderMapContentType"/>
        </actionGroup>
        <!-- Enter Height: 500 -->
        <comment userInput="Enter Height: 500" stepKey="commentEnterHeight"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterHeight">
            <argument name="property" value="PageBuilderMapHeightProperty500px"/>
        </actionGroup>
        <!-- Add 1st Location -->
        <comment userInput="Add 1st Location" stepKey="commentAddLocation1"/>
        <actionGroup ref="clickAddLocationButton" stepKey="clickAddLocationButton"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterLocationName">
            <argument name="property" value="PageBuilderMapLocationName_TestLocation"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterLatitude">
            <argument name="property" value="PageBuilderMapLatitude_0"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterLongitude">
            <argument name="property" value="PageBuilderMapLongitude_0"/>
        </actionGroup>
        <actionGroup ref="saveLocationForm" stepKey="saveLocationForm"/>
        <!-- Add 2nd Location -->
        <comment userInput="Add 2nd Location" stepKey="commentAddLocation2"/>
        <actionGroup ref="clickAddLocationButton" stepKey="clickAddLocationButton2"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterLocationName2">
            <argument name="property" value="PageBuilderMapLocationName_TestLocation"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterLatitude2">
            <argument name="property" value="PageBuilderMapLatitude_0"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterLongitude2">
            <argument name="property" value="PageBuilderMapLongitude_NegativeMax"/>
        </actionGroup>
        <actionGroup ref="saveLocationForm" stepKey="saveLocationForm2"/>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsMap"/>
        <!-- Save Block and Set Valid API Key -->
        <comment userInput="Save Block and Set Valid API Key" stepKey="commentSaveBlockAndSetKey"/>
        <magentoCLI command="config:set cms/pagebuilder/google_maps_api_key {{googleMapsAPIKey.valid}}" stepKey="setValidGoogleMapsAPIKey"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <actionGroup ref="validateMapHeight" stepKey="validateMapHeightCMSBlockStage">
            <argument name="height" value="PageBuilderMapHeightProperty500px"/>
        </actionGroup>
        <actionGroup ref="verifyNumberOfPinsOnMap" stepKey="verifyNumberOfPinsOnMapCMSBlockStage">
            <argument name="page" value="MapOnStage"/>
            <argument name="count" value="2"/>
        </actionGroup>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <actionGroup ref="validateMapHeight" stepKey="validateMapHeightCMSPageStage">
            <argument name="section" value="MapOnStorefront"/>
            <argument name="height" value="PageBuilderMapHeightProperty500px"/>
        </actionGroup>
        <actionGroup ref="verifyNumberOfPinsOnMapNoClick" stepKey="verifyNumberOfPinsOnMapCMSPageStage">
            <argument name="page" value="MapOnStorefront"/>
            <argument name="count" value="2"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <actionGroup ref="validateMapHeight" stepKey="validateMapHeightCMSPageStorefront">
            <argument name="section" value="MapOnStorefront"/>
            <argument name="height" value="PageBuilderMapHeightProperty500px"/>
        </actionGroup>
        <actionGroup ref="verifyNumberOfPinsOnMap" stepKey="verifyNumberOfPinsOnMapCMSPageStorefront">
            <argument name="page" value="MapOnStorefront"/>
            <argument name="count" value="2"/>
        </actionGroup>
    </test>
    <test name="BlockRenderTextThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Text Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the Text content type through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15159"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <createData entity="_defaultCmsPage" stepKey="createCMSPageB"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPageB" stepKey="deleteCMSPageB"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Text -->
        <comment userInput="Add Text" stepKey="commentAddText"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragTextIntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <!--Input text into stage-->
        <comment userInput="Input text into stage" stepKey="commentInputTextIntoStage"/>
        <click selector="{{TextOnStage.tinymce('1')}}" stepKey="focusOnEditorArea"/>
        <fillField selector="{{TextOnStage.tinymce('1')}}" userInput="{{PageBuilderTextProperty.value}}" stepKey="fillTextToTinyMCE4"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="lostFocusFromWYSIWYG1"/>
        <!--Verify inputed text on slideout-->
        <comment userInput="Verify inputed text on slideout" stepKey="commentVerifyTextOnSlideout"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage1">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <switchToIFrame selector="{{TextOnConfiguration.tinyMCEIFrame}}" stepKey="switchToIFrame1"/>
        <waitForElementVisible selector="{{TextOnConfiguration.textInIFrame(PageBuilderTextProperty.value)}}" stepKey="waitForText"/>
        <switchToIFrame stepKey="exitIFrame1"/>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings1"/>
        <!--Input variable into stage-->
        <comment userInput="Input variable into stage" stepKey="commentInputVariableIntoStage"/>
        <click selector="{{TextOnStage.tinymce('1')}}" stepKey="focusOnEditorArea1"/>
        <actionGroup ref="addVariableToTinyMCEInline" stepKey="addVariableToTinyMCE">
            <argument name="variable" value="TinyMCEVariableBaseURL"/>
        </actionGroup>
        <waitForElementVisible selector="{{TextOnStage.text('1', TinyMCEVariableBaseURL.editPanelValue)}}" stepKey="waitForVariableBaseURLStage"/>
        <!--Verify inputed variable on slideout-->
        <comment userInput="Verify inputed variable on slideout" stepKey="commentVerifyVariableOnSlideout"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="lostFocusFromWYSIWYG2"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <switchToIFrame selector="{{TextOnConfiguration.tinyMCEIFrame}}" stepKey="switchToIFrame2"/>
        <waitForElementVisible selector="{{TextOnConfiguration.tinyMCEVariable(TinyMCEVariableBaseURL.editPanelValue, '1')}}" stepKey="waitForVariable2"/>
        <switchToIFrame stepKey="exitIFrame2"/>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings2"/>
        <!--Input widget into stage-->
        <comment userInput="Input widget into stage" stepKey="commentInputWidgetIntoStage"/>
        <click selector="{{TextOnStage.tinymce('1')}}" stepKey="focusOnEditorArea2"/>
        <actionGroup ref="addPageLinkWidgetToTinyMCEInline" stepKey="addPageLinkWidgetToTinyMCE">
            <argument name="widget" value="TinyMCEWidgetCMSPageLink"/>
            <argument name="page" value="$$createCMSPageB.identifier$$"/>
        </actionGroup>
        <waitForElementVisible selector="{{TextOnStage.text('1', TinyMCEWidgetCMSPageLink.editPanelValue)}}" stepKey="waitForWidgetStage"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="lostFocusFromWYSIWYG3"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <switchToIFrame selector="{{TextOnConfiguration.tinyMCEIFrame}}" stepKey="switchToIFrame3"/>
        <waitForElementVisible selector="{{TextOnConfiguration.tinyMCEWidget(TinyMCEWidgetCMSPageLink.editPanelValue, '1')}}" stepKey="waitForWidget"/>
        <switchToIFrame stepKey="exitIFrame3"/>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <!--Input image into stage-->
        <comment userInput="Input image into stage" stepKey="commentInputImageIntoStage"/>
        <click selector="{{TextOnStage.tinymce('1')}}" stepKey="focusOnTextEditorArea"/>
        <waitForElementVisible selector="{{TinyMCESection.InsertImageIcon}}" stepKey="waitForInsertImageIcon"/>
        <click selector="{{TinyMCESection.InsertImageIcon}}" stepKey="clickInsertImageIcon"/>
        <waitForPageLoad stepKey="waitForPageLoad" />
        <actionGroup ref="clickBrowseBtnOnUploadPopup" stepKey="clickBrowserBtn"/>
        <actionGroup ref="VerifyMediaGalleryStorageActions" stepKey="VerifyMediaGalleryStorageBtn"/>
        <click selector="{{MediaGallerySection.StorageRootArrow}}" stepKey="clickStorageRoot"/>
        <waitForPageLoad stepKey="waitForPageLoad2"/>
        <actionGroup ref="CreateImageFolder" stepKey="CreateImageFolder">
            <argument name="ImageFolder" value="ImageFolder"/>
        </actionGroup>
        <actionGroup ref="attachImage" stepKey="attachImage1">
            <argument name="Image" value="ImageUpload3"/>
        </actionGroup>
        <actionGroup ref="saveImage" stepKey="insertImage"/>
        <actionGroup ref="fillOutUploadImagePopup" stepKey="fillOutUploadImagePopup" />
        <seeElement selector="{{CmsWYSIWYGSection.ImageAlt(ImageUpload3.content)}}" stepKey="assertMediaSourceOnStage"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeElementInDOM selector="{{TextOnStage.text('1', PageBuilderTextProperty.value)}}" stepKey="seeTextContentTypeBlockStage"/>
        <seeElement selector="{{TextOnStage.text('1', TinyMCEVariableBaseURL.editPanelValue)}}" stepKey="seeVariableBlockStage"/>
        <seeElement selector="{{TextOnStage.text('1', TinyMCEWidgetCMSPageLink.editPanelValue)}}" stepKey="seeWidgetBlockStage"/>
        <seeElement selector="{{CmsWYSIWYGSection.ImageAlt(ImageUpload3.content)}}" stepKey="assertMediaSourceBlockStage"/>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElementInDOM selector="{{TextOnStorefront.text('1', PageBuilderTextProperty.value)}}" stepKey="seeTextContentTypePageStage"/>
        <seeElement selector="{{StorefrontCMSPageSection.imageSource(ImageUpload3.fileName)}}" stepKey="assertMediaSourcePageStage"/>
        <seeElement selector="{{TextOnStorefront.text('1', _ENV.MAGENTO_BASE_URL)}}" stepKey="waitForVariablePageStage"/>
        <seeElement selector="{{TextOnStorefront.textWidget('1', _ENV.MAGENTO_BASE_URL, $$createCMSPageB.identifier$$)}}" stepKey="waitForWidgetPageStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToStoreFront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElementInDOM selector="{{TextOnStorefront.text('1', PageBuilderTextProperty.value)}}" stepKey="seeTextContentTypeStorefront"/>
        <seeElement selector="{{StorefrontCMSPageSection.imageSource(ImageUpload3.fileName)}}" stepKey="assertMediaSourceStorefront"/>
        <seeElement selector="{{TextOnStorefront.text('1', _ENV.MAGENTO_BASE_URL)}}" stepKey="waitForVariableStorefront"/>
        <seeElement selector="{{TextOnStorefront.textWidget('1', _ENV.MAGENTO_BASE_URL, $$createCMSPageB.identifier$$)}}" stepKey="waitForWidgetStorefront"/>
    </test>
    <test name="BlockRenderInlineEditedTextThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Inline Edited Text Through Block Content Type With TinyMCE4 Wysiwyg Enabled By Default"/>
            <description value="Verify that users are able to successfully render and use the inline edited Text content type through the Block content type with TinyMCE4 and Wysiwyg enabled by default."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15174"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <magentoCLI command="config:set cms/wysiwyg/enabled enabled" stepKey="configWYSIWYG"/>
            <magentoCLI command="config:set cms/wysiwyg/editor mage/adminhtml/wysiwyg/tiny_mce/tinymce4Adapter" stepKey="configTinyMCE"/>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <magentoCLI command="config:set cms/wysiwyg/enabled enabled" stepKey="enableWYSIWYG1"/>
            <magentoCLI command="config:set cms/wysiwyg/editor mage/adminhtml/wysiwyg/tiny_mce/tinymce4Adapter" stepKey="enableTinyMCE4_1"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Text -->
        <comment userInput="Add Text" stepKey="commentAddText"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragTextIntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <!--Input text into stage-->
        <comment userInput="Input text into stage" stepKey="commentInputTextIntoStage"/>
        <click selector="{{TextOnStage.tinymce('1')}}" stepKey="focusOnEditorArea"/>
        <fillField selector="{{TextOnStage.tinymce('1')}}" userInput="{{PageBuilderTextProperty.value}}" stepKey="fillText"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="lostFocusFromWYSIWYG1"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeElementInDOM selector="{{TextOnStage.text('1', PageBuilderTextProperty.value)}}" stepKey="seeTextContentTypeBlockStage"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElementInDOM selector="{{TextOnStorefront.text('1', PageBuilderTextProperty.value)}}" stepKey="seeTextContentTypePageStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToStoreFront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElementInDOM selector="{{TextOnStorefront.text('1', PageBuilderTextProperty.value)}}" stepKey="seeTextContentTypeStorefront"/>
    </test>
    <test name="BlockRenderInlineEditedTextThroughBlockContentTypeTinyMCE4WysiwygDisabledByDefault" extends="BlockRenderInlineEditedTextThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Inline Edited Text Through Block Content Type With TinyMCE4 Wysiwyg disabled By Default"/>
            <description value="Verify that users are able to successfully render and use the inline edited Text content type through the Block content type with TinyMCE4 and Wysiwyg disabled by default."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15175"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <magentoCLI command="config:set cms/wysiwyg/enabled disabled" stepKey="configWYSIWYG"/>
        </before>
        <click selector="{{TextOnStage.textArea('1')}}" stepKey="focusOnEditorArea"/>
        <fillField selector="{{TextOnStage.textArea('1')}}" userInput="{{PageBuilderTextProperty.value}}" stepKey="fillText"/>
        <executeJS function="return document.evaluate(&quot;{{TextOnStage.textArea('1')}}&quot;, document.body).iterateNext().value" stepKey="seeTextContentTypeBlockStage"/>
        <assertContains stepKey="assertTextValue" after="seeTextContentTypeBlockStage">
            <expectedResult type="string">{{PageBuilderTextProperty.value}}</expectedResult>
            <actualResult type="variable">seeTextContentTypeBlockStage</actualResult>
        </assertContains>
        <seeElementInDOM selector="{{TextOnStorefront.textAreaText('1', PageBuilderTextProperty.value)}}" stepKey="seeTextContentTypePageStage"/>
        <seeElementInDOM selector="{{TextOnStorefront.textAreaText('1', PageBuilderTextProperty.value)}}" stepKey="seeTextContentTypeStorefront"/>
    </test>
    <test name="BlockRenderFormEditedTextThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault" extends="BlockRenderInlineEditedTextThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Form Edited Text Through Block Content Type With TinyMCE4 Wysiwyg Enabled By Default"/>
            <description value="Verify that users are able to successfully render and use the form edited Text content type through the Block content type with TinyMCE4 and Wysiwyg enabled by default."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15176"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <actionGroup ref="clickOutsideTextInlineEditing" stepKey="closeLiveEdit" after="focusOnEditorArea"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage" after="closeLiveEdit">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCE" stepKey="fillText">
            <argument name="property" value="PageBuilderTextProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings" after="fillText"/>
    </test>
    <test name="BlockRenderFormEditedTextThroughBlockContentTypeTinyMCE4WysiwygDisabledByDefault" extends="BlockRenderInlineEditedTextThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Form Edited Text Through Block Content Type With TinyMCE4 Wysiwyg Disabled By Default"/>
            <description value="Verify that users are able to successfully render and use the form edited Text content type through the Block content type with TinyMCE4 and Wysiwyg disabled by default."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15177"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <actionGroup ref="clickOutsideTextInlineEditing" stepKey="closeLiveEdit" after="focusOnEditorArea"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage" after="closeLiveEdit">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCE" stepKey="fillText">
            <argument name="property" value="PageBuilderTextProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings" after="fillText"/>
    </test>
    <test name="BlockRenderInlineEditedTextThroughBlockContentTypeTinyMCE3WysiwygEnabledByDefault" extends="BlockRenderInlineEditedTextThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Inline Edited Text Through Block Content Type With TinyMCE3 Wysiwyg Enabled By Default"/>
            <description value="Verify that users are able to successfully render and use the inline edited Text content type through the Block content type with TinyMCE3 and Wysiwyg enabled by default."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15178"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <magentoCLI command="config:set cms/wysiwyg/editor Magento_Tinymce3/tinymce3Adapter" stepKey="configTinyMCE"/>
        </before>
        <click selector="{{TextOnStage.textArea('1')}}" stepKey="focusOnEditorArea"/>
        <fillField selector="{{TextOnStage.textArea('1')}}" userInput="{{PageBuilderTextProperty.value}}" stepKey="fillText"/>
        <executeJS function="return document.evaluate(&quot;{{TextOnStage.textArea('1')}}&quot;, document.body).iterateNext().value" stepKey="seeTextContentTypeBlockStage"/>
        <assertContains stepKey="assertTextValue" after="seeTextContentTypeBlockStage">
            <expectedResult type="string">{{PageBuilderTextProperty.value}}</expectedResult>
            <actualResult type="variable">seeTextContentTypeBlockStage</actualResult>
        </assertContains>
        <seeElementInDOM selector="{{TextOnStorefront.textAreaText('1', PageBuilderTextProperty.value)}}" stepKey="seeTextContentTypePageStage"/>
        <seeElementInDOM selector="{{TextOnStorefront.textAreaText('1', PageBuilderTextProperty.value)}}" stepKey="seeTextContentTypeStorefront"/>
    </test>
    <test name="BlockRenderInlineEditedTextThroughBlockContentTypeTinyMCE3WysiwygDisabledByDefault" extends="BlockRenderInlineEditedTextThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Inline Edited Text Through Block Content Type With TinyMCE3 Wysiwyg Disabled By Default"/>
            <description value="Verify that users are able to successfully render and use the inline edited Text content type through the Block content type with TinyMCE3 and Wysiwyg disabled by default."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15179"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <magentoCLI command="config:set cms/wysiwyg/enabled disabled" stepKey="configWYSIWYG"/>
            <magentoCLI command="config:set cms/wysiwyg/editor Magento_Tinymce3/tinymce3Adapter" stepKey="configTinyMCE"/>
        </before>
        <click selector="{{TextOnStage.textArea('1')}}" stepKey="focusOnEditorArea"/>
        <fillField selector="{{TextOnStage.textArea('1')}}" userInput="{{PageBuilderTextProperty.value}}" stepKey="fillText"/>
        <executeJS function="return document.evaluate(&quot;{{TextOnStage.textArea('1')}}&quot;, document.body).iterateNext().value" stepKey="seeTextContentTypeBlockStage"/>
        <assertContains stepKey="assertTextValue" after="seeTextContentTypeBlockStage">
            <expectedResult type="string">{{PageBuilderTextProperty.value}}</expectedResult>
            <actualResult type="variable">seeTextContentTypeBlockStage</actualResult>
        </assertContains>
        <seeElementInDOM selector="{{TextOnStorefront.textAreaText('1', PageBuilderTextProperty.value)}}" stepKey="seeTextContentTypePageStage"/>
        <seeElementInDOM selector="{{TextOnStorefront.textAreaText('1', PageBuilderTextProperty.value)}}" stepKey="seeTextContentTypeStorefront"/>
    </test>
    <test name="BlockRenderFormEditedTextThroughBlockContentTypeTinyMCE3WysiwygEnabledByDefault" extends="BlockRenderInlineEditedTextThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Form Edited Text Through Block Content Type With TinyMCE3 Wysiwyg Enabled By Default"/>
            <description value="Verify that users are able to successfully render and use the form edited Text content type through the Block content type with TinyMCE3 and Wysiwyg enabled by default."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15180"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <magentoCLI command="config:set cms/wysiwyg/editor Magento_Tinymce3/tinymce3Adapter" stepKey="configTinyMCE"/>
        </before>
        <actionGroup ref="clickOutsideTextInlineEditing" stepKey="focusOnEditorArea"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage" after="focusOnEditorArea">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCE" stepKey="fillText">
            <argument name="property" value="PageBuilderTextProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings" after="fillText"/>
        <executeJS function="return document.evaluate(&quot;{{TextOnStage.textArea('1')}}&quot;, document.body).iterateNext().value" stepKey="seeTextContentTypeBlockStage"/>
        <assertContains stepKey="assertTextValue" after="seeTextContentTypeBlockStage">
            <expectedResult type="string">{{PageBuilderTextProperty.value}}</expectedResult>
            <actualResult type="variable">seeTextContentTypeBlockStage</actualResult>
        </assertContains>
    </test>
    <test name="BlockRenderFormEditedTextThroughBlockContentTypeTinyMCE3WysiwygDisabledByDefault" extends="BlockRenderInlineEditedTextThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Form Edited Text Through Block Content Type With TinyMCE3 Wysiwyg Disabled By Default"/>
            <description value="Verify that users are able to successfully render and use the form edited Text content type through the Block content type with TinyMCE3 and Wysiwyg disabled by default."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15181"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <magentoCLI command="config:set cms/wysiwyg/enabled disabled" stepKey="configWYSIWYG"/>
            <magentoCLI command="config:set cms/wysiwyg/editor Magento_Tinymce3/tinymce3Adapter" stepKey="configTinyMCE"/>
        </before>
        <actionGroup ref="clickOutsideTextInlineEditing" stepKey="focusOnEditorArea"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage" after="focusOnEditorArea">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <fillField selector="{{TextOnConfiguration.textArea}}" userInput="{{PageBuilderTextProperty.value}}" stepKey="fillText"/>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings" after="fillText"/>
        <executeJS function="return document.evaluate(&quot;{{TextOnStage.textArea('1')}}&quot;, document.body).iterateNext().value" stepKey="seeTextContentTypeBlockStage"/>
        <assertContains stepKey="assertTextValue" after="seeTextContentTypeBlockStage">
            <expectedResult type="string">{{PageBuilderTextProperty.value}}</expectedResult>
            <actualResult type="variable">seeTextContentTypeBlockStage</actualResult>
        </assertContains>
        <seeElementInDOM selector="{{TextOnStorefront.textAreaText('1', PageBuilderTextProperty.value)}}" stepKey="seeTextContentTypePageStage"/>
        <seeElementInDOM selector="{{TextOnStorefront.textAreaText('1', PageBuilderTextProperty.value)}}" stepKey="seeTextContentTypeStorefront"/>
    </test>
    <test name="BlockRenderBannerPosterAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Banner Poster Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the banner content type poster appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15188"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Banner -->
        <comment userInput="Add Banner" stepKey="commentAddBanner"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderBannerAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBannerMinHeight">
            <argument name="property" value="PageBuilderBannerMinimumHeightProperty"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachImage">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutPropertyGeneral" stepKey="attachMobileImage">
            <argument name="property" value="PageBuilderBackgroundMobileImage_GIF"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="selectBackgroundSize">
            <argument name="property" value="PageBuilderBackgroundSize_Contain"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectBackgroundPosition">
            <argument name="property" value="PageBuilderBackgroundPosition_Center"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectBackgroundAttachment">
            <argument name="property" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="selectBackgroundRepeat">
            <argument name="property" value="PageBuilderBackgroundRepeat_Enabled"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCE" stepKey="addTextToTinyMCE">
            <argument name="property" value="PageBuilderBannerMessageProperty"/>
            <argument name="section" value="BannerOnConfigurationPanel"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Plaintext_Green"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectBannerButtonShowOnHover">
            <argument name="property" value="PageBuilderBannerShowButtonOnHoverProperty"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterBannerOverlayShowOnHover">
            <argument name="property" value="PageBuilderBannerShowContentOverlayOnHoverProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBannerOverlayColor">
            <argument name="property" value="PageBuilderBannerOverlayColor_Blue_Opaque"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelLinkUrlField" stepKey="enterBannerLinkUrl">
            <argument name="property" value="PageBuilderBannerLinkUrlPropertyValidate"/>
            <argument name="selection" value="{{ExternalLink.url}}"/>
            <argument name="newTab" value="PageBuilderBannerNewTabDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusEditor"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeElement selector="{{BannerOnBackend.posterMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightStage"/>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateBackgroundAttributesStage">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Contain"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImage" stepKey="validateImageStage">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <seeElement selector="{{BannerOnBackend.messageContent('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeMessageContentStage"/>
        <seeElement selector="{{BannerOnBackend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seeAppearanceStage"/>
        <seeElementInDOM selector="{{BannerOnBackend.button('1')}}" stepKey="seeButtonInDOMStage"/>
        <dontSeeElement selector="{{BannerOnBackend.button('1')}}" stepKey="dontSeeButtonStage"/>
        <seeElement selector="{{BannerOnBackend.transparentOverlay('1')}}" stepKey="seeTransparentOverlayStage"/>
        <moveMouseOver selector="{{BannerOnBackend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="moveMouseOverBannerStage"/>
        <seeElement selector="{{BannerOnBackend.button('1')}}" stepKey="seeButtonOnHoverStage"/>
        <seeElement selector="{{BannerOnBackend.overlayBackgroundColor('1', PageBuilderBannerOverlayColor_Blue_Opaque.value)}}" stepKey="seeOverlayOnHoverStage"/>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{BannerOnFrontend.posterMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightPageStage"/>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateBackgroundAttributesPageStage">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Contain"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateImageOnPageStage">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.messageContent('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeMessageContentPageStage"/>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seeAppearancePageStage"/>
        <seeElementInDOM selector="{{BannerOnFrontend.button('1')}}" stepKey="seeButtonInDOMPageStage"/>
        <dontSeeElement selector="{{BannerOnFrontend.button('1')}}" stepKey="dontSeeButtonPageStage"/>
        <seeElement selector="{{BannerOnFrontend.transparentOverlay('1')}}" stepKey="seeTransparentOverlayPageStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToStoreFront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.posterMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightStorefront"/>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateBackgroundAttributesStorefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Contain"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateImageOnStorefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.messageContent('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeMessageContentStorefront"/>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerAppearance_Poster.value)}}" stepKey="seeAppearanceStorefront"/>
        <seeElementInDOM selector="{{BannerOnFrontend.button('1')}}" stepKey="seeButtonInDOMStorefront"/>
        <dontSeeElement selector="{{BannerOnFrontend.button('1')}}" stepKey="dontSeeButtonStorefront"/>
        <seeElement selector="{{BannerOnFrontend.transparentOverlay('1')}}" stepKey="seeTransparentOverlayStorefront"/>
        <moveMouseOver selector="{{BannerOnFrontend.base('1')}}" stepKey="moveMouseOverBannerStorefront"/>
        <seeElement selector="{{BannerOnFrontend.button('1')}}" stepKey="seeButtonOnHoverStorefront"/>
        <seeElement selector="{{BannerOnFrontend.overlayBackgroundColor('1', PageBuilderBannerOverlayColor_Blue_Opaque.value)}}" stepKey="seeOverlayOnHoverStorefront"/>
        <moveMouseOver selector="{{BannerOnFrontend.base('1')}}" x="-1" y="0" stepKey="moveMouseAwayFromBanner"/>
        <!-- Click banner anchor -->
        <comment userInput="Click banner anchor" stepKey="clickBannerAnchorStorefront" />
        <click selector="{{BannerOnFrontend.linkUrl('1', PageBuilderBannerLinkUrlPropertyValidate.value)}}" stepKey="clickLinkUrlStorefront"/>
        <wait time="3" stepKey="waitArbitraryTimeForPotentialNavigationToOccurStorefront" />
        <seeCurrentUrlEquals url="{{PageBuilderBannerLinkUrlPropertyValidate.value}}" stepKey="seeThatUrlIsChangedToButtonUrlStorefront" />
    </test>
    <test name="BlockRenderBannerCollageCenteredAppearanceThroughBlockContentType" extends="BlockRenderBannerPosterAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Banner Collage Centered Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the banner content type collage centered appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15189"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerCollageCentered"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderBannerCollageCenteredProperty"/>
        </actionGroup>
        <seeElement selector="{{BannerOnBackend.collageMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightStage"/>
        <seeElement selector="{{BannerOnFrontend.collageMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightPageStage"/>
        <seeElement selector="{{BannerOnFrontend.collageMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightStorefront"/>
        <seeElement selector="{{BannerOnBackend.appearance('1', PageBuilderBannerCollageCenteredProperty.value)}}" stepKey="seeAppearanceStage"/>
        <moveMouseOver selector="{{BannerOnBackend.appearance('1', PageBuilderBannerCollageCenteredProperty.value)}}" stepKey="moveMouseOverBannerStage"/>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerCollageCenteredProperty.value)}}" stepKey="seeAppearancePageStage"/>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerCollageCenteredProperty.value)}}" stepKey="seeAppearanceStorefront"/>
    </test>
    <test name="BlockRenderBannerCollageLeftAppearanceThroughBlockContentType" extends="BlockRenderBannerPosterAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Banner Collage Left Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the banner content type collage left appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15190"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerCollageLeft"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderBannerCollageLeftProperty"/>
        </actionGroup>
        <seeElement selector="{{BannerOnBackend.collageMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightStage"/>
        <seeElement selector="{{BannerOnFrontend.collageMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightPageStage"/>
        <seeElement selector="{{BannerOnFrontend.collageMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightStorefront"/>
        <seeElement selector="{{BannerOnBackend.appearance('1', PageBuilderBannerCollageLeftProperty.value)}}" stepKey="seeAppearanceStage"/>
        <moveMouseOver selector="{{BannerOnBackend.appearance('1', PageBuilderBannerCollageLeftProperty.value)}}" stepKey="moveMouseOverBannerStage"/>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerCollageLeftProperty.value)}}" stepKey="seeAppearancePageStage"/>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerCollageLeftProperty.value)}}" stepKey="seeAppearanceStorefront"/>
    </test>
    <test name="BlockRenderBannerCollageRightAppearanceThroughBlockContentType" extends="BlockRenderBannerPosterAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Banner Collage Right Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the banner content type collage right appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15191"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerCollageRight"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderBannerCollageRightProperty"/>
        </actionGroup>
        <seeElement selector="{{BannerOnBackend.collageMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightStage"/>
        <seeElement selector="{{BannerOnFrontend.collageMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightPageStage"/>
        <seeElement selector="{{BannerOnFrontend.collageMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightStorefront"/>
        <seeElement selector="{{BannerOnBackend.appearance('1', PageBuilderBannerCollageRightProperty.value)}}" stepKey="seeAppearanceStage"/>
        <moveMouseOver selector="{{BannerOnBackend.appearance('1', PageBuilderBannerCollageRightProperty.value)}}" stepKey="moveMouseOverBannerStage"/>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerCollageRightProperty.value)}}" stepKey="seeAppearancePageStage"/>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerCollageRightProperty.value)}}" stepKey="seeAppearanceStorefront"/>
    </test>
    <test name="BlockRenderInlineEditedBannerThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Inline Edited Banner Through Block Content Type With TinyMCE4 Wysiwyg Enabled By Default"/>
            <description value="Verify that users are able to successfully render and use the inline edited Banner content type through the Block content type with TinyMCE4 and Wysiwyg enabled by default."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15192"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <magentoCLI command="config:set cms/wysiwyg/enabled enabled" stepKey="configWYSIWYG"/>
            <magentoCLI command="config:set cms/wysiwyg/editor mage/adminhtml/wysiwyg/tiny_mce/tinymce4Adapter" stepKey="configTinyMCE"/>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <magentoCLI command="config:set cms/wysiwyg/enabled enabled" stepKey="enableWYSIWYG1"/>
            <magentoCLI command="config:set cms/wysiwyg/editor mage/adminhtml/wysiwyg/tiny_mce/tinymce4Adapter" stepKey="enableTinyMCE4_1"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Banner -->
        <comment userInput="Add Banner" stepKey="commentAddBanner"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!--Input text into banner-->
        <comment userInput="Input text into banner" stepKey="commentInputIntoBanner"/>
        <click selector="{{BannerOnBackend.tinymce('1')}}" stepKey="focusOnEditorArea"/>
        <fillField selector="{{BannerOnBackend.tinymce('1')}}" userInput="{{PageBuilderBannerMessageProperty.value}}" stepKey="fillBanner"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="lostFocusFromWYSIWYG1"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeElementInDOM selector="{{BannerOnBackend.messageContentText('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeBannerContentTypeBlockStage"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElementInDOM selector="{{BannerOnFrontend.messageContentText('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeBannerContentTypePageStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToStoreFront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElementInDOM selector="{{BannerOnFrontend.messageContentText('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeBannerContentTypeStorefront"/>
    </test>
    <test name="BlockRenderInlineEditedBannerThroughBlockContentTypeTinyMCE4WysiwygDisabledByDefault" extends="BlockRenderInlineEditedBannerThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Inline Edited Banner Through Block Content Type With TinyMCE4 Wysiwyg disabled By Default"/>
            <description value="Verify that users are able to successfully render and use the inline edited Banner content type through the Block content type with TinyMCE4 and Wysiwyg disabled by default."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15193"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <magentoCLI command="config:set cms/wysiwyg/enabled disabled" stepKey="configWYSIWYG"/>
        </before>
        <click selector="{{BannerOnBackend.textArea('1')}}" stepKey="focusOnEditorArea"/>
        <fillField selector="{{BannerOnBackend.textArea('1')}}" userInput="{{PageBuilderBannerMessageProperty.value}}" stepKey="fillBanner"/>
        <executeJS function="return document.evaluate(&quot;{{BannerOnBackend.textArea('1')}}&quot;, document.body).iterateNext().value" stepKey="seeBannerContentTypeBlockStage"/>
        <assertContains stepKey="assertBannerValue" after="seeBannerContentTypeBlockStage">
            <expectedResult type="string">{{PageBuilderBannerMessageProperty.value}}</expectedResult>
            <actualResult type="variable">seeBannerContentTypeBlockStage</actualResult>
        </assertContains>
        <seeElementInDOM selector="{{BannerOnFrontend.messageContentTextArea('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeBannerContentTypePageStage"/>
        <seeElementInDOM selector="{{BannerOnFrontend.messageContentTextArea('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeBannerContentTypeStorefront"/>
    </test>
    <test name="BlockRenderFormEditedBannerThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault" extends="BlockRenderInlineEditedBannerThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Form Edited Banner Through Block Content Type With TinyMCE4 Wysiwyg Enabled By Default"/>
            <description value="Verify that users are able to successfully render and use the form edited Banner content type through the Block content type with TinyMCE4 and Wysiwyg enabled by default."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15194"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <actionGroup ref="clickOutsideTextInlineEditing" stepKey="closeLiveEdit" after="focusOnEditorArea"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage" after="closeLiveEdit">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCE" stepKey="fillBanner">
            <argument name="property" value="PageBuilderBannerMessageProperty"/>
            <argument name="section" value="BannerOnConfigurationPanel"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings" after="fillBanner"/>
    </test>
    <test name="BlockRenderFormEditedBannerThroughBlockContentTypeTinyMCE4WysiwygDisabledByDefault" extends="BlockRenderInlineEditedBannerThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Form Edited Banner Through Block Content Type With TinyMCE4 Wysiwyg Disabled By Default"/>
            <description value="Verify that users are able to successfully render and use the form edited Banner content type through the Block content type with TinyMCE4 and Wysiwyg disabled by default."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15195"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <actionGroup ref="clickOutsideTextInlineEditing" stepKey="closeLiveEdit" after="focusOnEditorArea"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage" after="closeLiveEdit">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCE" stepKey="fillBanner">
            <argument name="property" value="PageBuilderBannerMessageProperty"/>
            <argument name="section" value="BannerOnConfigurationPanel"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings" after="fillBanner"/>
    </test>
    <test name="BlockRenderInlineEditedBannerThroughBlockContentTypeTinyMCE3WysiwygEnabledByDefault" extends="BlockRenderInlineEditedBannerThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Inline Edited Banner Through Block Content Type With TinyMCE3 Wysiwyg Enabled By Default"/>
            <description value="Verify that users are able to successfully render and use the inline edited Banner content type through the Block content type with TinyMCE3 and Wysiwyg enabled by default."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15196"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <magentoCLI command="config:set cms/wysiwyg/editor Magento_Tinymce3/tinymce3Adapter" stepKey="configTinyMCE"/>
        </before>
        <click selector="{{BannerOnBackend.textArea('1')}}" stepKey="focusOnEditorArea"/>
        <fillField selector="{{BannerOnBackend.textArea('1')}}" userInput="{{PageBuilderBannerMessageProperty.value}}" stepKey="fillBanner"/>
        <executeJS function="return document.evaluate(&quot;{{BannerOnBackend.textArea('1')}}&quot;, document.body).iterateNext().value" stepKey="seeBannerContentTypeBlockStage"/>
        <assertContains stepKey="assertBannerValue" after="seeBannerContentTypeBlockStage">
            <expectedResult type="string">{{PageBuilderBannerMessageProperty.value}}</expectedResult>
            <actualResult type="variable">seeBannerContentTypeBlockStage</actualResult>
        </assertContains>
        <seeElementInDOM selector="{{BannerOnFrontend.messageContentTextArea('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeBannerContentTypePageStage"/>
        <seeElementInDOM selector="{{BannerOnFrontend.messageContentTextArea('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeBannerContentTypeStorefront"/>
    </test>
    <test name="BlockRenderInlineEditedBannerThroughBlockContentTypeTinyMCE3WysiwygDisabledByDefault" extends="BlockRenderInlineEditedBannerThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Inline Edited Banner Through Block Content Type With TinyMCE3 Wysiwyg Disabled By Default"/>
            <description value="Verify that users are able to successfully render and use the inline edited Banner content type through the Block content type with TinyMCE3 and Wysiwyg disabled by default."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15197"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <magentoCLI command="config:set cms/wysiwyg/enabled disabled" stepKey="configWYSIWYG"/>
            <magentoCLI command="config:set cms/wysiwyg/editor Magento_Tinymce3/tinymce3Adapter" stepKey="configTinyMCE"/>
        </before>
        <click selector="{{BannerOnBackend.textArea('1')}}" stepKey="focusOnEditorArea"/>
        <fillField selector="{{BannerOnBackend.textArea('1')}}" userInput="{{PageBuilderBannerMessageProperty.value}}" stepKey="fillBanner"/>
        <executeJS function="return document.evaluate(&quot;{{BannerOnBackend.textArea('1')}}&quot;, document.body).iterateNext().value" stepKey="seeBannerContentTypeBlockStage"/>
        <assertContains stepKey="assertBannerValue" after="seeBannerContentTypeBlockStage">
            <expectedResult type="string">{{PageBuilderBannerMessageProperty.value}}</expectedResult>
            <actualResult type="variable">seeBannerContentTypeBlockStage</actualResult>
        </assertContains>
        <seeElementInDOM selector="{{BannerOnFrontend.messageContentTextArea('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeBannerContentTypePageStage"/>
        <seeElementInDOM selector="{{BannerOnFrontend.messageContentTextArea('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeBannerContentTypeStorefront"/>
    </test>
    <test name="BlockRenderFormEditedBannerThroughBlockContentTypeTinyMCE3WysiwygEnabledByDefault" extends="BlockRenderInlineEditedBannerThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Form Edited Banner Through Block Content Type With TinyMCE3 Wysiwyg Enabled By Default"/>
            <description value="Verify that users are able to successfully render and use the form edited Banner content type through the Block content type with TinyMCE3 and Wysiwyg enabled by default."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15198"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <magentoCLI command="config:set cms/wysiwyg/editor Magento_Tinymce3/tinymce3Adapter" stepKey="configTinyMCE"/>
        </before>
        <actionGroup ref="clickOutsideTextInlineEditing" stepKey="focusOnEditorArea"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage" after="focusOnEditorArea">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCE" stepKey="fillBanner">
            <argument name="property" value="PageBuilderBannerMessageProperty"/>
            <argument name="section" value="BannerOnConfigurationPanel"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings" after="fillBanner"/>
        <executeJS function="return document.evaluate(&quot;{{BannerOnBackend.textArea('1')}}&quot;, document.body).iterateNext().value" stepKey="seeBannerContentTypeBlockStage"/>
        <assertContains stepKey="assertBannerValue" after="seeBannerContentTypeBlockStage">
            <expectedResult type="string">{{PageBuilderBannerMessageProperty.value}}</expectedResult>
            <actualResult type="variable">seeBannerContentTypeBlockStage</actualResult>
        </assertContains>
    </test>
    <test name="BlockRenderFormEditedBannerThroughBlockContentTypeTinyMCE3WysiwygDisabledByDefault" extends="BlockRenderInlineEditedBannerThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Form Edited Banner Through Block Content Type With TinyMCE3 Wysiwyg Disabled By Default"/>
            <description value="Verify that users are able to successfully render and use the form edited Banner content type through the Block content type with TinyMCE3 and Wysiwyg disabled by default."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15199"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <magentoCLI command="config:set cms/wysiwyg/enabled disabled" stepKey="configWYSIWYG"/>
            <magentoCLI command="config:set cms/wysiwyg/editor Magento_Tinymce3/tinymce3Adapter" stepKey="configTinyMCE"/>
        </before>
        <actionGroup ref="clickOutsideTextInlineEditing" stepKey="focusOnEditorArea"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage" after="focusOnEditorArea">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <fillField selector="{{BannerOnConfigurationPanel.textArea}}" userInput="{{PageBuilderBannerMessageProperty.value}}" stepKey="fillBanner"/>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings" after="fillBanner"/>
        <executeJS function="return document.evaluate(&quot;{{BannerOnBackend.textArea('1')}}&quot;, document.body).iterateNext().value" stepKey="seeBannerContentTypeBlockStage"/>
        <assertContains stepKey="assertBannerValue" after="seeBannerContentTypeBlockStage">
            <expectedResult type="string">{{PageBuilderBannerMessageProperty.value}}</expectedResult>
            <actualResult type="variable">seeBannerContentTypeBlockStage</actualResult>
        </assertContains>
        <seeElementInDOM selector="{{BannerOnFrontend.messageContentTextArea('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeBannerContentTypePageStage"/>
        <seeElementInDOM selector="{{BannerOnFrontend.messageContentTextArea('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeBannerContentTypeStorefront"/>
    </test>
    <test name="BlockRenderSliderThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Slider Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the slider content type through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15206"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-slide"/>
            <group value="pagebuilder-sliderCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Slider -->
        <comment userInput="Add Slider" stepKey="commentAddSlider"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderSliderContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragSliderOntoStage">
            <argument name="contentType" value="PageBuilderSliderContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanelSmallByIndex" stepKey="openEditPanelAfterDrop">
            <argument name="section" value="SlideOnBackend"/>
        </actionGroup>
        <!-- Fill Out Slide Item Edit Panel -->
        <comment userInput="Fill Out Slide Item Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="addTextToTinyMCE" stepKey="addTextToTinyMCE">
            <argument name="property" value="PageBuilderSlideItemContent_Slide1"/>
            <argument name="section" value="SlideOnConfigurationPanel"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveSlideEditPanelSettings"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusSlide"/>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openSliderEditPanel">
            <argument name="contentType" value="PageBuilderSliderContentType"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="enterAutoPlay">
            <argument name="property" value="PageBuilderSliderAutoPlay_Enabled"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterAutoPlaySpeed">
            <argument name="property" value="PageBuilderSliderAutoPlaySpeed_50000"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="enterFade">
            <argument name="property" value="PageBuilderSliderFade_Enabled"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="enterInfiniteLoop">
            <argument name="property" value="PageBuilderSliderInfiniteLoop_Enabled"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="enterShowArrow">
            <argument name="property" value="PageBuilderSliderShowArrows_Enabled"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="enterShowDots">
            <argument name="property" value="PageBuilderSliderShowDots_Enabled"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSliderMinHeight">
            <argument name="property" value="PageBuilderSliderMinHeight_100"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveSliderEditPanelSettings"/>
        <actionGroup ref="addChildContentTypeFromOptionMenu" stepKey="addChildContentType">
            <argument name="contentType" value="PageBuilderSliderContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanelSmallByIndex" stepKey="openEditPanelAfterAddSlide">
            <argument name="section" value="SlideOnBackend"/>
            <argument name="targetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCE" stepKey="addTextToTinyMCE2">
            <argument name="property" value="PageBuilderSlideItemContent_Slide2"/>
            <argument name="section" value="SlideOnConfigurationPanel"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveSlide2EditPanelSettings"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeElement selector="{{SliderOnStage.autoPlay('1', PageBuilderSliderAutoPlay_Enabled.value)}}" stepKey="seeAutoPlayStage"/>
        <seeElement selector="{{SliderOnStage.autoPlaySpeed('1', PageBuilderSliderAutoPlaySpeed_50000.value)}}" stepKey="seeAutoPlaySpeedStage"/>
        <seeElement selector="{{SliderOnStage.fade('1', PageBuilderSliderFade_Enabled.value)}}" stepKey="seeFadeStage"/>
        <seeElement selector="{{SliderOnStage.infiniteLoop('1', PageBuilderSliderInfiniteLoop_Enabled.value)}}" stepKey="seeInfiniteLoopStage"/>
        <seeElement selector="{{SliderOnStage.showArrows('1', PageBuilderSliderShowArrows_Enabled.value)}}" stepKey="seeArrowsStage"/>
        <seeElement selector="{{SliderOnStage.showDots('1', PageBuilderSliderShowDots_Enabled.value)}}" stepKey="seeDotsStage"/>
        <seeElement selector="{{SliderOnStage.minHeight('1', PageBuilderSliderMinHeight_100.value)}}" stepKey="seeMinHeightStage"/>
        <click selector="{{SliderOnStage.slideNavigationDot('1', '1')}}" stepKey="clickSlide1Stage"/>
        <waitForPageLoad stepKey="waitForPageLoadStage1"/>
        <seeElement selector="{{SlideOnBackend.messageContent('1', PageBuilderSlideItemContent_Slide1.value)}}" stepKey="seeSlide1ContentStage"/>
        <click selector="{{SliderOnStage.slideNavigationDot('1', '2')}}" stepKey="clickSlide2Stage"/>
        <waitForPageLoad stepKey="waitForPageLoadStage2"/>
        <seeElement selector="{{SlideOnBackend.messageContent('2', PageBuilderSlideItemContent_Slide2.value)}}" stepKey="seeSlide2ContentStage"/>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{SliderOnFrontend.autoPlay('1', PageBuilderSliderAutoPlay_Enabled.value)}}" stepKey="seeAutoPlayPageStage"/>
        <seeElement selector="{{SliderOnFrontend.autoPlaySpeed('1', PageBuilderSliderAutoPlaySpeed_50000.value)}}" stepKey="seeAutoPlaySpeedPageStage"/>
        <seeElement selector="{{SliderOnFrontend.fade('1', PageBuilderSliderFade_Enabled.value)}}" stepKey="seeFadePageStage"/>
        <seeElement selector="{{SliderOnFrontend.infiniteLoop('1', PageBuilderSliderInfiniteLoop_Enabled.value)}}" stepKey="seeInfiniteLoopPageStage"/>
        <seeElement selector="{{SliderOnFrontend.showArrows('1', PageBuilderSliderShowArrows_Enabled.value)}}" stepKey="seeArrowsPageStage"/>
        <seeElement selector="{{SliderOnFrontend.showDots('1', PageBuilderSliderShowDots_Enabled.value)}}" stepKey="seeDotsPageStage"/>
        <seeElement selector="{{SliderOnFrontend.minHeight('1', PageBuilderSliderMinHeight_100.value)}}" stepKey="seeHeightPageStage"/>
        <seeElementInDOM selector="{{SlideOnFrontend.messageContent('1', PageBuilderSlideItemContent_Slide1.value)}}" stepKey="seeSlide1ContentPageStage"/>
        <seeElementInDOM selector="{{SlideOnFrontend.messageContent('2', PageBuilderSlideItemContent_Slide2.value)}}" stepKey="seeSlide2ContentPageStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToStoreFront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{SliderOnFrontend.autoPlay('1', PageBuilderSliderAutoPlay_Enabled.value)}}" stepKey="seeAutoPlayStorefront"/>
        <seeElement selector="{{SliderOnFrontend.autoPlaySpeed('1', PageBuilderSliderAutoPlaySpeed_50000.value)}}" stepKey="seeAutoPlaySpeedStorefront"/>
        <seeElement selector="{{SliderOnFrontend.fade('1', PageBuilderSliderFade_Enabled.value)}}" stepKey="seeFadeStorefront"/>
        <seeElement selector="{{SliderOnFrontend.infiniteLoop('1', PageBuilderSliderInfiniteLoop_Enabled.value)}}" stepKey="seeInfiniteLoopStorefront"/>
        <seeElement selector="{{SliderOnFrontend.showArrows('1', PageBuilderSliderShowArrows_Enabled.value)}}" stepKey="seeArrowsStorefront"/>
        <seeElement selector="{{SliderOnFrontend.showDots('1', PageBuilderSliderShowDots_Enabled.value)}}" stepKey="seeDotsStorefront"/>
        <seeElement selector="{{SliderOnFrontend.minHeight('1', PageBuilderSliderMinHeight_100.value)}}" stepKey="seeHeightStorefront"/>
        <click selector="{{SliderOnFrontend.slideNavigationDot('1', '1')}}" stepKey="clickSlide1Storefront"/>
        <waitForPageLoad stepKey="waitForPageLoadStorefront1"/>
        <seeElement selector="{{SlideOnFrontend.messageContent('1', PageBuilderSlideItemContent_Slide1.value)}}" stepKey="seeSlide1ContentStorefront"/>
        <click selector="{{SliderOnFrontend.slideNavigationDot('1', '2')}}" stepKey="clickSlide2Storefront"/>
        <waitForPageLoad stepKey="waitForPageLoadStorefront2"/>
        <seeElement selector="{{SlideOnFrontend.messageContent('2', PageBuilderSlideItemContent_Slide2.value)}}" stepKey="seeSlide2ContentStorefront"/>
    </test>
    <test name="BlockRenderSlideItemPosterAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Slide Item Through Block Content Type With Poster Appearance"/>
            <description value="Verify that users are able to successfully render and use the slide item content type with poster appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15207"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-slide"/>
            <group value="pagebuilder-slideItemPoster"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <actionGroup ref="navigateToMediaGallery" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="NavigateToFolder">
                <argument name="FolderName" value="{{PageBuilderBackgroundImage_JPG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage">
                <argument name="Image" value="PageBuilderBackgroundImage_JPG"/>
            </actionGroup>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderSliderContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragSliderIntoStage">
            <argument name="contentType" value="PageBuilderSliderContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanelSmallByIndex" stepKey="openEditPanelAfterDrop">
            <argument name="section" value="SlideOnBackend"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideName">
            <argument name="property" value="PageBuilderSlideItemSlideName_Slide1"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterMinHeight">
            <argument name="property" value="PageBuilderSlideItemMinimumHeight_500"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachImage">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="selectBackgroundSize">
            <argument name="property" value="PageBuilderBackgroundSize_Contain"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectBackgroundPosition">
            <argument name="property" value="PageBuilderBackgroundPosition_Center"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="selectBackgroundRepeat">
            <argument name="property" value="PageBuilderBackgroundRepeat_Enabled"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Plaintext_Green"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectButtonShowOnHover">
            <argument name="property" value="PageBuilderSlideItemShowButton_OnHover"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectButtonType">
            <argument name="property" value="PageBuilderSlideItemButtonType_Secondary"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterButtonText">
            <argument name="property" value="PageBuilderSlideItemButtonText_Common"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterOverlayShowOnHover">
            <argument name="property" value="PageBuilderSlideItemShowOverlay_OnHover"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterOverlayColor">
            <argument name="property" value="PageBuilderSlideItemOverlayColor_Blue_Opaque"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCE" stepKey="enterMessageText">
            <argument name="property" value="PageBuilderSlideItemContent_Slide1"/>
            <argument name="section" value="SlideOnConfigurationPanel"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelLinkUrlField" stepKey="enterSlideLinkUrl">
            <argument name="property" value="PageBuilderSlideItemLinkURL_External"/>
            <argument name="selection" value="{{ExternalLink.url}}"/>
            <argument name="newTab" value="PageBuilderSlideItemLinkNewTab_False"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeElement selector="{{SlideOnBackend.appearance('1', PageBuilderAppearance_Poster.value)}}" stepKey="seeAppearanceStage"/>
        <seeElement selector="{{SlideOnBackend.slideName('1', PageBuilderSlideItemSlideName_Slide1.value)}}" stepKey="seeSlideNameStage"/>
        <seeElement selector="{{SlideOnBackend.posterMinimumHeight('1', PageBuilderSlideItemMinimumHeight_500.value)}}" stepKey="seeMinimumHeightStage"/>
        <seeElement selector="{{SlideOnBackend.backgroundColor('1', PageBuilderBackgroundColor_Plaintext_Green.rgb)}}" stepKey="seeBackgroundColorStage"/>
        <seeElement selector="{{SlideOnBackend.backgroundImage('1', PageBuilderBackgroundImage_JPG.fileName)}}" stepKey="seeBackgroundImageStage"/>
        <seeElement selector="{{SlideOnBackend.backgroundSize('1', PageBuilderBackgroundSize_Contain.value)}}" stepKey="seeBackgroundSizeStage"/>
        <seeElement selector="{{SlideOnBackend.backgroundPosition('1', PageBuilderBackgroundPosition_Center.styleValue)}}" stepKey="seeBackgroundPositionStage"/>
        <seeElement selector="{{SlideOnBackend.backgroundRepeat('1', PageBuilderBackgroundRepeat_Enabled.styleValue)}}" stepKey="seeBackgroundRepeatStage"/>
        <actionGroup ref="validateBackgroundImage" stepKey="validateImageStage">
            <argument name="section" value="SlideOnBackend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <seeElement selector="{{SlideOnBackend.messageContent('1', PageBuilderSlideItemContent_Slide1.value)}}" stepKey="seeMessageContentStage"/>
        <seeElementInDOM selector="{{SlideOnBackend.button('1')}}" stepKey="seeButtonInDOMStage"/>
        <dontSeeElement selector="{{SlideOnBackend.button('1')}}" stepKey="dontSeeButtonStage"/>
        <seeElement selector="{{SlideOnBackend.transparentOverlay('1')}}" stepKey="seeTransparentOverlayStage"/>
        <moveMouseOver selector="{{SlideOnBackend.base('1')}}" stepKey="moveMouseOverSlideStage"/>
        <seeElement selector="{{SlideOnBackend.button('1')}}" stepKey="seeButtonOnHoverStage"/>
        <seeElement selector="{{SlideOnBackend.showButton('1', PageBuilderSlideItemShowButton_OnHover.value)}}" stepKey="seeButtonStateStage"/>
        <seeElement selector="{{SlideOnBackend.buttonType('1', PageBuilderSlideItemButtonType_Secondary.value)}}" stepKey="seeButtonTypeStage"/>
        <seeElement selector="{{SlideOnBackend.buttonText('1', PageBuilderSlideItemButtonText_Common.value)}}" stepKey="seeButtonTextStage"/>
        <seeElement selector="{{SlideOnBackend.showOverlay('1', PageBuilderSlideItemShowOverlay_OnHover.value)}}" stepKey="seeOverlayStateStage"/>
        <seeElement selector="{{SlideOnBackend.overlayBackgroundColor('1', PageBuilderSlideItemOverlayColor_Blue_Opaque.value)}}" stepKey="seeOverlayOnHoverStage"/>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_Poster.value)}}" stepKey="seeAppearancePageStage"/>
        <seeElement selector="{{SlideOnFrontend.slideName('1', PageBuilderSlideItemSlideName_Slide1.value)}}" stepKey="seeSlideNamePageStage"/>
        <seeElement selector="{{SlideOnFrontend.minimumHeight('1', PageBuilderSlideItemMinimumHeight_500.value)}}" stepKey="seeMinimumHeightPageStage"/>
        <seeElement selector="{{SlideOnFrontend.backgroundColor('1', PageBuilderBackgroundColor_Plaintext_Green.rgb)}}" stepKey="seeBackgroundColorPageStage"/>
        <seeElement selector="{{SlideOnFrontend.backgroundSize('1', PageBuilderBackgroundSize_Contain.value)}}" stepKey="seeBackgroundSizePageStage"/>
        <seeElement selector="{{SlideOnFrontend.backgroundPosition('1', PageBuilderBackgroundPosition_Center.styleValue)}}" stepKey="seeBackgroundPositionPageStage"/>
        <seeElement selector="{{SlideOnFrontend.backgroundRepeat('1', PageBuilderBackgroundRepeat_Enabled.styleValue)}}" stepKey="seeBackgroundRepeatPageStage"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateImagePageStage">
            <argument name="section" value="SlideOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <seeElement selector="{{SlideOnFrontend.messageContent('1', PageBuilderSlideItemContent_Slide1.value)}}" stepKey="seeMessageContentPageStage"/>
        <seeElement selector="{{SlideOnFrontend.transparentOverlay('1')}}" stepKey="seeTransparentOverlayPageStage"/>
        <seeElementInDOM selector="{{SlideOnFrontend.linkUrl('1', PageBuilderSlideItemLinkURL_External.value)}}" stepKey="seeLinkUrlPageStage"/>
        <seeElementInDOM selector="{{SlideOnFrontend.showButton('1', PageBuilderSlideItemShowButton_OnHover.value)}}" stepKey="seeButtonStatePageStage"/>
        <seeElementInDOM selector="{{SlideOnFrontend.buttonType('1', PageBuilderSlideItemButtonType_Secondary.value)}}" stepKey="seeButtonTypePageStage"/>
        <seeElementInDOM selector="{{SlideOnFrontend.button('1')}}" stepKey="seeButtonInDOMPageStage"/>
        <seeElementInDOM selector="{{SlideOnFrontend.showOverlay('1', PageBuilderSlideItemShowOverlay_OnHover.value)}}" stepKey="seeOverlayStatePageStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToStoreFront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_Poster.value)}}" stepKey="seeAppearanceStorefront"/>
        <seeElement selector="{{SlideOnFrontend.slideName('1', PageBuilderSlideItemSlideName_Slide1.value)}}" stepKey="seeSlideNameStorefront"/>
        <seeElement selector="{{SlideOnFrontend.minimumHeight('1', PageBuilderSlideItemMinimumHeight_500.value)}}" stepKey="seeMinimumHeightStorefront"/>
        <seeElement selector="{{SlideOnFrontend.backgroundColor('1', PageBuilderBackgroundColor_Plaintext_Green.rgb)}}" stepKey="seeBackgroundColorStorefront"/>
        <seeElement selector="{{SlideOnFrontend.backgroundSize('1', PageBuilderBackgroundSize_Contain.value)}}" stepKey="seeBackgroundSizeStorefront"/>
        <seeElement selector="{{SlideOnFrontend.backgroundPosition('1', PageBuilderBackgroundPosition_Center.styleValue)}}" stepKey="seeBackgroundPositionStorefront"/>
        <seeElement selector="{{SlideOnFrontend.backgroundRepeat('1', PageBuilderBackgroundRepeat_Enabled.styleValue)}}" stepKey="seeBackgroundRepeatStorefront"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateImageStorefront">
            <argument name="section" value="SlideOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <seeElement selector="{{SlideOnFrontend.messageContent('1', PageBuilderSlideItemContent_Slide1.value)}}" stepKey="seeMessageContentStorefront"/>
        <seeElementInDOM selector="{{SlideOnFrontend.button('1')}}" stepKey="seeButtonInDOMStorefront"/>
        <seeElement selector="{{SlideOnFrontend.linkUrl('1', PageBuilderSlideItemLinkURL_External.value)}}" stepKey="seeLinkUrlStorefront"/>
        <dontSeeElement selector="{{SlideOnFrontend.button('1')}}" stepKey="dontSeeButtonStorefront"/>
        <seeElement selector="{{SlideOnFrontend.transparentOverlay('1')}}" stepKey="seeTransparentOverlayStorefront"/>
        <moveMouseOver selector="{{SlideOnFrontend.base('1')}}" stepKey="moveMouseOverSlideStorefront"/>
        <seeElement selector="{{SlideOnFrontend.button('1')}}" stepKey="seeButtonOnHoverStorefront"/>
        <seeElement selector="{{SlideOnFrontend.showButton('1', PageBuilderSlideItemShowButton_OnHover.value)}}" stepKey="seeButtonStateStorefront"/>
        <seeElement selector="{{SlideOnFrontend.buttonType('1', PageBuilderSlideItemButtonType_Secondary.value)}}" stepKey="seeButtonTypeStorefront"/>
        <seeElement selector="{{SlideOnFrontend.buttonText('1', PageBuilderSlideItemButtonText_Common.value)}}" stepKey="seeButtonTextStorefront"/>
        <seeElement selector="{{SlideOnFrontend.showOverlay('1', PageBuilderSlideItemShowOverlay_OnHover.value)}}" stepKey="seeOverlayStateStorefront"/>
        <seeElement selector="{{SlideOnFrontend.overlayBackgroundColor('1', PageBuilderSlideItemOverlayColor_Blue_Opaque.value)}}" stepKey="seeOverlayOnHoverStorefront"/>
        <moveMouseOver selector="{{SlideOnFrontend.base('1')}}" x="-1" y="0" stepKey="moveMouseAwayFromSlide"/>
        <!-- Click slide anchor -->
        <comment userInput="Click slide anchor" stepKey="clickSlideAnchorStorefront" />
        <click selector="{{SlideOnFrontend.linkUrl('1', PageBuilderSlideItemLinkURL_External.value)}}" stepKey="clickLinkUrlStorefront"/>
        <wait time="3" stepKey="waitArbitraryTimeForPotentialNavigationToOccurStorefront" />
        <seeCurrentUrlEquals url="{{PageBuilderSlideItemLinkURL_External.value}}" stepKey="seeThatUrlIsChangedToButtonUrlStorefront" />
    </test>
    <test name="BlockRenderSlideItemCollageLeftAppearanceThroughBlockContentType" extends="BlockRenderSlideItemPosterAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Slide Item Through Block Content Type With Collage Left Appearance"/>
            <description value="Verify that users are able to successfully render and use the slide item content type with collage left appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15208"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-slide"/>
            <group value="pagebuilder-slideItemCollageLeft"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderAppearance_CollageLeft"/>
        </actionGroup>
        <seeElement selector="{{SlideOnBackend.appearance('1', PageBuilderAppearance_CollageLeft.value)}}" stepKey="seeAppearanceStage"/>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_CollageLeft.value)}}" stepKey="seeAppearancePageStage"/>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_CollageLeft.value)}}" stepKey="seeAppearanceStorefront"/>
    </test>
    <test name="BlockRenderSlideItemCollageCenterAppearanceThroughBlockContentType" extends="BlockRenderSlideItemPosterAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Slide Item Through Block Content Type With Collage Center Appearance"/>
            <description value="Verify that users are able to successfully render and use the slide item content type with collage left appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15209"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-slide"/>
            <group value="pagebuilder-slideItemCollageCenter"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderAppearance_CollageCentered"/>
        </actionGroup>
        <seeElement selector="{{SlideOnBackend.appearance('1', PageBuilderAppearance_CollageCentered.value)}}" stepKey="seeAppearanceStage"/>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_CollageCentered.value)}}" stepKey="seeAppearancePageStage"/>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_CollageCentered.value)}}" stepKey="seeAppearanceStorefront"/>
    </test>
    <test name="BlockRenderSlideItemCollageRightAppearanceThroughBlockContentType" extends="BlockRenderSlideItemPosterAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Slide Item Through Block Content Type With Collage Right Appearance"/>
            <description value="Verify that users are able to successfully render and use the slide item content type with collage left appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15210"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-slide"/>
            <group value="pagebuilder-slideItemCollageRight"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderAppearance_CollageRight"/>
        </actionGroup>
        <seeElement selector="{{SlideOnBackend.appearance('1', PageBuilderAppearance_CollageRight.value)}}" stepKey="seeAppearanceStage"/>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_CollageRight.value)}}" stepKey="seeAppearancePageStage"/>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_CollageRight.value)}}" stepKey="seeAppearanceStorefront"/>
    </test>
    <test name="BlockRenderSlideItemPosterAppearanceThroughBlockContentTypeWithVariableAndWidgets">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Slide Items With Variables and Widgets Through Block Content Type With Poster Appearance"/>
            <description value="Verify that users are able to successfully render and use the slide item content type with poster appearance, variables, and widgets through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15211"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-slide"/>
            <group value="pagebuilder-slideItemPoster"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <createData entity="_defaultCmsPage" stepKey="createCMSPageB" />
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPageB" stepKey="deletePreReqCMSPageB" />
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderSliderContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragSliderIntoStage">
            <argument name="contentType" value="PageBuilderSliderContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanelSmallByIndex" stepKey="openEditPanelAfterDrop">
            <argument name="section" value="SlideOnBackend"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <!-- Fill Out Edit Panel: Appearance -->
        <comment userInput="Fill Out Edit Panel: Appearance" stepKey="commentFillEditPanelAppearance"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!--Input variable into slide item-->
        <comment userInput="Input variable into slide item" stepKey="commentInputVariableIntoSlideItem"/>
        <click selector="{{SlideOnBackend.tinymce('1')}}" stepKey="focusOnEditorArea1"/>
        <waitForPageLoad stepKey="waitForTextEditor1"/>
        <actionGroup ref="addVariableToTinyMCEInline" stepKey="addVariableToTinyMCE">
            <argument name="variable" value="TinyMCEVariableBaseURL"/>
        </actionGroup>
        <seeElement selector="{{SlideOnBackend.messageContentText('1', TinyMCEVariableBaseURL.editPanelValue)}}" stepKey="seeVariableBaseURLStage"/>
        <!--Input widget into slide item-->
        <comment userInput="Input widget into slide item" stepKey="commentInputWidgetIntoSlideItem"/>
        <actionGroup ref="addPageLinkWidgetToTinyMCEInline" stepKey="addPageLinkWidgetToTinyMCE">
            <argument name="widget" value="TinyMCEWidgetCMSPageLink"/>
            <argument name="page" value="$$createCMSPageB.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{SlideOnBackend.messageContentText('1', TinyMCEWidgetCMSPageLink.editPanelValue)}}" stepKey="seeWidgetStage"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeElement selector="{{SlideOnBackend.appearance('1', PageBuilderAppearance_Poster.value)}}" stepKey="seeAppearanceStage"/>
        <click selector="{{SlideOnBackend.tinymce('1')}}" stepKey="focusOnEditorArea2"/>
        <waitForElement selector="{{SlideOnBackend.variablePlaceholder('1')}}" stepKey="waitForVariableElement"/>
        <waitForElement selector="{{SlideOnBackend.widgetPlaceholder('1')}}" stepKey="waitForWidgetElement"/>
        <executeJS function="return window.getComputedStyle(document.evaluate(&quot;{{SlideOnBackend.variablePlaceholder('1')}}&quot;, document.body).iterateNext()).getPropertyValue('background-color')" stepKey="getVariableStyle" />
        <executeJS function="return window.getComputedStyle(document.evaluate(&quot;{{SlideOnBackend.widgetPlaceholder('1')}}&quot;, document.body).iterateNext()).getPropertyValue('background-color')" stepKey="getWidgetStyle" />
        <assertEquals stepKey="assertWidgetPlaceholderBackgroundColorIsApplied">
            <expectedResult type="string">rgb(223, 247, 255)</expectedResult>
            <actualResult type="variable">getWidgetStyle</actualResult>
        </assertEquals>
        <assertEquals stepKey="assertVariablePlaceholderBackgroundColorIsApplied">
            <expectedResult type="string">rgb(223, 247, 255)</expectedResult>
            <actualResult type="variable">getVariableStyle</actualResult>
        </assertEquals>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_Poster.value)}}" stepKey="seeAppearancePageStage"/>
        <seeElement selector="{{SlideOnFrontend.messageContentText('1', _ENV.MAGENTO_BASE_URL)}}" stepKey="seeVariablePageStage"/>
        <seeElement selector="{{SlideOnFrontend.messageContentTextAreaTextWidget('1', _ENV.MAGENTO_BASE_URL, $$createCMSPageB.identifier$$)}}" stepKey="seeWidgetPageStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToPage2URL">
            <argument name="page" value="$$createCMSPageB.identifier$$"/>
        </actionGroup>
        <grabFromCurrentUrl stepKey="grabPage2URL"/>
        <comment userInput="View on storefront" stepKey="viewOnStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToStoreFront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_Poster.value)}}" stepKey="seeAppearanceStorefront"/>        <waitForPageLoad stepKey="waitForPageLoad1"/>
        <seeElement selector="{{SlideOnFrontend.messageContentText('1', _ENV.MAGENTO_BASE_URL)}}" stepKey="seeVariableStorefront"/>
        <seeElement selector="{{SlideOnFrontend.messageContentTextAreaTextWidget('1', _ENV.MAGENTO_BASE_URL, $$createCMSPageB.identifier$$)}}" stepKey="seeWidgetStorefront"/>
        <click selector="{{SlideOnFrontend.messageContentTextAreaTextWidget('1', _ENV.MAGENTO_BASE_URL, $$createCMSPageB.identifier$$)}}" stepKey="clickWidgetStorefront"/>
        <waitForPageLoad stepKey="waitForPageLoad2"/>
        <grabFromCurrentUrl stepKey="currentUrl"/>
        <assertEquals stepKey="assertUrlEquals">
            <actualResult type="variable">grabPage2URL</actualResult>
            <expectedResult type="variable">currentUrl</expectedResult>
        </assertEquals>
    </test>
    <test name="BlockRenderSlideItemCollageLeftAppearanceThroughBlockContentTypeWithVariableAndWidgets" extends="BlockRenderSlideItemPosterAppearanceThroughBlockContentTypeWithVariableAndWidgets">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Slide Items With Variables and Widgets Through Block Content Type With Collage Left Appearance"/>
            <description value="Verify that users are able to successfully render and use the slide item content type with collage left appearance, variables, and widgets through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15212"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-slide"/>
            <group value="pagebuilder-slideItemCollageLeft"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderAppearance_CollageLeft"/>
        </actionGroup>
        <seeElement selector="{{SlideOnBackend.appearance('1', PageBuilderAppearance_CollageLeft.value)}}" stepKey="seeAppearanceStage"/>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_CollageLeft.value)}}" stepKey="seeAppearancePageStage"/>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_CollageLeft.value)}}" stepKey="seeAppearanceStorefront"/>        <waitForPageLoad stepKey="waitForPageLoad1"/>
    </test>
    <test name="BlockRenderSlideItemCollageCenterAppearanceThroughBlockContentTypeWithVariableAndWidgets" extends="BlockRenderSlideItemPosterAppearanceThroughBlockContentTypeWithVariableAndWidgets">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Slide Items With Variables and Widgets Through Block Content Type With Collage Center Appearance"/>
            <description value="Verify that users are able to successfully render and use the slide item content type with collage left appearance, variables, and widgets through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15213"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-slide"/>
            <group value="pagebuilder-slideItemCollageCenter"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderAppearance_CollageCentered"/>
        </actionGroup>
        <seeElement selector="{{SlideOnBackend.appearance('1', PageBuilderAppearance_CollageCentered.value)}}" stepKey="seeAppearanceStage"/>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_CollageCentered.value)}}" stepKey="seeAppearancePageStage"/>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_CollageCentered.value)}}" stepKey="seeAppearanceStorefront"/>        <waitForPageLoad stepKey="waitForPageLoad1"/>
    </test>
    <test name="BlockRenderSlideItemCollageRightAppearanceThroughBlockContentTypeWithVariableAndWidgets" extends="BlockRenderSlideItemPosterAppearanceThroughBlockContentTypeWithVariableAndWidgets">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Slide Items With Variables and Widgets Through Block Content Type With Collage Right Appearance"/>
            <description value="Verify that users are able to successfully render and use the slide item content type with collage left appearance, variables, and widgets through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15214"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-slide"/>
            <group value="pagebuilder-slideItemCollageRight"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderAppearance_CollageRight"/>
        </actionGroup>
        <seeElement selector="{{SlideOnBackend.appearance('1', PageBuilderAppearance_CollageRight.value)}}" stepKey="seeAppearanceStage"/>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_CollageRight.value)}}" stepKey="seeAppearancePageStage"/>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_CollageRight.value)}}" stepKey="seeAppearanceStorefront"/>        <waitForPageLoad stepKey="waitForPageLoad1"/>
    </test>
    <test name="BlockRenderColumnFullHeightAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Column Full Height Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the column content type with full height appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15221"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-column"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Column -->
        <comment userInput="Add Column" stepKey="commentAddColumn"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragColumnOntoStage">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditPanelForFirstColumn">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <!-- Fill Out Column Edit Panel -->
        <comment userInput="Fill Out Column Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterBackgroundAppearanceProperty">
            <argument name="property" value="PageBuilderColumnAppearanceProperty_FullHeight"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Hex_White"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachFileSlideOutProperty1">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachFileSlideOutProperty2">
            <argument name="property" value="PageBuilderBackgroundMobileImage_GIF"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="setBackgroundPosition">
            <argument name="property" value="PageBuilderBackgroundPosition_TopLeft"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setBackgroundRepeat">
            <argument name="property" value="PageBuilderBackgroundRepeat_Enabled"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setBackgroundSize">
            <argument name="property" value="PageBuilderBackgroundSize_Auto"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="setBackgroundAttachment">
            <argument name="property" value="PageBuilderBackgroundAttachment_Scroll"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterMinHeightProperty">
            <argument name="property" value="PageBuilderMinHeightProperty_500"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterVerticalAlignmentCenterProperty">
            <argument name="property" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveSlide2EditPanelSettings"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeElement selector="{{ColumnOnBackend.columnStyle(PageBuilderFirstColumnInStage.index, PageBuilderColumnStyles.alignmentFull)}}" stepKey="seeColumn1AlignmentAppliedStage"/>
        <actionGroup ref="validateBackgroundAttributes" stepKey="validateStage">
            <argument name="section" value="ColumnOnBackend"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Hex_White"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_TopLeft"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Scroll"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImage" stepKey="validateImageOnStage1">
            <argument name="section" value="ColumnOnBackend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <seeElement selector="{{ColumnOnBackend.columnStyle(PageBuilderFirstColumnInStage.index, PageBuilderColumnStyles.minHeight)}}" stepKey="seeColumn1HeightAppliedStage"/>
        <seeElement selector="{{ColumnOnBackend.columnChildrenStyle('1', '1', PageBuilderVerticalAlignmentPropertyCenter.style)}}" stepKey="seeFirstColumnVerticalAlignmentCenterStage"/>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{ColumnOnFrontend.columnStyle(PageBuilderFirstColumnInStage.index, PageBuilderColumnStyles.alignmentFull)}}" stepKey="seeColumn1AlignmentAppliedPageStage"/>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validatePageStage">
            <argument name="section" value="ColumnOnFrontend"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Hex_White"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_TopLeft"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Scroll"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateImageOnPageStage">
            <argument name="section" value="ColumnOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <seeElement selector="{{ColumnOnFrontend.columnStyle(PageBuilderFirstColumnInStage.index, PageBuilderColumnStyles.minHeight)}}" stepKey="seeColumn1HeightAppliedPageStage"/>
        <seeElement selector="{{ColumnOnFrontend.columnStyle('1', PageBuilderVerticalAlignmentPropertyCenter.style)}}" stepKey="seeColumn1VerticalAlignmentCenterAppliedPageStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToStoreFront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{ColumnOnFrontend.columnStyle(PageBuilderFirstColumnInStage.index, PageBuilderColumnStyles.alignmentFull)}}" stepKey="seeColumn1AlignmentAppliedStorefront"/>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateStorefront">
            <argument name="section" value="ColumnOnFrontend"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Hex_White"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_TopLeft"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Scroll"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateImageOnStorefront">
            <argument name="section" value="ColumnOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <seeElement selector="{{ColumnOnFrontend.columnStyle(PageBuilderFirstColumnInStage.index, PageBuilderColumnStyles.minHeight)}}" stepKey="seeColumn1HeightAppliedStorefront"/>
        <seeElement selector="{{ColumnOnFrontend.columnStyle('1', PageBuilderVerticalAlignmentPropertyCenter.style)}}" stepKey="seeColumn1VerticalAlignmentCenterAppliedStorefront"/>
    </test>
    <test name="BlockRenderColumnTopAlignmentAppearanceThroughBlockContentType" extends="BlockRenderColumnFullHeightAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Column Top Alignment Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the column content type with top alignment appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15222"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-column"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterBackgroundAppearanceProperty">
            <argument name="property" value="PageBuilderColumnAppearanceProperty_Top"/>
        </actionGroup>
        <seeElement selector="{{ColumnOnBackend.columnStyle(PageBuilderFirstColumnInStage.index, PageBuilderColumnStyles.alignmentTop)}}" stepKey="seeColumn1AlignmentAppliedStage"/>
        <seeElement selector="{{ColumnOnFrontend.columnStyle(PageBuilderFirstColumnInStage.index, PageBuilderColumnStyles.alignmentTop)}}" stepKey="seeColumn1AlignmentAppliedPageStage"/>
        <seeElement selector="{{ColumnOnFrontend.columnStyle(PageBuilderFirstColumnInStage.index, PageBuilderColumnStyles.alignmentTop)}}" stepKey="seeColumn1AlignmentAppliedStorefront"/>
    </test>
    <test name="BlockRenderColumnCenterAlignmentAppearanceThroughBlockContentType" extends="BlockRenderColumnFullHeightAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Column Center Alignment Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the column content type with center alignment appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15223"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-column"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterBackgroundAppearanceProperty">
            <argument name="property" value="PageBuilderColumnAppearanceProperty_Center"/>
        </actionGroup>
        <seeElement selector="{{ColumnOnBackend.columnStyle(PageBuilderFirstColumnInStage.index, PageBuilderColumnStyles.alignmentCenter)}}" stepKey="seeColumn1AlignmentAppliedStage"/>
        <seeElement selector="{{ColumnOnFrontend.columnStyle(PageBuilderFirstColumnInStage.index, PageBuilderColumnStyles.alignmentCenter)}}" stepKey="seeColumn1AlignmentAppliedPageStage"/>
        <seeElement selector="{{ColumnOnFrontend.columnStyle(PageBuilderFirstColumnInStage.index, PageBuilderColumnStyles.alignmentCenter)}}" stepKey="seeColumn1AlignmentAppliedStorefront"/>
    </test>
    <test name="BlockRenderColumnBottomAlignmentAppearanceThroughBlockContentType" extends="BlockRenderColumnFullHeightAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Column Bottom Alignment Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the column content type with bottom alignment appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15224"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-column"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterBackgroundAppearanceProperty">
            <argument name="property" value="PageBuilderColumnAppearanceProperty_Bottom"/>
        </actionGroup>
        <seeElement selector="{{ColumnOnBackend.columnStyle(PageBuilderFirstColumnInStage.index, PageBuilderColumnStyles.alignmentBottom)}}" stepKey="seeColumn1AlignmentAppliedStage"/>
        <seeElement selector="{{ColumnOnFrontend.columnStyle(PageBuilderFirstColumnInStage.index, PageBuilderColumnStyles.alignmentBottom)}}" stepKey="seeColumn1AlignmentAppliedPageStage"/>
        <seeElement selector="{{ColumnOnFrontend.columnStyle(PageBuilderFirstColumnInStage.index, PageBuilderColumnStyles.alignmentBottom)}}" stepKey="seeColumn1AlignmentAppliedStorefront"/>
    </test>
    <test name="BlockRenderColumnDragAndDropMultipleColumnsResizingThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Column Drag And Drop Multiple Columns Resizing Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the column content type with drag and drop multiple columns to resize through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15225"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-column"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Column -->
        <comment userInput="Add Column" stepKey="commentAddColumn"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragColumnOntoStage">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragNewColumnToFirstColumn">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="1" />
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragNewColumnToFirstColumn2">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="2" />
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeNumberOfElements selector="{{ColumnOnBackend.allColumns}}" userInput="4" stepKey="seeNumberOfColumnsStage"/>
        <seeElement selector="{{ColumnOnBackend.displayLabel('1','1/12')}}" stepKey="findAfterLabelColumn1Stage"/>
        <seeElement selector="{{ColumnOnBackend.displayLabel('2','1/12')}}" stepKey="findAfterLabelColumn2Stage"/>
        <seeElement selector="{{ColumnOnBackend.displayLabel('3','4/12')}}" stepKey="findAfterLabelColumn3Stage"/>
        <seeElement selector="{{ColumnOnBackend.displayLabel('4','6/12')}}" stepKey="findAfterLabelColumn4Stage"/>
        <executeJS function="return document.querySelector('{{ColumnOnBackend.columnX('1')}}').clientWidth" stepKey="columnOneWidthStage"/>
        <executeJS function="return document.querySelector('{{ColumnOnBackend.columnX('2')}}').clientWidth" stepKey="columnTwoWidthStage"/>
        <executeJS function="return document.querySelector('{{ColumnOnBackend.columnX('3')}}').clientWidth" stepKey="columnThreeWidthStage"/>
        <executeJS function="return document.querySelector('{{ColumnOnBackend.columnX('4')}}').clientWidth" stepKey="columnFourWidthStage"/>
        <executeJS function="return Math.round({$columnTwoWidthStage}/{$columnOneWidthStage})" stepKey="columnRatioStage"/>
        <assertEquals stepKey="assertRatioIsCorrectStage">
            <expectedResult type="int">1</expectedResult>
            <actualResult type="variable">columnRatioStage</actualResult>
        </assertEquals>
        <executeJS function="return Math.round({$columnThreeWidthStage}/{$columnOneWidthStage})" stepKey="columnRatio2Stage"/>
        <assertEquals stepKey="assertRatioIsCorrect2Stage">
            <expectedResult type="int">4</expectedResult>
            <actualResult type="variable">columnRatio2Stage</actualResult>
        </assertEquals>
        <executeJS function="return Math.round({$columnFourWidthStage}/{$columnOneWidthStage})" stepKey="columnRatio3Stage"/>
        <assertEquals stepKey="assertRatioIsCorrect3Stage">
            <expectedResult type="int">6</expectedResult>
            <actualResult type="variable">columnRatio3Stage</actualResult>
        </assertEquals>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeNumberOfElements selector="{{ColumnOnFrontend.allColumns}}" userInput="4" stepKey="seeNumberOfColumnsPageStage"/>
        <executeJS function="return document.querySelector('{{ColumnOnFrontend.columnX('1')}}').clientWidth" stepKey="columnOneWidthPageStage"/>
        <executeJS function="return document.querySelector('{{ColumnOnFrontend.columnX('2')}}').clientWidth" stepKey="columnTwoWidthPageStage"/>
        <executeJS function="return document.querySelector('{{ColumnOnFrontend.columnX('3')}}').clientWidth" stepKey="columnThreeWidthPageStage"/>
        <executeJS function="return document.querySelector('{{ColumnOnFrontend.columnX('4')}}').clientWidth" stepKey="columnFourWidthPageStage"/>
        <executeJS function="return Math.round({$columnTwoWidthPageStage}/{$columnOneWidthPageStage})" stepKey="columnRatioPageStage"/>
        <assertEquals stepKey="assertRatioIsCorrectPageStage">
            <expectedResult type="int">1</expectedResult>
            <actualResult type="variable">columnRatioPageStage</actualResult>
        </assertEquals>
        <executeJS function="return Math.round({$columnThreeWidthPageStage}/{$columnOneWidthPageStage})" stepKey="columnRatio2PageStage"/>
        <assertEquals stepKey="assertRatioIsCorrect2PageStage">
            <expectedResult type="int">4</expectedResult>
            <actualResult type="variable">columnRatio2PageStage</actualResult>
        </assertEquals>
        <executeJS function="return Math.round({$columnFourWidthPageStage}/{$columnOneWidthPageStage})" stepKey="columnRatio3PageStage"/>
        <assertEquals stepKey="assertRatioIsCorrect3PageStage">
            <expectedResult type="int">6</expectedResult>
            <actualResult type="variable">columnRatio3PageStage</actualResult>
        </assertEquals>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToStoreFront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeNumberOfElements selector="{{ColumnOnFrontend.allColumns}}" userInput="4" stepKey="seeNumberOfColumnsStorefront"/>
        <executeJS function="return document.querySelector('{{ColumnOnFrontend.columnX('1')}}').clientWidth" stepKey="columnOneWidthStorefront"/>
        <executeJS function="return document.querySelector('{{ColumnOnFrontend.columnX('2')}}').clientWidth" stepKey="columnTwoWidthStorefront"/>
        <executeJS function="return document.querySelector('{{ColumnOnFrontend.columnX('3')}}').clientWidth" stepKey="columnThreeWidthStorefront"/>
        <executeJS function="return document.querySelector('{{ColumnOnFrontend.columnX('4')}}').clientWidth" stepKey="columnFourWidthStorefront"/>
        <executeJS function="return Math.round({$columnTwoWidthStorefront}/{$columnOneWidthStorefront})" stepKey="columnRatioStorefront"/>
        <assertEquals stepKey="assertRatioIsCorrectStorefront">
            <expectedResult type="int">1</expectedResult>
            <actualResult type="variable">columnRatioStorefront</actualResult>
        </assertEquals>
        <executeJS function="return Math.round({$columnThreeWidthStorefront}/{$columnOneWidthStorefront})" stepKey="columnRatio2Storefront"/>
        <assertEquals stepKey="assertRatioIsCorrect2Storefront">
            <expectedResult type="int">4</expectedResult>
            <actualResult type="variable">columnRatio2Storefront</actualResult>
        </assertEquals>
        <executeJS function="return Math.round({$columnFourWidthStorefront}/{$columnOneWidthStorefront})" stepKey="columnRatio3Storefront"/>
        <assertEquals stepKey="assertRatioIsCorrect3Storefront">
            <expectedResult type="int">6</expectedResult>
            <actualResult type="variable">columnRatio3Storefront</actualResult>
        </assertEquals>
    </test>
    <test name="BlockRenderColumnDuplicationThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Column Duplication Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the column content type with duplication through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15226"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-column"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Column -->
        <comment userInput="Add Column" stepKey="commentAddColumn"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragColumnOntoStage">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <!-- Add Heading to Column -->
        <comment userInput="Add Heading to Column" stepKey="commentAddHeadingToColumn"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSectionHeading">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragHeadingTypeToStage">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <actionGroup ref="enterHeadingOnStage" stepKey="enterHeadingOnStage">
            <argument name="index" value="1"/>
            <argument name="headingText" value="PageBuilderHeadingTextProperty"/>
            <argument name="headingType" value="PageBuilderHeadingTypeProperty_H2"/>
            <argument name="headingAlignment" value="PageBuilderHeadingAlignmentProperty_left"/>
        </actionGroup>
        <actionGroup ref="clickOutsideLiveEditHeading" stepKey="clickOutsideLiveEditHeading">
            <argument name="index" value="1"/>
        </actionGroup>
        <!-- Duplicate -->
        <comment userInput="Duplicate" stepKey="commentDuplicate"/>
        <actionGroup ref="duplicateContentType" stepKey="duplicateContentType">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeNumberOfElements selector="{{ColumnOnBackend.allColumns}}" userInput="3" stepKey="seeNumberOfColumnsStage"/>
        <seeElement selector="{{HeadingOnStage.base('1')}}" stepKey="waitForContentTypeStage1"/>
        <seeElement selector="{{HeadingOnStage.base('2')}}" stepKey="waitForContentTypeStage2"/>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeNumberOfElements selector="{{ColumnOnFrontend.allColumns}}" userInput="3" stepKey="seeNumberOfColumnsPageStage"/>
        <seeElement selector="{{HeadingOnStorefront.base('1')}}" stepKey="waitForContentTypePageStage1"/>
        <seeElement selector="{{HeadingOnStorefront.base('2')}}" stepKey="waitForContentTypePageStage2"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToStoreFront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeNumberOfElements selector="{{ColumnOnFrontend.allColumns}}" userInput="3" stepKey="seeNumberOfColumnsStorefront"/>
        <seeElement selector="{{HeadingOnStorefront.base('1')}}" stepKey="waitForContentTypeStorefront1"/>
        <seeElement selector="{{HeadingOnStorefront.base('2')}}" stepKey="waitForContentTypeStorefront2"/>
    </test>
</tests>
