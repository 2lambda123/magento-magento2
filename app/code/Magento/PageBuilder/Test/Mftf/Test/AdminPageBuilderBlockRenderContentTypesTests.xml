<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="BlockRenderEmptyImageThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Empty Image Through Block Content Type"/>
            <description value="Verify that admin are able to add a block instance type with empty image to Block Content Block and see it on frontend and on the stage"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-3740"/>
            <useCaseId value="MC-1405"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-image"/>
        </annotations>
        <before>
            <createData entity="_defaultCmsPage" stepKey="createCMSPage"/>
            <createData entity="_defaultBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deletePreReqBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deletePreReqCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!--Add Image to block-->
        <comment userInput="Adding image to block" stepKey="commentAddingImageToBlock"/>
        <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
            <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderImageContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragImageIntoStage">
            <argument name="contentType" value="PageBuilderImageContentType"/>
        </actionGroup>
        <actionGroup ref="saveCMSBlock" stepKey="clickSaveBlock"/>
        <!--User goes to created CMS page-->
        <comment userInput="User goes to created CMS page" stepKey="NavigateToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDrop">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings2"/>
        <!--Check that image was not rendered on the stage-->
        <comment userInput="Check that image was not rendered on the stage" stepKey="commentCheckingThatImageIsNotRenderedOnTheStage"/>
        <executeJS function="return jQuery('.pagebuilder-block').css('height');" stepKey="height"/>
        <assertGreaterThanOrEqual stepKey="assertElementHight">
            <actualResult type="variable">height</actualResult>
            <expectedResult type="string">10px</expectedResult>
        </assertGreaterThanOrEqual>
        <seeElementInDOM selector="{{ImageOnStorefront.imageDisplay}}" stepKey="seeThatEmptyImageExistsInDomOnStage"/>
        <dontSeeElement selector="{{ImageOnStorefront.imageDisplay}}" stepKey="notSeeImageOnStage"/>
        <actionGroup ref="openOptionsMenu" stepKey="openEditMenuOnStage3">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <seeElement selector="{{BlockOnStage.overlay('1')}}" stepKey="seeOverlayOnBlock"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!--Verify block on the frontend-->
        <comment userInput="Verify Block On Store front" stepKey="commentCheckingThatImageIsNotRenderedOnTheStoreFront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElementInDOM selector="{{ImageOnStorefront.imageDisplay}}" stepKey="seeThatEmptyImageExistsInDomOnStorefront"/>
        <dontSeeElement selector="{{ImageOnStorefront.imageDisplay}}" stepKey="notSeeImageOnFrontend"/>
    </test>
    <test name="BlockImageIsRightAligned">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Image Can Be Right Aligned In Block"/>
            <description value="A user can right align an image in a Block"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-4293"/>
            <testCaseId value="MC-5174"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-image"/>
        </annotations>
        <before>
            <createData entity="_defaultBlock" stepKey="createCMSBlock"/>
            <createData entity="_defaultCmsPage" stepKey="createCMSPage"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deletePreReqBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deletePreReqCMSPage"/>
            <actionGroup ref="navigateToMediaGallery" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="NavigateToFolder">
                <argument name="FolderName" value="{{PageBuilderImageProperty_PNG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage">
                <argument name="Image" value="PageBuilderImageProperty_PNG"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Go to edit page of Block and configure Image -->
        <comment userInput="Go to edit page of Block and configure image" stepKey="commentGoToBlockEditPage"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderImageContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragImageIntoStage">
            <argument name="contentType" value="PageBuilderImageContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderImageContentType"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutPropertyGeneral" stepKey="attachImageFile">
            <argument name="property" value="PageBuilderImageProperty_PNG"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterImageCaptionProperty">
            <argument name="property" value="PageBuilderImageCaptionProperty"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyRight"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsInBlock"/>
        <actionGroup ref="saveCMSBlock" stepKey="clickSaveBlock"/>
        <!-- Go to CMS Page and choose Block -->
        <comment userInput="Go to CMS Page and choose Block" stepKey="commentGoToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStageAfterDrop">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Verify Right Alignment On Stage - Before Save -->
        <comment userInput="Verify right alignment on stage before save" stepKey="commentVerifyRightAlignmentOnStageBeforeSave"/>
        <seeElement selector="({{ImageOnStorefront.alignment('1', PageBuilderAdvancedAlignmentPropertyRight.value)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeImageAlignmentRightBeforeSave"/>
        <actionGroup ref="verifyAlignmentRightInBlock" stepKey="verifyAlignmentRightInBlockBeforeSave">
            <argument name="container" value="{{RowOnStorefront.innerCSS}}"/>
            <argument name="content" value="{{ImageOnStorefront.imageElementCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingProperty10"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStageAfterSave"/>
        <!-- Verify Right Alignment On Stage - After Save -->
        <comment userInput="Verify right alignment on stage after save" stepKey="commentVerifyRightAlignmentOnStageAfterSave"/>
        <seeElement selector="({{ImageOnStorefront.alignment('1', PageBuilderAdvancedAlignmentPropertyRight.value)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeImageAlignmentRightAfterSave"/>
        <actionGroup ref="verifyAlignmentRightInBlock" stepKey="verifyAlignmentRightInBlockAfterSave">
            <argument name="container" value="{{RowOnStorefront.innerCSS}}"/>
            <argument name="content" value="{{ImageOnStorefront.imageElementCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingProperty10"/>
        </actionGroup>
        <!-- Verify Right Alignment In Storefront -->
        <comment userInput="Verify right alignment in storefront" stepKey="commentVerifyRightAlignmentInStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="({{ImageOnStorefront.alignment('1', PageBuilderAdvancedAlignmentPropertyRight.value)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeImageAlignmentRightStorefront"/>
        <actionGroup ref="verifyAlignmentRightInBlock" stepKey="verifyAlignmentRightInBlockStorefront">
            <argument name="container" value="{{RowOnStorefront.innerCSS}}"/>
            <argument name="content" value="{{ImageOnStorefront.imageElementCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingProperty10"/>
        </actionGroup>
    </test>
    <test name="BlockRowContentIsVerticallyAligned">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Row Content Can Be Vertically Aligned In Block"/>
            <description value="A user can vertically align row contents in a Block"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-4280"/>
            <testCaseId value="MC-5061"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-row"/>
        </annotations>
        <before>
            <createData entity="_defaultBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deletePreReqBlock"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Edit Block and configure Row - Vertical Align Bottom -->
        <comment userInput="Edit Block and configure row vertical align bottom" stepKey="commentConfigureRowVerticalAlignBottom"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterMinHeightProperty">
            <argument name="property" value="PageBuilderMinHeightProperty_500"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterVerticalAlignmentBottomProperty">
            <argument name="property" value="PageBuilderVerticalAlignmentPropertyBottom"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsInBlock"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveBlock"/>
        <!-- Go to CMS Page and choose Block -->
        <comment userInput="Go to CMS Page and choose Block" stepKey="commentGoToCMSPage"/>
        <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle1">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDrop">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Verify Vertical Alignment On Stage - Before Save -->
        <comment userInput="Verify min height and vertical alignment on stage before save" stepKey="commentVerifyMinHeightAndVerticalAlignmentOnStageBeforeSave"/>
        <seeElement selector="({{RowOnStorefront.rowStyle('1', PageBuilderMinHeightProperty_500.style)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeRowMinHeightBeforeSave"/>
        <seeElement selector="({{RowOnStorefront.rowStyle('1', PageBuilderVerticalAlignmentPropertyBottom.style)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeRowVerticalAlignmentBottomBeforeSave"/>
        <actionGroup ref="verifyVerticalAlignmentBottomInBlock" stepKey="verifyBottomAlignmentBeforeSave">
            <argument name="container" value="RowOnStorefront"/>
            <argument name="content" value="HtmlOnStorefront"/>
            <argument name="padding" value="PageBuilderPaddingProperty10"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500.value"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStageAfterSave"/>
        <!-- Verify Vertical Alignment On Stage - After Save -->
        <comment userInput="Verify min height and vertical alignment on stage after save" stepKey="commentVerifyMinHeightAndVerticalAlignmentOnStageAfterSave"/>
        <seeElement selector="({{RowOnStorefront.rowStyle('1', PageBuilderMinHeightProperty_500.style)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeRowMinHeightAfterSave"/>
        <seeElement selector="({{RowOnStorefront.rowStyle('1', PageBuilderVerticalAlignmentPropertyBottom.style)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeRowVerticalAlignmentBottomAfterSave"/>
        <actionGroup ref="verifyVerticalAlignmentBottomInBlock" stepKey="verifyBottomAlignmentAfterSave">
            <argument name="container" value="RowOnStorefront"/>
            <argument name="content" value="HtmlOnStorefront"/>
            <argument name="padding" value="PageBuilderPaddingProperty10"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500.value"/>
        </actionGroup>
        <!-- Verify Min Height and Vertical Alignment In Storefront -->
        <comment userInput="Verify min height and vertical alignment in storefront" stepKey="commentVerifyMinHeightAndVerticalAlignmentInStorefront"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <seeElement selector="({{RowOnStorefront.rowStyle('1', PageBuilderMinHeightProperty_500.style)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeRowMinHeightStorefront"/>
        <seeElement selector="({{RowOnStorefront.rowStyle('1', PageBuilderVerticalAlignmentPropertyBottom.style)}}{{BlockOnStorefront.ancestor}})[1]" stepKey="seeRowVerticalAlignmentBottomStorefront"/>
        <actionGroup ref="verifyVerticalAlignmentBottomInBlock" stepKey="verifyBottomAlignmentStorefront">
            <argument name="container" value="RowOnStorefront"/>
            <argument name="content" value="HtmlOnStorefront"/>
            <argument name="padding" value="PageBuilderPaddingProperty10"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500.value"/>
        </actionGroup>
    </test>
    <test name="BlockRowContainedAppearanceHasEqualWidthToContents">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Row contained appearance has equal width to contents in Block"/>
            <description value="A user can see a row contained appearance has equal width to contents in a Block"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-5432"/>
            <testCaseId value="MC-5958"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-rowAppearances"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <createData entity="_defaultBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deletePreReqBlock"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Edit Block and configure Row -->
        <comment userInput="Edit Block and configure Row" stepKey="commentConfigureRowInBlock"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterRowAppearance">
            <argument name="property" value="PageBuilderRowAppearance_Contained"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsInBlock"/>
        <!-- Edit Block and configure Banner -->
        <comment userInput="Edit Block and configure Banner" stepKey="commentConfigureBannerInBlock"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandMenuSectionElements">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
            <argument name="containerTargetType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceProperty">
            <argument name="property" value="PageBuilderAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBannerMinHeight">
            <argument name="property" value="PageBuilderBannerMinimumHeightProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Plaintext_Green"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsInBlock2"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveBlock"/>
        <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Go to CMS page and choose Block -->
        <comment userInput="Go to CMS page and choose Block" stepKey="commentGoToCMSPage"/>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle1">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDrop">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate width before save -->
        <comment userInput="Validate width before save" stepKey="commentValidateBeforeSave"/>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthBeforeSave">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceContainedCSS}}"/>
            <argument name="containerIndex" value="2"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
         <!-- Validate width after save -->
        <comment userInput="Validate width after save" stepKey="commentValidateAfterSave"/>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthAfterSave">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceContainedCSS}}"/>
            <argument name="containerIndex" value="2"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <!-- Validate width storefront -->
        <comment userInput="Validate width storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthStorefront">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceContainedCSS}}"/>
            <argument name="containerIndex" value="2"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
    </test>
    <test name="BlockRowFullWidthAppearanceHasEqualWidthToContents" extends="BlockRowContainedAppearanceHasEqualWidthToContents">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Row full width appearance has equal width to contents in Block"/>
            <description value="A user can see a row full width appearance has equal width to contents in a Block"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-5432"/>
            <testCaseId value="MC-6012"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-rowAppearances"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterRowAppearance">
            <argument name="property" value="PageBuilderRowAppearance_FullWidth"/>
        </actionGroup>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthBeforeSave">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceFullWidthCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthAfterSave">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceFullWidthCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthStorefront">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceFullWidthCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
    </test>
    <test name="BlockRowFullBleedAppearanceHasEqualWidthToContents" extends="BlockRowContainedAppearanceHasEqualWidthToContents">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Row full bleed appearance has equal width to contents in Block"/>
            <description value="A user can see a row full bleed appearance has equal width to contents in a Block"/>
            <severity value="MAJOR"/>
            <useCaseId value="MC-5432"/>
            <testCaseId value="MC-6011"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-rowAppearances"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterRowAppearance">
            <argument name="property" value="PageBuilderRowAppearance_FullBleed"/>
        </actionGroup>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthBeforeSave">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceFullBleedCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthAfterSave">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceFullBleedCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
        <actionGroup ref="validateContentWidthEqualToContainerWidth" stepKey="validateContentWidthEqualToContainerWidthStorefront">
            <argument name="content" value="{{BannerOnFrontend.appearancePosterCSS}}"/>
            <argument name="container" value="{{RowOnStorefront.appearanceFullBleedCSS}}"/>
            <argument name="containerPadding" value="PageBuilderPaddingPropertyRowDefault"/>
        </actionGroup>
    </test>
    <test name="ProductFromDifferentWebsiteInsideBlockShowsOnStage">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block"/>
            <title value="Product from Different Website Inside Block Shows on Stage"/>
            <description value="As a product manager I want to be able to see products from all store views rendered inside blocks on stage in admin so that I don't get worried that conditions are being applied incorrectly"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-5373"/>
            <testCaseId value="MC-11890"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-products"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-storeView"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <magentoCLI command="config:set web/url/use_store 1" stepKey="turnOnStoreUrlUsage"/>
            <createData entity="customWebsite" stepKey="createCustomWebsite"/>
            <createData entity="_defaultBlock" stepKey="createPreReqBlock"/>
            <createData entity="SimpleSubCategory" stepKey="createCategory"/>
            <actionGroup ref="AdminStoreGroupCreateActionGroup" stepKey="createNewStore">
                <argument name="Website" value="customWebsite"/>
                <argument name="storeGroup" value="customStoreGroup"/>
            </actionGroup>
            <actionGroup ref="AdminCreateStoreViewActionGroup" stepKey="createCustomStoreView">
                <argument name="StoreGroup" value="customStoreGroup"/>
                <argument name="customStore" value="customStore"/>
            </actionGroup>
            <createData entity="SimpleProduct" stepKey="createProduct">
                <requiredEntity createDataKey="createCategory"/>
            </createData>
        </before>
        <after>
            <magentoCLI command="config:set web/url/use_store 0" stepKey="turnOffStoreUrlUsage"/>
            <actionGroup ref="DeleteCustomWebsiteActionGroup" stepKey="deleteWebsite">
                <argument name="websiteName" value="$createCustomWebsite.website[name]$"/>
            </actionGroup>
            <deleteData createDataKey="createPreReqBlock" stepKey="deletePreReqBlock"/>
            <deleteData createDataKey="createCategory" stepKey="deleteCategory"/>
            <deleteData createDataKey="createProduct" stepKey="deleteProduct"/>
            <actionGroup ref="logout" stepKey="logoutOfAdmin"/>
        </after>
        <!-- Create product and assign to created store view -->
        <comment userInput="Assign product to created store view" stepKey="commentAssignProductToCreatedStoreView"/>
        <actionGroup ref="navigateToCreatedProductEditPage" stepKey="navigateToCreatedProductEditPage">
            <argument name="product" value="$$createProduct$$"/>
        </actionGroup>
        <actionGroup ref="SelectProductInWebsitesActionGroup" stepKey="setWebsite2">
            <argument name="website" value="$createCustomWebsite.website[name]$"/>
        </actionGroup>
        <uncheckOption selector="{{ProductInWebsitesSection.website('Main Website')}}" stepKey="uncheckMainWebsite"/>
        <actionGroup ref="saveProductForm" stepKey="saveProductForm2"/>
        <!-- Create block with product inside -->
        <comment userInput="Create block with product inside" stepKey="commentCreateBlockWithProductInside"/>
        <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage">
            <argument name="CMSBlockPage" value="$$createPreReqBlock$$"/>
        </actionGroup>
        <selectOption selector="{{BlockNewPageBasicFieldsSection.storeView}}" userInput="All Store Views" stepKey="assignAllStoreViewsToBlock"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelGroup">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragContentTypeToStage">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDrop">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="addCategoryConditionToProductsBlock" stepKey="addCategory">
            <argument name="page" value="ProductsContentTypeForm"/>
            <argument name="category" value="$$createCategory.id$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductsCountStage">
            <argument name="page" value="ProductsOnStage"/>
            <argument name="count" value="1"/>
        </actionGroup>
        <actionGroup ref="validateProductInProductsStage" stepKey="validateProductsStage">
            <argument name="page" value="ProductsOnStage"/>
            <argument name="product" value="SimpleProduct"/>
        </actionGroup>
        <actionGroup ref="saveAndCloseCMSBlockWithSplitButton" stepKey="saveAndCloseCMSBlockWithSplitButton"/>
        <!-- Add block with product inside to CMS Page -->
        <comment userInput="Add block with product inside to CMS Page" stepKey="commentAddBlockWithProductInsideToCmsPage"/>
        <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelGroup2">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockContentTypeToStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDrop2">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createPreReqBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings2"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductsCountStage2">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="count" value="1"/>
        </actionGroup>
        <actionGroup ref="validateProductInProductsStorefront" stepKey="validateProductsStage2">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="product" value="SimpleProduct"/>
            <argument name="isClickable" value="none"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage2"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStageAfterSave"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductsCountStage3">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="count" value="1"/>
        </actionGroup>
        <actionGroup ref="validateProductInProductsStorefront" stepKey="validateProductsStage3">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="product" value="SimpleProduct"/>
            <argument name="isClickable" value="none"/>
        </actionGroup>
        <!-- Validate Storefront with incorrect store view -->
        <comment userInput="Validate Storefront with incorrect Store View does not show product" stepKey="commentValidateStorefrontWithIncorrectStoreView"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <seeNumberOfElements selector="{{ProductsOnStorefront.product('1')}}" userInput="0" stepKey="seeZeroProducts"/>
        <!-- Validate Storefront with correct store view -->
        <comment userInput="Validate Storefront with correct Store View shows product" stepKey="commentValidateStorefrontWithCorrectStoreView"/>
        <actionGroup ref="navigateToStoreFrontWithStoreView" stepKey="navigateToStoreFrontWithStoreView">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
            <argument name="storeView" value="customStore"/>
        </actionGroup>
        <seeNumberOfElements selector="{{ProductsOnStorefront.product('1')}}" userInput="1" stepKey="seeOneProduct"/>
    </test>
    <test name="ButtonGroupInBlockOnDifferentLineWhenInFullWidthRow">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block"/>
            <title value="Buttons In Block From Different Button Groups On Different Line When in Full-Width Row"/>
            <description value="Button groups in block should be on different lines when in full-width row"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-15093"/>
            <testCaseId value="MC-15105"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-buttons"/>
            <group value="pagebuilder-buttonGroup"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-row"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsBlock" stepKey="createPreReqBlock"/>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlock">
                <argument name="CMSBlockPage" value="$$createPreReqBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createPreReqBlock" stepKey="deletePreReqBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCreatedCategory"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Change row appearance to full-width -->
        <comment userInput="Change row appearance to full-width" stepKey="commentChangeRowAppearanceBlock"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openRowEditMenuOnStageBlock">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceRowBlock">
            <argument name="property" value="PageBuilderRowAppearance_FullWidth"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsRowBlock"/>
        <!-- Add button groups to block -->
        <comment userInput="Add button groups to block" stepKey="commentAddButtonGroupsToBlock"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSectionBlock">
            <argument name="contentType" value="PageBuilderButtonsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragContentTypeToStageBlock">
            <argument name="contentType" value="PageBuilderButtonsContentType"/>
        </actionGroup>
        <actionGroup ref="unFocusOptionMenu" stepKey="unFocusOptionMenuBlock">
            <argument name="contentType" value="PageBuilderButtonItemContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragContentTypeToStage2Block">
            <argument name="contentType" value="PageBuilderButtonsContentType"/>
        </actionGroup>
        <actionGroup ref="unFocusOptionMenu" stepKey="unFocusOptionMenu2Block">
            <argument name="contentType" value="PageBuilderButtonItemContentType"/>
        </actionGroup>
        <!-- Validate Block -->
        <comment userInput="Validate Block" stepKey="commentValidateBlock"/>
        <executeJS function="return {{ButtonItemOnStage.jsButtonSelector('1')}}.getBoundingClientRect().y" stepKey="yCoordinate1Block"/>
        <executeJS function="return {{ButtonItemOnStage.jsButtonSelector('2')}}.getBoundingClientRect().y" stepKey="yCoordinate2Block"/>
        <assertNotEquals stepKey="checkYCoordinatesBlock">
            <expectedResult type="variable">yCoordinate1Block</expectedResult>
            <actualResult type="variable">yCoordinate2Block</actualResult>
        </assertNotEquals>
        <actionGroup ref="saveAndCloseCMSBlockWithSplitButton" stepKey="saveCMSBlock"/>
        <!-- Go to CMS Page and choose Block -->
        <comment userInput="Go to CMS Page and choose Block" stepKey="commentGoToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStagePage"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandMenuSectionAddContentPage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStagePage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropPage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGridPage">
            <argument name="block" value="$$createPreReqBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsPage"/>
        <!-- Validate Page -->
        <comment userInput="Validate Page" stepKey="commentValidatePage"/>
        <executeJS function="return {{ButtonItemOnStorefrontEmptyLink.jsButtonSelector('1')}}.getBoundingClientRect().y" stepKey="yCoordinate1Page"/>
        <executeJS function="return {{ButtonItemOnStorefrontEmptyLink.jsButtonSelector('2')}}.getBoundingClientRect().y" stepKey="yCoordinate2Page"/>
        <assertNotEquals stepKey="checkYCoordinatesPage">
            <expectedResult type="variable">yCoordinate1Page</expectedResult>
            <actualResult type="variable">yCoordinate2Page</actualResult>
        </assertNotEquals>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToProductStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <executeJS function="return {{ButtonItemOnStorefrontEmptyLink.jsButtonSelector('1')}}.getBoundingClientRect().y" stepKey="yCoordinate1Storefront"/>
        <executeJS function="return {{ButtonItemOnStorefrontEmptyLink.jsButtonSelector('2')}}.getBoundingClientRect().y" stepKey="yCoordinate2Storefront"/>
        <assertNotEquals stepKey="checkYCoordinatesStorefront">
            <expectedResult type="variable">yCoordinate1Storefront</expectedResult>
            <actualResult type="variable">yCoordinate2Storefront</actualResult>
        </assertNotEquals>
    </test>
    <test name="BlockRenderTabsThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Tabs Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the Tabs content type through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-3742"/>
            <useCaseId value="MC-1405"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-tabs"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <resizeWindow width="1280" height="1024" stepKey="resizeWindowToDesktop"/>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="navigateToMediaGallery" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="navigateToDesktopImageFolder">
                <argument name="FolderName" value="{{PageBuilderBackgroundImage_JPG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="deleteBackgroundImage">
                <argument name="Image" value="PageBuilderBackgroundImage_JPG"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="deleteMobileBackgroundImage">
                <argument name="Image" value="PageBuilderBackgroundMobileImage_GIF"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Tabs -->
        <comment userInput="Add Tabs" stepKey="commentAddTabs"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderTabsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragTabsIntoStage">
            <argument name="contentType" value="PageBuilderTabsContentType"/>
        </actionGroup>
        <actionGroup ref="addChildContentTypeFromOptionMenu" stepKey="addChildContentType">
            <argument name="contentType" value="PageBuilderTabsContentType"/>
        </actionGroup>
        <!-- Edit Tab Group -->
        <comment userInput="Edit Tab Group" stepKey="commentEditTabs"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuTabs">
            <argument name="contentType" value="PageBuilderTabsContentType"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelFieldGeneral" stepKey="enterDefaultActiveTab2">
            <argument name="property" value="PageBuilderTabsDefaultActiveTab2"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterTabsMinHeight">
            <argument name="property" value="PageBuilderTabsDefinedMinHeight"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterNavAlignmentCenter">
            <argument name="property" value="PageBuilderTabsAlignmentCenter"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsTabs"/>
        <!-- Edit Tab 1 -->
        <comment userInput="Edit Tab 1" stepKey="commentEditTab1"/>
        <actionGroup ref="openPageBuilderEditPanelSmallByIndex" stepKey="openEditPanelTab1">
            <argument name="section" value="TabOnStage"/>
            <argument name="targetIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setTabNameTab1">
            <argument name="property" value="PageBuilderTabNameRandom1"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setBackgroundColorTab1">
            <argument name="property" value="PageBuilderBackgroundColor_Hex_Grey"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachFileSlideOutPropertyTab1">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachFileSlideOutPropertyMobileTab1">
            <argument name="property" value="PageBuilderBackgroundMobileImage_GIF"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setBackgroundSizeTab1">
            <argument name="property" value="PageBuilderBackgroundSize_Auto"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="setBackgroundPositionTab1">
            <argument name="property" value="PageBuilderBackgroundPosition_Center"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="setBackgroundAttachmentTab1">
            <argument name="property" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setBackgroundRepeatTab1">
            <argument name="property" value="PageBuilderBackgroundRepeat_Enabled"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setMinHeightTab1">
            <argument name="property" value="PageBuilderMinHeightProperty_200"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setVerticalAlignmentTab1">
            <argument name="property" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsTab1"/>
        <!-- Add Divider To Tab 1 -->
        <comment userInput="Add Divider To Tab 1" stepKey="commentAddDividerToTab1"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelDividerMenuSection">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragDividerToTab1">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
            <argument name="containerTargetType" value="PageBuilderTabContentType"/>
            <argument name="containerTargetIndex" value="1"/>
        </actionGroup>
        <!-- Edit Tab 2 -->
        <comment userInput="Edit Tab 2" stepKey="commentEditTab2"/>
        <actionGroup ref="openPageBuilderEditPanelSmallByIndex" stepKey="openEditPanelTab2">
            <argument name="section" value="TabOnStage"/>
            <argument name="targetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setBackgroundColorTab2">
            <argument name="property" value="PageBuilderBackgroundColor_RGB_Blue"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setMinHeightTab2">
            <argument name="property" value="PageBuilderMinHeightProperty_Empty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsTab2"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeElement selector="{{TabOnStage.tabHeaderItemActive('2')}}" stepKey="seeTab2ActiveCMSBlockStage"/>
        <see selector="{{TabOnStorefront.tabHeader('2')}}" userInput="{{PageBuilderTabName2Default.value}}" stepKey="seeTab2TitleCMSBlockStage"/>
        <waitForElement selector="{{DividerOnStage.base('1')}}" stepKey="waitForDividerCMSBlockStage"/>
        <dontSeeElement selector="{{DividerOnStage.base('1')}}" stepKey="dontSeeDividerCMSBlockStage"/>
        <seeElement selector="{{TabsOnStage.tabsContentMinHeight(PageBuilderTabsDefinedMinHeight.value)}}" stepKey="seeTabsMinHeightCMSBlockStage"/>
        <seeElement selector="{{TabsOnStage.tabsNavAligned(PageBuilderTabsAlignmentCenter.value)}}" stepKey="seeTabsNavAlignedCenterCMSBlockStage"/>
        <actionGroup ref="validateTabHeadersAlignedCenter" stepKey="validateTabHeadersAlignedCenterCMSBlockStage"/>
        <seeElement selector="{{TabOnStage.backgroundColor('2', PageBuilderBackgroundColor_RGB_Blue.rgb)}}" stepKey="seeTab2BackgroundColorCMSBlockStage"/>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateTab2MinHeightCMSBlockStage">
            <argument name="content" value="{{TabOnStage.tabContentCSS}}"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="switchTabs" stepKey="switchTabsCMSBlockStage">
            <argument name="section" value="TabOnStage"/>
            <argument name="from" value="2"/>
            <argument name="to" value="1"/>
        </actionGroup>
        <see selector="{{TabOnStage.tabHeader('1')}}" userInput="{{PageBuilderTabNameRandom1.value}}" stepKey="seeTab1TitleCMSBlockStage"/>
        <actionGroup ref="validateBackgroundAttributes" stepKey="validateTab1BackgroundAttributesCMSBlockStage">
            <argument name="section" value="TabOnStage"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Hex_Grey"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImage" stepKey="validateTab1BackgroundImageCMSBlockStage">
            <argument name="section" value="TabOnStage"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateTab1LayoutCMSBlockStage">
            <argument name="page" value="TabOnStage"/>
            <argument name="index" value="1"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_200"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateTab1MinHeightCMSBlockStage">
            <argument name="content" value="{{TabOnStage.tabContentCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
            <argument name="padding" value="PageBuilderPaddingProperty40"/>
            <argument name="border" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <seeElement selector="{{DividerOnStage.base('1')}}" stepKey="seeDividerCMSBlockStage"/>
        <actionGroup ref="validateDividerWidthPercentage" stepKey="validateDividerWidthCMSBlockStage">
            <argument name="page" value="DividerOnStage"/>
        </actionGroup>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{TabOnStorefront.tabHeaderItemActive('2')}}" stepKey="seeTab2ActiveCMSPageStage"/>
        <see selector="{{TabOnStorefront.tabHeader('2')}}" userInput="{{PageBuilderTabName2Default.value}}" stepKey="seeTab2TitleCMSPageStage"/>
        <waitForElement selector="{{DividerOnStorefront.base('1')}}" stepKey="waitForDividerCMSPageStage"/>
        <dontSeeElement selector="{{DividerOnStorefront.base('1')}}" stepKey="dontSeeDividerCMSPageStage"/>
        <seeElement selector="{{TabsOnFrontend.tabsContentMinHeight(PageBuilderTabsDefinedMinHeight.value)}}" stepKey="seeTabsMinHeightCMSPageStage"/>
        <seeElement selector="{{TabsOnFrontend.tabsNavAligned(PageBuilderTabsAlignmentCenter.value)}}" stepKey="seeTabsNavAlignedCenterCMSPageStage"/>
        <actionGroup ref="validateTabHeadersAlignedCenter" stepKey="validateTabHeadersAlignedCenterCMSPageStage">
            <argument name="tabGroupSection" value="TabsOnFrontend"/>
            <argument name="tabItemSection" value="TabOnStorefront"/>
        </actionGroup>
        <seeElement selector="{{TabOnStorefront.backgroundColor('2', PageBuilderBackgroundColor_RGB_Blue.rgb)}}" stepKey="seeTab2BackgroundColorCMSPageStage"/>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateTab2MinHeightCMSPageStage">
            <argument name="content" value="{{TabOnStorefront.tabContentCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_0"/>
            <argument name="padding" value="PageBuilderPaddingProperty40"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <waitForElementVisible selector="{{TabOnStorefront.tabHeaderItemActive('2')}}" stepKey="waitForTabsToRenderProperly"/>
        <seeElement selector="{{TabOnStorefront.tabHeaderItemActive('2')}}" stepKey="seeTab2ActiveCMSPageStorefront"/>
        <see selector="{{TabOnStorefront.tabHeader('2')}}" userInput="{{PageBuilderTabName2Default.value}}" stepKey="seeTab2TitleCMSPageStorefront"/>
        <waitForElement selector="{{DividerOnStorefront.base('1')}}" stepKey="waitForDividerCMSPageStorefront"/>
        <dontSeeElement selector="{{DividerOnStorefront.base('1')}}" stepKey="dontSeeDividerCMSPageStorefront"/>
        <seeElement selector="{{TabsOnFrontend.tabsContentMinHeight(PageBuilderTabsDefinedMinHeight.value)}}" stepKey="seeTabsMinHeightCMSPageStorefront"/>
        <seeElement selector="{{TabsOnFrontend.tabsNavAligned(PageBuilderTabsAlignmentCenter.value)}}" stepKey="seeTabsNavAlignedCenterCMSPageStorefront"/>
        <actionGroup ref="validateTabHeadersAlignedCenter" stepKey="validateTabHeadersAlignedCenterCMSPageStorefront">
            <argument name="tabGroupSection" value="TabsOnFrontend"/>
            <argument name="tabItemSection" value="TabOnStorefront"/>
        </actionGroup>
        <seeElement selector="{{TabOnStorefront.backgroundColor('2', PageBuilderBackgroundColor_RGB_Blue.rgb)}}" stepKey="seeTab2BackgroundColorCMSPageStorefront"/>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateTab2MinHeightCMSPageStorefront">
            <argument name="content" value="{{TabOnStorefront.tabContentCSS}}"/>
            <argument name="height" value="PageBuilderTabsDefinedMinHeight"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="switchTabs" stepKey="switchTabsCMSPageStorefront">
            <argument name="section" value="TabOnStorefront"/>
            <argument name="from" value="2"/>
            <argument name="to" value="1"/>
        </actionGroup>
        <see selector="{{TabOnStorefront.tabHeader('1')}}" userInput="{{PageBuilderTabNameRandom1.value}}" stepKey="seeTab1TitleCMSPageStorefront"/>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateTab1BackgroundAttributesCMSPageStorefront">
            <argument name="section" value="TabOnStorefront"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Hex_Grey"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateTab1BackgroundImageCMSPageStorefront">
            <argument name="section" value="TabOnStorefront"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateTab1LayoutCMSPageStorefront">
            <argument name="page" value="TabOnStorefront"/>
            <argument name="index" value="1"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_200"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateTab1MinHeightCMSPageStorefront">
            <argument name="content" value="{{TabOnStorefront.tabContentCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="verifyVerticalAlignmentCenterInBlock" stepKey="verifyVerticalAlignmentCenterCMSPageStorefront">
            <argument name="container" value="TabOnStorefront"/>
            <argument name="content" value="DividerOnStorefront"/>
            <argument name="containerIndex" value="1"/>
            <argument name="contentIndex" value="1"/>
        </actionGroup>
        <seeElement selector="{{DividerOnStorefront.base('1')}}" stepKey="seeDividerCMSPageStorefront"/>
        <actionGroup ref="validateDividerWidthPercentage" stepKey="validateDividerWidthCMSPageStorefront">
            <argument name="page" value="DividerOnStorefront"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront Mobile -->
        <comment userInput="Validate CMS Page Storefront Mobile" stepKey="commentValidateCMSPageStorefrontMobile"/>
        <resizeWindow width="767" height="1000" stepKey="resizeWindowToMobileCMSPageStorefrontMobile"/>
        <actionGroup ref="validateTabHeadersAlignedCenter" stepKey="validateTabHeadersAlignedCenterCMSPageStorefrontMobile">
            <argument name="tabGroupSection" value="TabsOnFrontend"/>
            <argument name="tabItemSection" value="TabOnStorefront"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateTab2BackgroundImageCMSPageStorefrontMobile">
            <argument name="section" value="TabOnStorefront"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundMobileImage_GIF"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="verifyVerticalAlignmentCenterInBlock" stepKey="verifyVerticalAlignmentCenterCMSPageStorefrontMobile">
            <argument name="container" value="TabOnStorefront"/>
            <argument name="content" value="DividerOnStorefront"/>
            <argument name="containerIndex" value="1"/>
            <argument name="contentIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateRowHeightCMSPageStorefrontMobile">
            <argument name="content" value="{{TabOnStorefront.baseCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateDividerWidthPercentage" stepKey="validateDividerWidthCMSPageStorefrontMobile">
            <argument name="page" value="DividerOnStorefront"/>
        </actionGroup>
        <actionGroup ref="switchTabs" stepKey="switchTabsCMSPageStorefrontMobile">
            <argument name="section" value="TabOnStorefront"/>
            <argument name="from" value="1"/>
            <argument name="to" value="2"/>
        </actionGroup>
        <waitForElement selector="{{DividerOnStorefront.base('1')}}" stepKey="waitForDividerCMSPageStorefrontMobile"/>
        <dontSeeElement selector="{{DividerOnStorefront.base('1')}}" stepKey="dontSeeDividerCMSPageStorefrontMobile"/>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateTab2MinHeightCMSPageStorefrontMobile">
            <argument name="content" value="{{TabOnStorefront.tabContentCSS}}"/>
            <argument name="height" value="PageBuilderTabsDefinedMinHeight"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <resizeWindow width="1280" height="1024" stepKey="resizeWindowToDesktop"/>
        <!-- Change Default Tab -->
        <comment userInput="Change Default Tab" stepKey="commentChangeDefaultTab"/>
        <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
            <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanelSmallByIndex" stepKey="openEditPanelTab1Again">
            <argument name="section" value="TabOnStage"/>
            <argument name="targetIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setTabNameTab1Again">
            <argument name="property" value="PageBuilderTabName1Default"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsTab1Again"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusSlide"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuTabs2">
            <argument name="contentType" value="PageBuilderTabsContentType"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelFieldGeneral" stepKey="enterDefaultActiveTab1">
            <argument name="property" value="PageBuilderTabsDefaultActiveTab"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsTabs2"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock2"/>
        <!-- Validate CMS Page Stage Again -->
        <comment userInput="Validate CMS Page Stage Again" stepKey="commentValidateCMSPageStageAgain"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage2">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <see selector="{{TabOnStorefront.tabHeader('1')}}" userInput="{{PageBuilderTabName1Default.value}}" stepKey="seeTab1TitleCMSPageStage2"/>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateTab1BackgroundAttributesCMSPageStage2">
            <argument name="section" value="TabOnStorefront"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Hex_Grey"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateTab1BackgroundImageCMSPageStage2">
            <argument name="section" value="TabOnStorefront"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateTab1LayoutCMSPageStage2">
            <argument name="page" value="TabOnStorefront"/>
            <argument name="index" value="1"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_200"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateTab1MinHeightCMSPageStage2">
            <argument name="content" value="{{TabOnStorefront.tabContentCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="verifyVerticalAlignmentCenterInBlock" stepKey="verifyVerticalAlignmentCenterCMSPageStage2">
            <argument name="container" value="TabOnStorefront"/>
            <argument name="content" value="DividerOnStorefront"/>
            <argument name="containerIndex" value="1"/>
            <argument name="contentIndex" value="1"/>
        </actionGroup>
        <seeElement selector="{{DividerOnStorefront.base('1')}}" stepKey="seeDividerCMSPageStage2"/>
        <actionGroup ref="validateDividerWidthPercentage" stepKey="validateDividerWidthCMSPageStage2">
            <argument name="page" value="DividerOnStorefront"/>
            <argument name="expectedOffset" value="{{PageBuilderDividerLineThickness_Default.value}}*2"/>
        </actionGroup>
    </test>
    <test name="BlockRenderHeadingThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Heading Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the Heading content type through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-13783"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-heading"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Heading -->
        <comment userInput="Add Heading" stepKey="commentAddHeading"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragHeadingIntoStage">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="clickOutsideLiveEditHeading" stepKey="clickOutsideLiveEditHeading">
            <argument name="index" value="1"/>
        </actionGroup>
        <!-- Edit Heading -->
        <comment userInput="Edit Heading" stepKey="commentEditHeading"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuHeading">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setHeadingText">
            <argument name="property" value="PageBuilderHeadingTextProperty"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelFieldGeneral" stepKey="setHeadingTypeH1">
            <argument name="property" value="PageBuilderHeadingTypeProperty_H1"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsHeading"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeElement selector="{{HeadingOnStage.headingType(PageBuilderHeadingTypeProperty_H1.value, '1')}}" stepKey="seeHeadingStyleCMSBlockStage"/>
        <seeElement selector="{{HeadingOnStage.headingText(PageBuilderHeadingTypeProperty_H1.value, PageBuilderHeadingTextProperty.value, '1')}}" stepKey="seeHeadingTextCMSBlockStage"/>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{HeadingOnStorefront.headingType(PageBuilderHeadingTypeProperty_H1.value, '1')}}" stepKey="seeHeadingStyleCMSPageStage"/>
        <seeElement selector="{{HeadingOnStorefront.headingText(PageBuilderHeadingTypeProperty_H1.value, PageBuilderHeadingTextProperty.value, '1')}}" stepKey="seeHeadingTextCMSPageStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{HeadingOnStorefront.headingType(PageBuilderHeadingTypeProperty_H1.value, '1')}}" stepKey="seeHeadingStyleCMSPageStorefront"/>
        <seeElement selector="{{HeadingOnStorefront.headingText(PageBuilderHeadingTypeProperty_H1.value, PageBuilderHeadingTextProperty.value, '1')}}" stepKey="seeHeadingTextCMSPageStorefront"/>
    </test>
    <test name="BlockRenderDividerThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Divider Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the Divider content type through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-13784"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-divider"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Divider -->
        <comment userInput="Add Divider" stepKey="commentAddDivider"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragDividerIntoStage">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
        </actionGroup>
        <!-- Edit Divider -->
        <comment userInput="Edit Divider" stepKey="commentEditDivider"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuDivider">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setDividerLineColor">
            <argument name="property" value="PageBuilderDividerLineColor_Yellow"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setDividerLineThickness">
            <argument name="property" value="PageBuilderDividerLineThickness_10"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setDividerLineWidth">
            <argument name="property" value="PageBuilderDividerLineWidth_50"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsDivider"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeElement selector="{{DividerOnStage.color('1', PageBuilderDividerLineColor_Yellow.rgb)}}" stepKey="seeDividerColorCMSBlockStage"/>
        <seeElement selector="{{DividerOnStage.thickness('1', PageBuilderDividerLineThickness_10.value)}}" stepKey="seeDividerThicknessCMSBlockStage"/>
        <seeElement selector="{{DividerOnStage.width('1', PageBuilderDividerLineWidth_50.value)}}" stepKey="seeDividerWidthCMSBlockStage"/>
        <actionGroup ref="validateDividerWidthPercentage" stepKey="validateDividerWidthCMSBlockStage">
            <argument name="page" value="DividerOnStage"/>
            <argument name="dividerWidth" value="PageBuilderDividerLineWidth_50"/>
        </actionGroup>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{DividerOnStorefront.color('1', PageBuilderDividerLineColor_Yellow.rgb)}}" stepKey="seeDividerColorCMSPageStage"/>
        <seeElement selector="{{DividerOnStorefront.thickness('1', PageBuilderDividerLineThickness_10.value)}}" stepKey="seeDividerThicknessCMSPageStage"/>
        <seeElement selector="{{DividerOnStorefront.width('1', PageBuilderDividerLineWidth_50.value)}}" stepKey="seeDividerWidthCMSPageStage"/>
        <actionGroup ref="validateDividerWidthPercentage" stepKey="validateDividerWidthCMSPageStage">
            <argument name="page" value="DividerOnStorefront"/>
            <argument name="dividerWidth" value="PageBuilderDividerLineWidth_50"/>
            <argument name="expectedOffset" value="{{PageBuilderDividerLineThickness_10.value}}*2"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{DividerOnStorefront.color('1', PageBuilderDividerLineColor_Yellow.rgb)}}" stepKey="seeDividerColorCMSPageStorefront"/>
        <seeElement selector="{{DividerOnStorefront.thickness('1', PageBuilderDividerLineThickness_10.value)}}" stepKey="seeDividerThicknessCMSPageStorefront"/>
        <seeElement selector="{{DividerOnStorefront.width('1', PageBuilderDividerLineWidth_50.value)}}" stepKey="seeDividerWidthCMSPageStorefront"/>
        <actionGroup ref="validateDividerWidthPercentage" stepKey="validateDividerWidthCMSPageStorefront">
            <argument name="page" value="DividerOnStorefront"/>
            <argument name="dividerWidth" value="PageBuilderDividerLineWidth_50"/>
        </actionGroup>
    </test>
    <test name="BlockRenderButtonsThroughBlockContentTypeInlineNotSameSize">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Buttons Through Block Content Type: Inline and Not Same Size"/>
            <description value="Verify that users are able to successfully render and use the Buttons content type (inline and not same size) through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-13785"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-buttons"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Buttons -->
        <comment userInput="Add Buttons" stepKey="commentAddButtons"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderButtonsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragButtonsIntoStage">
            <argument name="contentType" value="PageBuilderButtonsContentType"/>
        </actionGroup>
        <actionGroup ref="unFocusOptionMenu" stepKey="unFocusOptionMenu">
            <argument name="contentType" value="PageBuilderButtonItemContentType"/>
        </actionGroup>
        <!-- Edit Button Group -->
        <comment userInput="Edit Button Group" stepKey="commentEditButtonGroup"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuButtons">
            <argument name="contentType" value="PageBuilderButtonsContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setAppearanceOption">
            <argument name="property" value="PageBuilderButtonGroupAppearance_Inline"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setSameSizeOption">
            <argument name="property" value="PageBuilderButtonGroupSameSize_Disabled"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsButtons"/>
        <!-- Edit Button Item -->
        <comment userInput="Edit Button Item" stepKey="commentEditButtonItem"/>
        <actionGroup ref="openPageBuilderEditPanelSmallByIndex" stepKey="openEditMenuOnStageButtonItem">
            <argument name="section" value="ButtonItemOnStage"/>
            <argument name="targetIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="fillButtonTextField">
            <argument name="property" value="PageBuilderButtonItemText_First"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelFieldGeneral" stepKey="fillButtonType">
            <argument name="property" value="PageBuilderButtonItemType_Secondary"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelLinkUrlField" stepKey="fillButtonLinkField">
            <argument name="property" value="PageBuilderButtonItemLink_NotSecure"/>
            <argument name="selection" value="{{ExternalLink.url}}"/>
            <argument name="newTab" value="PageBuilderButtonItemOpenInNewTab_False"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsButtonItem"/>
        <!-- Add 2nd Button Item -->
        <comment userInput="Add 2nd Button Item" stepKey="commentAddButtonItem"/>
        <actionGroup ref="duplicateSmallContentType" stepKey="duplicateSmallContentType">
            <argument name="section" value="ButtonItemOnStage"/>
            <argument name="targetIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="inlineEditButton" stepKey="inlineEditButton2">
            <argument name="text" value="PageBuilderButtonItemText_OneCharacter"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeNumberOfElements selector="{{ButtonItemOnStage.all}}" userInput="2" stepKey="see2ButtonsCMSBlockStage"/>
        <actionGroup ref="validateButtonItemContent" stepKey="validateButton1CMSBlockStage">
            <argument name="page" value="ButtonItemOnStage"/>
            <argument name="text" value="PageBuilderButtonItemText_First"/>
            <argument name="type" value="PageBuilderButtonItemType_Secondary"/>
            <argument name="url" value="PageBuilderButtonItemLink_NotSecure"/>
            <argument name="newTab" value="PageBuilderButtonItemOpenInNewTab_False"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemContent" stepKey="validateButton2CMSBlockStage">
            <argument name="page" value="ButtonItemOnStage"/>
            <argument name="text" value="PageBuilderButtonItemText_OneCharacter"/>
            <argument name="type" value="PageBuilderButtonItemType_Secondary"/>
            <argument name="url" value="PageBuilderButtonItemLink_NotSecure"/>
            <argument name="newTab" value="PageBuilderButtonItemOpenInNewTab_False"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateButtonGroupInlineAppearance" stepKey="validateButtonGroupAppearanceCMSBlockStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStage"/>
            <argument name="buttonItemPage" value="ButtonItemOnStage"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemsDifferentSizes" stepKey="validateButtonsSizesCMSBlockStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStage"/>
            <argument name="buttonItemPage" value="ButtonItemOnStage"/>
        </actionGroup>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeNumberOfElements selector="{{ButtonItemOnStorefront.all}}" userInput="2" stepKey="see2ButtonsCMSPageStage"/>
        <actionGroup ref="validateButtonItemContent" stepKey="validateButton1CMSPageStage">
            <argument name="page" value="ButtonItemOnStorefront"/>
            <argument name="text" value="PageBuilderButtonItemText_First"/>
            <argument name="type" value="PageBuilderButtonItemType_Secondary"/>
            <argument name="url" value="PageBuilderButtonItemLink_NotSecure"/>
            <argument name="newTab" value="PageBuilderButtonItemOpenInNewTab_False"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemContent" stepKey="validateButton2CMSPageStage">
            <argument name="page" value="ButtonItemOnStorefront"/>
            <argument name="text" value="PageBuilderButtonItemText_OneCharacter"/>
            <argument name="type" value="PageBuilderButtonItemType_Secondary"/>
            <argument name="url" value="PageBuilderButtonItemLink_NotSecure"/>
            <argument name="newTab" value="PageBuilderButtonItemOpenInNewTab_False"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateButtonGroupInlineAppearance" stepKey="validateButtonGroupAppearanceCMSPageStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemsDifferentSizes" stepKey="validateButtonsSizesCMSPageStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeNumberOfElements selector="{{ButtonItemOnStorefront.all}}" userInput="2" stepKey="see2ButtonsCMSPageStorefront"/>
        <actionGroup ref="validateButtonItemContent" stepKey="validateButton1CMSPageStorefront">
            <argument name="page" value="ButtonItemOnStorefront"/>
            <argument name="text" value="PageBuilderButtonItemText_First"/>
            <argument name="type" value="PageBuilderButtonItemType_Secondary"/>
            <argument name="url" value="PageBuilderButtonItemLink_NotSecure"/>
            <argument name="newTab" value="PageBuilderButtonItemOpenInNewTab_False"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemContent" stepKey="validateButton2CMSPageStorefront">
            <argument name="page" value="ButtonItemOnStorefront"/>
            <argument name="text" value="PageBuilderButtonItemText_OneCharacter"/>
            <argument name="type" value="PageBuilderButtonItemType_Secondary"/>
            <argument name="url" value="PageBuilderButtonItemLink_NotSecure"/>
            <argument name="newTab" value="PageBuilderButtonItemOpenInNewTab_False"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateButtonGroupInlineAppearance" stepKey="validateButtonGroupAppearanceCMSPageStorefront">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemsDifferentSizes" stepKey="validateButtonsSizesCMSPageStorefront">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <click selector="{{ButtonItemOnStorefront.buttonItemUrl('1', PageBuilderButtonItemLink_NotSecure.value)}}" stepKey="clickButtonCMSPageStorefront"/>
        <wait time="3" stepKey="waitArbitraryTimeForPotentialNavigationToOccurCMSPageStorefront"/>
        <seeCurrentUrlEquals url="{{PageBuilderButtonItemLink_NotSecure.value}}" stepKey="seeThatUrlIsChangedToButtonUrl"/>
    </test>
        <test name="BlockRenderButtonsThroughBlockContentTypeInlineSameSize" extends="BlockRenderButtonsThroughBlockContentTypeInlineNotSameSize">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Buttons Through Block Content Type: Inline and Same Size"/>
            <description value="Verify that users are able to successfully render and use the Buttons content type (inline and same size) through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-13927"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-buttons"/>
        </annotations>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setSameSizeOption">
            <argument name="property" value="PageBuilderButtonGroupSameSize_Enabled"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemsSameSize" stepKey="validateButtonsSizesCMSBlockStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemsSameSize" stepKey="validateButtonsSizesCMSPageStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemsSameSize" stepKey="validateButtonsSizesCMSPageStorefront">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
    </test>
    <test name="BlockRenderButtonsThroughBlockContentTypeStackedNotSameSize" extends="BlockRenderButtonsThroughBlockContentTypeInlineNotSameSize">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Buttons Through Block Content Type: Stacked and Not Same Size"/>
            <description value="Verify that users are able to successfully render and use the Buttons content type (stacked and not same size) through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-13928"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-buttons"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setAppearanceOption">
            <argument name="property" value="PageBuilderButtonGroupAppearance_Stacked"/>
        </actionGroup>
        <actionGroup ref="validateButtonGroupStackedAppearance" stepKey="validateButtonGroupAppearanceCMSBlockStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="validateButtonGroupStackedAppearance" stepKey="validateButtonGroupAppearanceCMSPageStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="validateButtonGroupStackedAppearance" stepKey="validateButtonGroupAppearanceCMSPageStorefront">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
    </test>
    <test name="BlockRenderButtonsThroughBlockContentTypeStackedSameSize" extends="BlockRenderButtonsThroughBlockContentTypeInlineNotSameSize">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Buttons Through Block Content Type: Stacked and Same Size"/>
            <description value="Verify that users are able to successfully render and use the Buttons content type (stacked and same size) through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-13929"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-buttons"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setAppearanceOption">
            <argument name="property" value="PageBuilderButtonGroupAppearance_Stacked"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setSameSizeOption">
            <argument name="property" value="PageBuilderButtonGroupSameSize_Enabled"/>
        </actionGroup>
        <actionGroup ref="validateButtonGroupStackedAppearance" stepKey="validateButtonGroupAppearanceCMSBlockStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemsSameSize" stepKey="validateButtonsSizesCMSBlockStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="validateButtonGroupStackedAppearance" stepKey="validateButtonGroupAppearanceCMSPageStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemsSameSize" stepKey="validateButtonsSizesCMSPageStage">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="validateButtonGroupStackedAppearance" stepKey="validateButtonGroupAppearanceCMSPageStorefront">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
        <actionGroup ref="validateButtonItemsSameSize" stepKey="validateButtonsSizesCMSPageStorefront">
            <argument name="buttonGroupPage" value="ButtonGroupOnStorefront"/>
            <argument name="buttonItemPage" value="ButtonItemOnStorefront"/>
        </actionGroup>
    </test>
    <test name="BlockRenderHTMLThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render HTML Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the HTML content type through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-14806"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-html"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add HTML -->
        <comment userInput="Add HTML" stepKey="commentAddHTML"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderHtmlContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragHTMLIntoStage">
            <argument name="contentType" value="PageBuilderHtmlContentType"/>
        </actionGroup>
        <!-- Edit HTML -->
        <comment userInput="Edit HTML" stepKey="commentEditHTML"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuHtml">
            <argument name="contentType" value="PageBuilderHtmlContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelTextArea" stepKey="enterHtmlContent">
            <argument name="property" value="PageBuilderHtmlPropertyButton"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsHtml"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeElement selector="{{HtmlOnStage.base('1')}}" stepKey="seeHtmlBaseCMSBlockStage"/>
        <seeElement selector="{{HtmlOnStage.html('1', PageBuilderHtmlPropertyButton.selector)}}" stepKey="seeHtmlCMSBlockStage"/>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{HtmlOnStorefront.base('1')}}" stepKey="seeHtmlBaseCMSPageStage"/>
        <seeElement selector="{{HtmlOnStorefront.html('1', PageBuilderHtmlPropertyButton.selector)}}" stepKey="seeHtmlCMSPageStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{HtmlOnStorefront.base('1')}}" stepKey="seeHtmlBaseCMSPageStorefront"/>
        <seeElement selector="{{HtmlOnStorefront.html('1', PageBuilderHtmlPropertyButton.selectorOnFrontend)}}" stepKey="seeRenderedHtmlCMSPageStorefront"/>
        <click selector="{{HtmlOnStorefront.html('1', PageBuilderHtmlPropertyButton.selectorOnFrontend)}}" stepKey="clickRenderedHtmlButtonCMSPageStorefront"/>
        <wait time="3" stepKey="waitArbitraryTimeForPotentialNavigationToOccurCMSPageStorefront"/>
        <seeCurrentUrlEquals url="{{PageBuilderHtmlPropertyButton.url}}" stepKey="seeThatUrlIsChangedToHtmlLinkUrl"/>
    </test>
    <test name="BlockRenderVideoThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Video Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the video content type through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-14832"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-video"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Video -->
        <comment userInput="Add Video" stepKey="commentAddVideo"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderVideoContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragVideoIntoStage">
            <argument name="contentType" value="PageBuilderVideoContentType"/>
        </actionGroup>
        <!-- Edit Video -->
        <comment userInput="Edit Video" stepKey="commentEditVideo"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuVideo">
            <argument name="contentType" value="PageBuilderVideoContentType"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterVideoUrlProperty">
            <argument name="property" value="PageBuilderVideoUrl_YouTube"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterVideoWidthProperty">
            <argument name="property" value="PageBuilderVideoWidth_500"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsVideo"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <actionGroup ref="validateVideo" stepKey="validateCMSBlockStage">
            <argument name="page" value="VideoOnStage"/>
            <argument name="url" value="PageBuilderVideoUrl_YouTube"/>
            <argument name="width" value="PageBuilderVideoWidth_500"/>
        </actionGroup>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <actionGroup ref="validateVideo" stepKey="validateCMSPageStage">
            <argument name="page" value="VideoOnStorefront"/>
            <argument name="url" value="PageBuilderVideoUrl_YouTube"/>
            <argument name="width" value="PageBuilderVideoWidth_500"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <actionGroup ref="validateVideo" stepKey="validateCMSPageStorefront">
            <argument name="page" value="VideoOnStorefront"/>
            <argument name="url" value="PageBuilderVideoUrl_YouTube"/>
            <argument name="width" value="PageBuilderVideoWidth_500"/>
        </actionGroup>
    </test>
    <test name="BlockRenderBlockThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Block Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the block content type through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-14834"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <createData entity="_defaultBlock" stepKey="createPreReqBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createPreReqBlock" stepKey="deletePreReqBlock"/>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Block -->
        <comment userInput="Add Block" stepKey="commentAddBlock"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <!-- Edit Block -->
        <comment userInput="Edit Block" stepKey="commentEditBlock"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createPreReqBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <actionGroup ref="verifyBlockOnStage" stepKey="verifyBlockCMSBlockStage">
            <argument name="block" value="$$createPreReqBlock$$"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoPageStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInPageGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="savePageEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{BlockOnStage.base('1')}}" stepKey="seeBlockOnCMSPageStage"/>
        <see selector="{{BlockOnStage.content('1')}}" userInput="$$createPreReqBlock.content$$" stepKey="seeBlockContentOnCMSPageStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{BlockOnStorefront.base('1')}}" stepKey="seeBlockCMSPageStorefront"/>
        <seeElement selector="{{BlockOnStorefront.base('2')}}" stepKey="seeNestedBlockCMSPageStorefront"/>
        <see selector="{{BlockOnStorefront.base('2')}}{{BlockOnStorefront.ancestor}}" userInput="$$createPreReqBlock.content$$" stepKey="seeBlockContentCMSPageStorefront"/>
    </test>
    <test name="BlockRenderImageThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Image Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the image content type through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-14874"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-image"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <resizeWindow width="1280" height="1024" stepKey="resizeWindowToDesktop"/>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="navigateToMediaGallery" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="NavigateToFolder">
                <argument name="FolderName" value="{{PageBuilderImageProperty_JPG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage">
                <argument name="Image" value="PageBuilderImageProperty_JPG"/>
            </actionGroup>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="NavigateToFolder2">
                <argument name="FolderName" value="{{PageBuilderMobileImagePropertyGif.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="DeleteImageFromStorage2">
                <argument name="Image" value="PageBuilderMobileImagePropertyGif"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Image -->
        <comment userInput="Add Image" stepKey="commentAddImage"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderImageContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragImageIntoStage">
            <argument name="contentType" value="PageBuilderImageContentType"/>
        </actionGroup>
        <!-- Edit Image -->
        <comment userInput="Edit Image" stepKey="commentEditImage"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuImage">
            <argument name="contentType" value="PageBuilderImageContentType"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutPropertyGeneral" stepKey="attachImage">
            <argument name="property" value="PageBuilderImageProperty_JPG"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutPropertyGeneral" stepKey="attachMobileImage">
            <argument name="property" value="PageBuilderMobileImagePropertyGif"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelLinkUrlField" stepKey="enterLink">
            <argument name="property" value="PageBuilderImageLinkProperty"/>
            <argument name="selection" value="{{ExternalLink.url}}"/>
            <argument name="newTab" value="PageBuilderImageNewTab_False"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterImageCaption">
            <argument name="property" value="PageBuilderImageCaptionProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterAltText">
            <argument name="property" value="PageBuilderImageAltTextProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterTitleAttribute">
            <argument name="property" value="PageBuilderImageTitleAttributeProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsImage"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <waitForElementVisible selector="{{ImageOnStage.base('1')}}" stepKey="waitForImageCMSBlockStage"/>
        <see selector="{{ImageOnStage.imageCaption('1')}}" userInput="{{PageBuilderImageCaptionProperty.value}}" stepKey="seeImageCaptionCMSBlockStage"/>
        <seeElement selector="{{ImageOnStage.imageAltText('1', PageBuilderImageAltTextProperty.value)}}" stepKey="seeImageAltTextCMSBlockStage"/>
        <seeElement selector="{{ImageOnStage.imageTitleAttribute('1', PageBuilderImageTitleAttributeProperty.value)}}" stepKey="seeImageTitleAttributeCMSBlockStage"/>
        <actionGroup ref="validateImage" stepKey="validateImageCMSBlockStage">
            <argument name="section" value="ImageOnStage"/>
            <argument name="image" value="PageBuilderImageProperty_JPG"/>
        </actionGroup>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoPageStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInPageGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="savePageEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <waitForElementVisible selector="{{ImageOnStorefront.base('1')}}" stepKey="waitForImageCMSPageStage"/>
        <seeElement selector="{{ImageOnStorefront.imageDesktop('1')}}" stepKey="seeDesktopImageCMSPageStage"/>
        <see selector="{{ImageOnStorefront.imageCaption('1')}}" userInput="{{PageBuilderImageCaptionProperty.value}}" stepKey="seeImageCaptionCMSPageStage"/>
        <seeElement selector="{{ImageOnStorefront.imageAltText('1', PageBuilderImageAltTextProperty.value)}}" stepKey="seeImageAltTextCMSPageStage"/>
        <seeElement selector="{{ImageOnStorefront.imageTitleAttribute('1', PageBuilderImageTitleAttributeProperty.value)}}" stepKey="seeImageTitleAttributeCMSPageStage"/>
        <seeElement selector="{{ImageOnStorefront.imageLink('1', PageBuilderImageLinkProperty.value)}}" stepKey="seeImageLinkCMSPageStage"/>
        <seeElement selector="{{ImageOnStorefront.imageLinkTarget('1', PageBuilderImageNewTab_False.stageValue)}}" stepKey="seeImageLinkTargetCMSPageStage"/>
        <actionGroup ref="validateImage" stepKey="validateImageCMSPageStage">
            <argument name="section" value="ImageOnStorefront"/>
            <argument name="image" value="PageBuilderImageProperty_JPG"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <waitForElementVisible selector="{{ImageOnStorefront.base('1')}}" stepKey="waitForImageCMSPageStorefront"/>
        <seeElement selector="{{ImageOnStorefront.imageDesktop('1')}}" stepKey="seeDesktopImageCMSPageStorefront"/>
        <see selector="{{ImageOnStorefront.imageCaption('1')}}" userInput="{{PageBuilderImageCaptionProperty.value}}" stepKey="seeImageCaptionCMSPageStorefront"/>
        <seeElement selector="{{ImageOnStorefront.imageAltText('1', PageBuilderImageAltTextProperty.value)}}" stepKey="seeImageAltTextCMSPageStorefront"/>
        <seeElement selector="{{ImageOnStorefront.imageTitleAttribute('1', PageBuilderImageTitleAttributeProperty.value)}}" stepKey="seeImageTitleAttributeCMSPageStorefront"/>
        <seeElement selector="{{ImageOnStorefront.imageLink('1', PageBuilderImageLinkProperty.value)}}" stepKey="seeImageLinkCMSPageStorefront"/>
        <seeElement selector="{{ImageOnStorefront.imageLinkTarget('1', PageBuilderImageNewTab_False.stageValue)}}" stepKey="seeImageLinkTargetCMSPageStorefront"/>
        <actionGroup ref="validateImage" stepKey="validateImageCMSPageStorefront">
            <argument name="section" value="ImageOnStorefront"/>
            <argument name="image" value="PageBuilderImageProperty_JPG"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront Mobile -->
        <comment userInput="Validate CMS Page Storefront Mobile" stepKey="commentValidateCMSPageStorefrontMobile"/>
        <resizeWindow width="767" height="1000" stepKey="resizeWindowToMobileCMSPageStorefront"/>
        <waitForElementVisible selector="{{ImageOnStorefront.base('1')}}" stepKey="waitForImageCMSPageStorefrontMobile"/>
        <seeElement selector="{{ImageOnStorefront.imageMobile('1')}}" stepKey="seeMobileImageCMSPageStorefrontMobile"/>
        <see selector="{{ImageOnStorefront.imageCaption('1')}}" userInput="{{PageBuilderImageCaptionProperty.value}}" stepKey="seeImageCaptionCMSPageStorefrontMobile"/>
        <seeElement selector="{{ImageOnStorefront.imageAltText('1', PageBuilderImageAltTextProperty.value)}}" stepKey="seeImageAltTextCMSPageStorefrontMobile"/>
        <seeElement selector="{{ImageOnStorefront.imageTitleAttribute('1', PageBuilderImageTitleAttributeProperty.value)}}" stepKey="seeImageTitleAttributeCMSPageStorefrontMobile"/>
        <seeElement selector="{{ImageOnStorefront.imageLink('1', PageBuilderImageLinkProperty.value)}}" stepKey="seeImageLinkCMSPageStorefrontMobile"/>
        <seeElement selector="{{ImageOnStorefront.imageLinkTarget('1', PageBuilderImageNewTab_False.stageValue)}}" stepKey="seeImageLinkTargetCMSPageStorefrontMobile"/>
        <actionGroup ref="validateImage" stepKey="validateImageCMSPageStorefrontMobile">
            <argument name="section" value="ImageOnStorefront"/>
            <argument name="image" value="PageBuilderMobileImagePropertyGif"/>
        </actionGroup>
        <click selector="{{ImageOnStorefront.imageLink('1', PageBuilderImageLinkProperty.value)}}" stepKey="clickImageCMSPageStorefront"/>
        <wait time="3" stepKey="waitArbitraryTimeForPotentialNavigationToOccurCMSPageStorefront"/>
        <seeCurrentUrlEquals url="{{PageBuilderImageLinkProperty.value}}" stepKey="seeThatUrlIsChangedToImageLinkUrl"/>
    </test>
    <test name="BlockRenderRowContainedAppearanceWithParallaxThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Row Contained Appearance With Parallax Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the row content type contained appearance with parallax enabled through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-14933"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-parallax"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <resizeWindow width="1280" height="1024" stepKey="resizeWindowToDesktop"/>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="navigateToMediaGallery" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="navigateToDesktopImageFolder">
                <argument name="FolderName" value="{{PageBuilderBackgroundImage_JPG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="deleteBackgroundImage">
                <argument name="Image" value="PageBuilderBackgroundImage_JPG"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="deleteMobileBackgroundImage">
                <argument name="Image" value="PageBuilderBackgroundMobileImage_GIF"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Edit Row -->
        <comment userInput="Edit Row" stepKey="commentEditRow"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuRow">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <!-- Fill All Fields -->
        <comment userInput="Fill All Fields" stepKey="commentEdit"/>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearance">
            <argument name="property" value="PageBuilderRowAppearance_Contained"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Plaintext_Green"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachFileSlideOutProperty1">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachFileSlideOutProperty2">
            <argument name="property" value="PageBuilderBackgroundMobileImage_GIF"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="setBackgroundPosition">
            <argument name="property" value="PageBuilderBackgroundPosition_Center"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setBackgroundSize">
            <argument name="property" value="PageBuilderBackgroundSize_Auto"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="setBackgroundAttachment">
            <argument name="property" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setBackgroundRepeat">
            <argument name="property" value="PageBuilderBackgroundRepeat_Enabled"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="enableParallaxBackground">
            <argument name="property" value="PageBuilderRowParallax_Enabled"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterParallaxBackgroundSpeed">
            <argument name="property" value="PageBuilderRowParallaxSpeed_2"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterMinHeightProperty">
            <argument name="property" value="PageBuilderMinHeightProperty_500"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterVerticalAlignmentCenterProperty">
            <argument name="property" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsRow"/>
        <!-- Add Divider To Row -->
        <comment userInput="Add Divider To Row" stepKey="commentAddDivider"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragDividerIntoStage">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
        </actionGroup>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <actionGroup ref="validateContainedRowAppearance" stepKey="validateRowAppearanceCMSBlockStage"/>
        <actionGroup ref="validateRowBackgroundAttributesWithAllUpdatedAndParallaxEnabled" stepKey="validateBackgroundCMSBlockStage">
            <argument name="page" value="RowOnStage"/>
            <argument name="index" value="1"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateRowParallaxBackgroundAttributes" stepKey="validateParallaxBackgroundCMSBlockStage">
            <argument name="page" value="RowOnStage"/>
            <argument name="index" value="1"/>
            <argument name="parallaxStateValue" value="PageBuilderRowParallax_Enabled"/>
            <argument name="parallaxSpeedValue" value="PageBuilderRowParallaxSpeed_2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainerForParallaxRow" stepKey="validateBackgroundImageCMSBlockStage">
            <argument name="section" value="RowOnStage"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateRowLayoutCMSBlockStage">
            <argument name="page" value="RowOnStage"/>
            <argument name="index" value="1"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateRowHeightCMSBlockStage">
            <argument name="content" value="{{RowOnStage.baseCSS}}"/>
            <argument name="padding" value="PageBuilderPaddingProperty10"/>
            <argument name="height" value="PageBuilderMinHeightProperty_500"/>
        </actionGroup>
        <actionGroup ref="validateDividerWidthPercentage" stepKey="validateDividerWidthCMSBlockStage">
            <argument name="page" value="DividerOnStage"/>
        </actionGroup>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Edit Row On CMS Page -->
        <comment userInput="Edit Row On CMS Page" stepKey="commentEditRowCMSPage"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuRowCMSPage">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearanceCMSPage">
            <argument name="property" value="PageBuilderRowAppearance_FullBleed"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldPadding" stepKey="enterPaddingCMSPage">
            <argument name="property" value="PageBuilderPaddingPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsRowCMSPage"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <actionGroup ref="validateContainedRowAppearance" stepKey="validateRowAppearanceCMSPageStage">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateRowBackgroundAttributesWithAllUpdatedAndParallaxEnabled" stepKey="validateRowBackgroundCMSPageStage">
            <argument name="page" value="RowOnStorefront"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateRowParallaxBackgroundAttributes" stepKey="validateRowParallaxBackgroundCMSPageStage">
            <argument name="page" value="RowOnStorefront"/>
            <argument name="index" value="2"/>
            <argument name="parallaxStateValue" value="PageBuilderRowParallax_Enabled"/>
            <argument name="parallaxSpeedValue" value="PageBuilderRowParallaxSpeed_2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainerForParallaxRow" stepKey="validateBackgroundImageCMSPageStage">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateRowLayoutCMSPageStage">
            <argument name="page" value="RowOnStorefront"/>
            <argument name="index" value="2"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="verifyVerticalAlignmentCenterInBlock" stepKey="verifyVerticalAlignmentCenterCMSPageStage">
            <argument name="container" value="RowOnStorefront"/>
            <argument name="content" value="DividerOnStorefront"/>
            <argument name="containerIndex" value="1"/>
            <argument name="contentIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateRowHeightCMSPageStage">
            <argument name="content" value="{{RowOnStorefront.baseCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_500"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateDividerWidthPercentage" stepKey="validateDividerWidthCMSPageStage">
            <argument name="page" value="DividerOnStorefront"/>
            <argument name="expectedOffset" value="{{PageBuilderDividerLineThickness_Default.value}}*2"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <actionGroup ref="validateContainedRowAppearance" stepKey="validateRowAppearanceCMSPageStorefront">
            <argument name="pageOrStageWidthJS" value="{{PageBuilderStoreFront.pageWidthJS}}"/>
            <argument name="section" value="RowOnStorefront"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateRowBackgroundAttributesWithAllUpdatedAndParallaxEnabled" stepKey="validateRowBackgroundCMSPageStorefront">
            <argument name="page" value="RowOnStorefront"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateRowParallaxBackgroundAttributes" stepKey="validateRowParallaxBackgroundCMSPageStorefront">
            <argument name="page" value="RowOnStorefront"/>
            <argument name="index" value="2"/>
            <argument name="parallaxStateValue" value="PageBuilderRowParallax_Enabled"/>
            <argument name="parallaxSpeedValue" value="PageBuilderRowParallaxSpeed_2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainerForParallaxRow" stepKey="validateBackgroundImageCMSPageStorefront">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateRowLayoutCMSPageStorefront">
            <argument name="page" value="RowOnStorefront"/>
            <argument name="index" value="2"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="verifyVerticalAlignmentCenterInBlock" stepKey="verifyVerticalAlignmentCenterCMSPageStorefront">
            <argument name="container" value="RowOnStorefront"/>
            <argument name="content" value="DividerOnStorefront"/>
            <argument name="containerIndex" value="1"/>
            <argument name="contentIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateRowHeightCMSPageStorefront">
            <argument name="content" value="{{RowOnStorefront.baseCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_500"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateDividerWidthPercentage" stepKey="validateDividerWidthCMSPageStorefront">
            <argument name="page" value="DividerOnStorefront"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront Mobile -->
        <comment userInput="Validate CMS Page Storefront Mobile" stepKey="commentValidateCMSPageStorefrontMobile"/>
        <resizeWindow width="767" height="1000" stepKey="resizeWindowToMobileCMSPageStorefront"/>
        <reloadPage stepKey="reloadPage"/>
        <waitForPageLoad stepKey="waitForReload"/>
        <actionGroup ref="validateBackgroundImageContainerForParallaxRow" stepKey="validateBackgroundImageCMSPageStorefrontMobile">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundMobileImage_GIF"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="verifyVerticalAlignmentCenterInBlock" stepKey="verifyVerticalAlignmentCenterCMSPageStorefrontMobile">
            <argument name="container" value="RowOnStorefront"/>
            <argument name="content" value="DividerOnStorefront"/>
            <argument name="containerIndex" value="1"/>
            <argument name="contentIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateRowHeightCMSPageStorefrontMobile">
            <argument name="content" value="{{RowOnStorefront.baseCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_500"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateDividerWidthPercentage" stepKey="validateDividerWidthCMSPageStorefrontMobile">
            <argument name="page" value="DividerOnStorefront"/>
        </actionGroup>
    </test>
    <test name="BlockRenderRowFullWidthAppearanceWithParallaxThroughBlockContentType" extends="BlockRenderRowContainedAppearanceWithParallaxThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Row Full Width Appearance With Parallax Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the row content type full width appearance with parallax enabled through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-14934"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-parallax"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearance">
            <argument name="property" value="PageBuilderRowAppearance_FullWidth"/>
        </actionGroup>
        <!-- Validate CMS Block Stage -->
        <actionGroup ref="validateFullWidthRowAppearance" stepKey="validateRowAppearanceCMSBlockStage"/>
        <!-- Validate CMS Page Stage -->
        <actionGroup ref="validateFullBleedRowAppearance" stepKey="validateRowAppearanceCMSPageStage">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="rowIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateRowBackgroundAttributesWithAllUpdatedAndParallaxEnabled" stepKey="validateRowBackgroundCMSPageStage">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateRowParallaxBackgroundAttributes" stepKey="validateRowParallaxBackgroundCMSPageStage">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="parallaxStateValue" value="PageBuilderRowParallax_Enabled"/>
            <argument name="parallaxSpeedValue" value="PageBuilderRowParallaxSpeed_2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainerForParallaxRow" stepKey="validateBackgroundImageCMSPageStage">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateRowLayoutCMSPageStage">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront -->
        <actionGroup ref="validateFullWidthRowAppearance" stepKey="validateRowAppearanceCMSPageStorefront">
            <argument name="pageOrStageWidthJS" value="{{PageBuilderStoreFront.pageWidthJS}}"/>
            <argument name="section" value="RowOnStorefront"/>
            <argument name="rowIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateRowBackgroundAttributesWithAllUpdatedAndParallaxEnabled" stepKey="validateRowBackgroundCMSPageStorefront">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateRowParallaxBackgroundAttributes" stepKey="validateRowParallaxBackgroundCMSPageStorefront">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="parallaxStateValue" value="PageBuilderRowParallax_Enabled"/>
            <argument name="parallaxSpeedValue" value="PageBuilderRowParallaxSpeed_2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainerForParallaxRow" stepKey="validateBackgroundImageCMSPageStorefront">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateRowLayoutCMSPageStorefront">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront Mobile -->
        <actionGroup ref="validateBackgroundImageContainerForParallaxRow" stepKey="validateBackgroundImageCMSPageStorefrontMobile">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundMobileImage_GIF"/>
            <argument name="index" value="2"/>
        </actionGroup>
    </test>
    <test name="BlockRenderRowFullBleedAppearanceWithParallaxThroughBlockContentType" extends="BlockRenderRowContainedAppearanceWithParallaxThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Row Full Bleed Appearance With Parallax Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the row content type full bleed appearance with parallax enabled through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-14936"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-row"/>
            <group value="pagebuilder-parallax"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearance">
            <argument name="property" value="PageBuilderRowAppearance_FullBleed"/>
        </actionGroup>
        <!-- Validate CMS Block Stage -->
        <actionGroup ref="validateFullBleedRowAppearance" stepKey="validateRowAppearanceCMSBlockStage"/>
        <!-- Validate CMS Page Stage -->
        <actionGroup ref="validateFullBleedRowAppearance" stepKey="validateRowAppearanceCMSPageStage">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="rowIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateRowBackgroundAttributesWithAllUpdatedAndParallaxEnabled" stepKey="validateRowBackgroundCMSPageStage">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateRowParallaxBackgroundAttributes" stepKey="validateRowParallaxBackgroundCMSPageStage">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="parallaxStateValue" value="PageBuilderRowParallax_Enabled"/>
            <argument name="parallaxSpeedValue" value="PageBuilderRowParallaxSpeed_2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainerForParallaxRow" stepKey="validateBackgroundImageCMSPageStage">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateRowLayoutCMSPageStage">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront -->
        <actionGroup ref="validateFullBleedRowAppearance" stepKey="validateRowAppearanceCMSPageStorefront">
            <argument name="pageOrStageWidthJS" value="{{PageBuilderStoreFront.pageWidthJS}}"/>
            <argument name="section" value="RowOnStorefront"/>
            <argument name="rowIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateRowBackgroundAttributesWithAllUpdatedAndParallaxEnabled" stepKey="validateRowBackgroundCMSPageStorefront">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateRowParallaxBackgroundAttributes" stepKey="validateRowParallaxBackgroundCMSPageStorefront">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="parallaxStateValue" value="PageBuilderRowParallax_Enabled"/>
            <argument name="parallaxSpeedValue" value="PageBuilderRowParallaxSpeed_2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainerForParallaxRow" stepKey="validateBackgroundImageCMSPageStorefront">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateRowLayoutCMSPageStorefront">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront Mobile -->
        <actionGroup ref="validateBackgroundImageContainerForParallaxRow" stepKey="validateBackgroundImageCMSPageStorefrontMobile">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundMobileImage_GIF"/>
            <argument name="index" value="2"/>
        </actionGroup>
    </test>
    <test name="BlockRenderRowContainedAppearanceThroughBlockContentType" extends="BlockRenderRowContainedAppearanceWithParallaxThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Row Contained Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the row content type contained appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15088"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-row"/>
        </annotations>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="enableParallaxBackground">
            <argument name="property" value="PageBuilderRowParallax_Disabled"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="enterParallaxBackgroundSpeed"/>
        <!-- Validate CMS Block Stage -->
        <actionGroup ref="validateBackgroundAttributes" stepKey="validateBackgroundCMSBlockStage">
            <argument name="section" value="RowOnStage"/>
            <argument name="index" value="1"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="validateParallaxBackgroundCMSBlockStage"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSBlockStage">
            <argument name="section" value="RowOnStage_Contained"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <!-- Validate CMS Page Stage -->
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateRowBackgroundCMSPageStage">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="validateRowParallaxBackgroundCMSPageStage"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStage">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront -->
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateRowBackgroundCMSPageStorefront">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="validateRowParallaxBackgroundCMSPageStorefront"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStorefront">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront Mobile -->
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStorefrontMobile">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundMobileImage_GIF"/>
            <argument name="index" value="2"/>
        </actionGroup>
    </test>
    <test name="BlockRenderRowFullWidthAppearanceThroughBlockContentType" extends="BlockRenderRowContainedAppearanceWithParallaxThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Row Full Width Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the row content type full width appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15089"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-row"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearance">
            <argument name="property" value="PageBuilderRowAppearance_FullWidth"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="enableParallaxBackground">
            <argument name="property" value="PageBuilderRowParallax_Disabled"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="enterParallaxBackgroundSpeed"/>
        <!-- Validate CMS Block Stage -->
        <actionGroup ref="validateFullWidthRowAppearance" stepKey="validateRowAppearanceCMSBlockStage"/>
        <actionGroup ref="validateBackgroundAttributes" stepKey="validateBackgroundCMSBlockStage">
            <argument name="section" value="RowOnStage"/>
            <argument name="index" value="1"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="validateParallaxBackgroundCMSBlockStage"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSBlockStage">
            <argument name="section" value="RowOnStage"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <!-- Validate CMS Page Stage -->
        <actionGroup ref="validateFullBleedRowAppearance" stepKey="validateRowAppearanceCMSPageStage">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="rowIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateRowBackgroundCMSPageStage">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="validateRowParallaxBackgroundCMSPageStage"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStage">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateRowLayoutCMSPageStage">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront -->
        <actionGroup ref="validateFullWidthRowAppearance" stepKey="validateRowAppearanceCMSPageStorefront">
            <argument name="pageOrStageWidthJS" value="{{PageBuilderStoreFront.pageWidthJS}}"/>
            <argument name="section" value="RowOnStorefront"/>
            <argument name="rowIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateRowBackgroundCMSPageStorefront">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="validateRowParallaxBackgroundCMSPageStorefront"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStorefront">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateRowLayoutCMSPageStorefront">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront Mobile -->
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStorefrontMobile">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundMobileImage_GIF"/>
            <argument name="index" value="2"/>
        </actionGroup>
    </test>
    <test name="BlockRenderRowFullBleedAppearanceThroughBlockContentType" extends="BlockRenderRowContainedAppearanceWithParallaxThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Row Full Bleed Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the row content type full bleed appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15090"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-row"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearance">
            <argument name="property" value="PageBuilderRowAppearance_FullBleed"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="enableParallaxBackground">
            <argument name="property" value="PageBuilderRowParallax_Disabled"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="enterParallaxBackgroundSpeed"/>
        <!-- Validate CMS Block Stage -->
        <actionGroup ref="validateFullBleedRowAppearance" stepKey="validateRowAppearanceCMSBlockStage"/>
        <actionGroup ref="validateBackgroundAttributes" stepKey="validateBackgroundCMSBlockStage">
            <argument name="section" value="RowOnStage"/>
            <argument name="index" value="1"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="validateParallaxBackgroundCMSBlockStage"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSBlockStage">
            <argument name="section" value="RowOnStage"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <!-- Validate CMS Page Stage -->
        <actionGroup ref="validateFullBleedRowAppearance" stepKey="validateRowAppearanceCMSPageStage">
            <argument name="section" value="RowOnStorefront"/>
            <argument name="rowIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateRowBackgroundCMSPageStage">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="validateRowParallaxBackgroundCMSPageStage"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStage">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateRowLayoutCMSPageStage">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront -->
        <actionGroup ref="validateFullBleedRowAppearance" stepKey="validateRowAppearanceCMSPageStorefront">
            <argument name="pageOrStageWidthJS" value="{{PageBuilderStoreFront.pageWidthJS}}"/>
            <argument name="section" value="RowOnStorefront"/>
            <argument name="rowIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateRowBackgroundCMSPageStorefront">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <comment userInput="---merging to remove step---" stepKey="validateRowParallaxBackgroundCMSPageStorefront"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStorefront">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateRowLayoutCMSPageStorefront">
            <argument name="page" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="index" value="2"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_500"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront Mobile -->
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStorefrontMobile">
            <argument name="section" value="RowOnStorefront_FullWidth_FullBleed"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundMobileImage_GIF"/>
            <argument name="index" value="2"/>
        </actionGroup>
    </test>
    <test name="BlockRenderProductsThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Products Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the products content type through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-14878"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-products"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <createData entity="_defaultCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createProduct1">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_defaultProduct" stepKey="createProduct2">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_defaultProduct" stepKey="createProduct3">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createProduct1" stepKey="deleteCreatedProduct1"/>
            <deleteData createDataKey="createProduct2" stepKey="deleteCreatedProduct2"/>
            <deleteData createDataKey="createProduct3" stepKey="deleteCreatedProduct3"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deleteCreatedCategory"/>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Products -->
        <comment userInput="Add Products" stepKey="commentAddProducts"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragProductsIntoStage">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <!-- Edit Products -->
        <comment userInput="Edit Products" stepKey="commentEditProducts"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuProducts">
            <argument name="contentType" value="PageBuilderProductsContentType"/>
        </actionGroup>
        <actionGroup ref="addCategoryConditionToProductsBlock" stepKey="addCategory">
            <argument name="page" value="ProductsContentTypeForm"/>
            <argument name="category" value="$$createPreReqCategory.id$$"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterNumberOfProductsToDisplay">
            <argument name="property" value="PageBuilderProductsCountPropertyTwo"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsProducts"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductsCountCMSBlockStage">
            <argument name="page" value="ProductsOnStage"/>
            <argument name="count" value="2"/>
        </actionGroup>
        <actionGroup ref="validateProductInProductsStage" stepKey="validateProductsCMSBlockStage">
            <argument name="page" value="ProductsOnStage"/>
        </actionGroup>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductsCountCMSPageStage">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="count" value="2"/>
        </actionGroup>
        <actionGroup ref="validateProductInProductsStorefront" stepKey="validateProductsCMSPageStage">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="isClickable" value="none"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductsCountCMSPageStorefront">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="count" value="2"/>
        </actionGroup>
        <actionGroup ref="validateProductInProductsStorefront" stepKey="validateProductsCMSPageStorefront">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="isClickable" value="auto"/>
        </actionGroup>
        <actionGroup ref="clickProductImageInProductsOnStorefront" stepKey="clickProductImageInProductsCMSPageStorefront">
            <argument name="product" value="$$createProduct3.name$$"/>
        </actionGroup>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront2">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <actionGroup ref="clickProductNameInProductsOnStorefront" stepKey="clickProductNameInProductsCMSPageStorefront">
            <argument name="product" value="$$createProduct3.name$$"/>
        </actionGroup>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront3">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <actionGroup ref="clickProductAddToCartInProductsOnStorefront" stepKey="clickProductAddToCartInProductsCMSPageStorefront">
            <argument name="product" value="$$createProduct3.name$$"/>
        </actionGroup>
        <actionGroup ref="clickProductAddToCompareInProductsOnStorefront" stepKey="clickProductAddToCompareInProductsCMSPageStorefront">
            <argument name="product" value="$$createProduct3.name$$"/>
        </actionGroup>
        <actionGroup ref="clickProductAddToWishListInProductsOnStorefront" stepKey="clickProductAddToWishListInProductsCMSPageStorefront"/>
    </test>
    <test name="BlockRenderMapThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Map Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the Map content type through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15153"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-map"/>
            <group value="pagebuilder-mapMapSettings"/>
            <group value="pagebuilder-requiresValidMapAPIKey"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <magentoCLI command="config:set cms/pagebuilder/google_maps_api_key ''" stepKey="setEmptyGoogleMapsAPIKey"/>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Map -->
        <comment userInput="Add Map" stepKey="commentAddMap"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSectionMedia">
            <argument name="contentType" value="PageBuilderMapContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragMapIntoStage">
            <argument name="contentType" value="PageBuilderMapContentType"/>
        </actionGroup>
        <!-- Edit Map -->
        <comment userInput="Edit Map" stepKey="commentEditMap"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuMap">
            <argument name="contentType" value="PageBuilderMapContentType"/>
        </actionGroup>
        <!-- Enter Height: 500 -->
        <comment userInput="Enter Height: 500" stepKey="commentEnterHeight"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterHeight">
            <argument name="property" value="PageBuilderMapHeightProperty500px"/>
        </actionGroup>
        <!-- Add 1st Location -->
        <comment userInput="Add 1st Location" stepKey="commentAddLocation1"/>
        <actionGroup ref="clickAddLocationButton" stepKey="clickAddLocationButton"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterLocationName">
            <argument name="property" value="PageBuilderMapLocationName_TestLocation"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterLatitude">
            <argument name="property" value="PageBuilderMapLatitude_0"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterLongitude">
            <argument name="property" value="PageBuilderMapLongitude_0"/>
        </actionGroup>
        <actionGroup ref="saveLocationForm" stepKey="saveLocationForm"/>
        <!-- Add 2nd Location -->
        <comment userInput="Add 2nd Location" stepKey="commentAddLocation2"/>
        <actionGroup ref="clickAddLocationButton" stepKey="clickAddLocationButton2"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterLocationName2">
            <argument name="property" value="PageBuilderMapLocationName_TestLocation"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterLatitude2">
            <argument name="property" value="PageBuilderMapLatitude_0"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterLongitude2">
            <argument name="property" value="PageBuilderMapLongitude_NegativeMax"/>
        </actionGroup>
        <actionGroup ref="saveLocationForm" stepKey="saveLocationForm2"/>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsMap"/>
        <!-- Save Block and Set Valid API Key -->
        <comment userInput="Save Block and Set Valid API Key" stepKey="commentSaveBlockAndSetKey"/>
        <magentoCLI command="config:set cms/pagebuilder/google_maps_api_key {{googleMapsAPIKey.valid}}" stepKey="setValidGoogleMapsAPIKey"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <actionGroup ref="validateMapHeight" stepKey="validateMapHeightCMSBlockStage">
            <argument name="height" value="PageBuilderMapHeightProperty500px"/>
        </actionGroup>
        <actionGroup ref="verifyNumberOfPinsOnMap" stepKey="verifyNumberOfPinsOnMapCMSBlockStage">
            <argument name="page" value="MapOnStage"/>
            <argument name="count" value="2"/>
        </actionGroup>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <actionGroup ref="validateMapHeight" stepKey="validateMapHeightCMSPageStage">
            <argument name="section" value="MapOnStorefront"/>
            <argument name="height" value="PageBuilderMapHeightProperty500px"/>
        </actionGroup>
        <actionGroup ref="verifyNumberOfPinsOnMapNoClick" stepKey="verifyNumberOfPinsOnMapCMSPageStage">
            <argument name="page" value="MapOnStorefront"/>
            <argument name="count" value="2"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <actionGroup ref="validateMapHeight" stepKey="validateMapHeightCMSPageStorefront">
            <argument name="section" value="MapOnStorefront"/>
            <argument name="height" value="PageBuilderMapHeightProperty500px"/>
        </actionGroup>
        <actionGroup ref="verifyNumberOfPinsOnMap" stepKey="verifyNumberOfPinsOnMapCMSPageStorefront">
            <argument name="page" value="MapOnStorefront"/>
            <argument name="count" value="2"/>
        </actionGroup>
    </test>
    <test name="BlockRenderTextThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Text Through Block Content Type With TinyMCE4 and Wysiwyg Enabled By Default"/>
            <description value="Verify that users are able to successfully render and use the Text content type through the Block content type with TinyMCE4 and Wysiwyg Enabled By Default."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15159"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <magentoCLI command="config:set cms/wysiwyg/enabled enabled" stepKey="configWYSIWYG"/>
            <magentoCLI command="config:set cms/wysiwyg/editor mage/adminhtml/wysiwyg/tiny_mce/tinymce4Adapter" stepKey="configTinyMCE"/>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <createData entity="_defaultCmsPage" stepKey="createPreReqCMSPage"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createPreReqCMSPage" stepKey="deleteCMSPageB"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Text -->
        <comment userInput="Add Text" stepKey="commentAddText"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragTextIntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <!-- Inline Edit: Add Text -->
        <comment userInput="Inline Edit: Add Text" stepKey="commentInlineEditAddText"/>
        <actionGroup ref="focusOnInlineTinyMCEEditor" stepKey="focusOnInlineTinyMCEEditor"/>
        <actionGroup ref="addTextToTinyMCEInline" stepKey="addTextToTinyMCEInline">
            <argument name="section" value="TextOnStage"/>
            <argument name="text" value="{{PageBuilderTextProperty.value}}"/>
        </actionGroup>
        <!-- Inline Edit: Add Variable -->
        <comment userInput="Inline Edit: Add Variable" stepKey="commentInlineEditAddVariable"/>
        <actionGroup ref="focusOnInlineTinyMCEEditor" stepKey="focusOnInlineTinyMCEEditor2"/>
        <actionGroup ref="addVariableToTinyMCEInline" stepKey="addVariableToTinyMCE">
            <argument name="variable" value="TinyMCEVariableBaseURL"/>
        </actionGroup>
        <!-- Inline Edit: Add Widget -->
        <comment userInput="Inline Edit: Add Widget" stepKey="commentInlineEditAddWidget"/>
        <actionGroup ref="focusOnInlineTinyMCEEditor" stepKey="focusOnInlineTinyMCEEditor3"/>
        <actionGroup ref="addPageLinkWidgetToTinyMCEInline" stepKey="addPageLinkWidgetToTinyMCE">
            <argument name="widget" value="TinyMCEWidgetCMSPageLink"/>
            <argument name="page" value="$$createPreReqCMSPage.identifier$$"/>
        </actionGroup>
        <!-- Inline Edit: Add Image -->
        <comment userInput="Inline Edit: Add Image" stepKey="commentInlineEditAddImage"/>
        <actionGroup ref="focusOnInlineTinyMCEEditor" stepKey="focusOnInlineTinyMCEEditor4"/>
        <actionGroup ref="clickInsertImageInTinyMCE" stepKey="clickInsertImageInTinyMCE"/>
        <actionGroup ref="clickBrowseBtnOnUploadPopup" stepKey="clickBrowserBtn"/>
        <actionGroup ref="VerifyMediaGalleryStorageActions" stepKey="VerifyMediaGalleryStorageBtn"/>
        <actionGroup ref="clickMediaGalleryStorageRootArrow" stepKey="clickMediaGalleryStorageRootArrow"/>
        <actionGroup ref="CreateImageFolder" stepKey="CreateImageFolder">
            <argument name="ImageFolder" value="ImageFolder"/>
        </actionGroup>
        <actionGroup ref="attachImage" stepKey="attachImage">
            <argument name="Image" value="ImageUpload3"/>
        </actionGroup>
        <actionGroup ref="saveImage" stepKey="insertImage"/>
        <actionGroup ref="fillOutUploadImagePopup" stepKey="fillOutUploadImagePopup"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeElement selector="{{TextOnStage.text('1', PageBuilderTextProperty.value)}}" stepKey="seeTextCMSBlockStage"/>
        <seeElement selector="{{TextOnStage.text('1', TinyMCEVariableBaseURL.editPanelValue)}}" stepKey="seeVariableCMSBlockStage"/>
        <seeElement selector="{{TextOnStage.text('1', TinyMCEWidgetCMSPageLink.editPanelValue)}}" stepKey="seeWidgetCMSBlockStage"/>
        <seeElement selector="{{TextOnStage.base('1')}}{{CmsWYSIWYGSection.imageSource(ImageUpload3.fileName)}}" stepKey="seeImageFileNameCMSBlockStage"/>
        <seeElement selector="{{TextOnStage.base('1')}}{{CmsWYSIWYGSection.imageSource(ImageUpload3.extension)}}" stepKey="seeImageExtensionCMSBlockStage"/>
        <seeElement selector="{{TextOnStage.base('1')}}{{CmsWYSIWYGSection.ImageAlt(ImageUpload3.content)}}" stepKey="seeImageAltCMSBlockStage"/>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{TextOnStorefront.text('1', PageBuilderTextProperty.value)}}" stepKey="seeTextCMSPageStage"/>
        <seeElement selector="{{TextOnStorefront.text('1', _ENV.MAGENTO_BASE_URL)}}" stepKey="seeVariableCMSPageStage"/>
        <seeElement selector="{{TextOnStorefront.textWidget('1', _ENV.MAGENTO_BASE_URL, $$createPreReqCMSPage.identifier$$)}}" stepKey="seeWidgetCMSPageStage"/>
        <seeElement selector="{{TextOnStorefront.base('1')}}{{CmsWYSIWYGSection.imageSource(ImageUpload3.fileName)}}" stepKey="seeImageFileNameCMSPageStage"/>
        <seeElement selector="{{TextOnStorefront.base('1')}}{{CmsWYSIWYGSection.imageSource(ImageUpload3.extension)}}" stepKey="seeImageExtensionCMSPageStage"/>
        <seeElement selector="{{TextOnStorefront.base('1')}}{{CmsWYSIWYGSection.ImageAlt(ImageUpload3.content)}}" stepKey="seeImageAltCMSPageStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{TextOnStorefront.text('1', PageBuilderTextProperty.value)}}" stepKey="seeTextCMSPageStorefront"/>
        <seeElement selector="{{TextOnStorefront.text('1', _ENV.MAGENTO_BASE_URL)}}" stepKey="seeVariableCMSPageStorefront"/>
        <seeElement selector="{{TextOnStorefront.textWidget('1', _ENV.MAGENTO_BASE_URL, $$createPreReqCMSPage.identifier$$)}}" stepKey="seeWidgetCMSPageStorefront"/>
        <seeElement selector="{{TextOnStorefront.base('1')}}{{CmsWYSIWYGSection.imageSource(ImageUpload3.fileName)}}" stepKey="seeImageFileNameCMSPageStorefront"/>
        <seeElement selector="{{TextOnStorefront.base('1')}}{{CmsWYSIWYGSection.imageSource(ImageUpload3.extension)}}" stepKey="seeImageExtensionCMSPageStorefront"/>
        <seeElement selector="{{TextOnStorefront.base('1')}}{{CmsWYSIWYGSection.ImageAlt(ImageUpload3.content)}}" stepKey="seeImageAltCMSPageStorefront"/>
        <!-- Click Page Link Widget -->
        <comment userInput="Click Page Link Widget" stepKey="clickClickPageLinkWidget"/>
        <click selector="{{TextOnStorefront.textWidget('1', _ENV.MAGENTO_BASE_URL, $$createPreReqCMSPage.identifier$$)}}" stepKey="clickWidgetCMSPageStorefront"/>
        <wait time="3" stepKey="waitArbitraryTimeForPotentialNavigationToOccurStorefront"/>
        <seeCurrentUrlEquals url="{{_ENV.MAGENTO_BASE_URL}}$$createPreReqCMSPage.identifier$$" stepKey="seeThatUrlIsChangedToPageLinkWidgetUrlStorefront"/>
    </test>
    <test name="BlockRenderTextThroughBlockContentTypeTinyMCE4WysiwygDisabledByDefault" extends="BlockRenderTextThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Text Through Block Content Type With TinyMCE4 and Wysiwyg Disabled By Default"/>
            <description value="Verify that users are able to successfully render and use the Text content type through the Block content type with TinyMCE4 and Wysiwyg Disabled By Default."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15175"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <magentoCLI command="config:set cms/wysiwyg/enabled hidden" stepKey="configWYSIWYG"/>
        </before>
        <after>
            <magentoCLI command="config:set cms/wysiwyg/enabled enabled" stepKey="enableWYSIWYG" before="deleteCMSBlock"/>
        </after>
    </test>
    <test name="BlockRenderTextThroughBlockContentTypeTinyMCE4WysiwygDisabledCompletely">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Text Through Block Content Type With TinyMCE4 and Wysiwyg Disabled Completely"/>
            <description value="Verify that users are able to successfully render and use the Text content type through the Block content type with TinyMCE4 and Disabled Completely."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15176"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-text"/>
        </annotations>
        <before>
            <magentoCLI command="config:set cms/wysiwyg/enabled disabled" stepKey="configWYSIWYG"/>
            <magentoCLI command="config:set cms/wysiwyg/editor mage/adminhtml/wysiwyg/tiny_mce/tinymce4Adapter" stepKey="configTinyMCE"/>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <createData entity="_defaultCmsPage" stepKey="createPreReqCMSPage"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <magentoCLI command="config:set cms/wysiwyg/enabled enabled" stepKey="enableWYSIWYG"/>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createPreReqCMSPage" stepKey="deleteCMSPageB"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Text -->
        <comment userInput="Add Text" stepKey="commentAddText"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragTextIntoStage">
            <argument name="contentType" value="PageBuilderTextContentType"/>
        </actionGroup>
        <!-- Inline Edit: Add Text -->
        <comment userInput="Inline Edit: Add Text" stepKey="commentInlineEditAddText"/>
        <actionGroup ref="focusOnInlineTextAreaEditor" stepKey="focusOnInlineTextAreaEditor"/>
        <actionGroup ref="addTextToTinyMCEInlineWYSIWYGDisabled" stepKey="addTextToTinyMCEInline">
            <argument name="section" value="TextOnStage"/>
            <argument name="text" value="{{PageBuilderTextProperty.value}}"/>
        </actionGroup>
        <!-- Inline Edit: Add Variable -->
        <actionGroup ref="focusOnInlineTextAreaEditor" stepKey="focusOnInlineTextAreaEditor2"/>
        <actionGroup ref="addTextToTinyMCEInlineWYSIWYGDisabled" stepKey="addVariableToTinyMCE">
            <argument name="section" value="TextOnStage"/>
            <argument name="text" value="{{PageBuilderTextArea_VariableBaseURL.editPanelValue}}"/>
        </actionGroup>
        <!-- Inline Edit: Add Widget -->
        <comment userInput="Inline Edit: Add Widget" stepKey="commentInlineEditAddWidget"/>
        <actionGroup ref="focusOnInlineTextAreaEditor" stepKey="focusOnInlineTextAreaEditor3"/>
        <actionGroup ref="addTextToTinyMCEInlineWYSIWYGDisabled" stepKey="addPageLinkWidgetToTinyMCE">
            <argument name="section" value="TextOnStage"/>
            <argument name="text" value="{{PageBuilderTextArea_WidgetCMSHomepageLink.editPanelValue}}"/>
        </actionGroup>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <actionGroup ref="assertTextareaContainsValue" stepKey="assertTextareaContainsValueCMSBlockStage">
            <argument name="selector" value="{{TextOnStage.textArea('1')}}"/>
            <argument name="value" value="{{PageBuilderTextProperty.value}}{{PageBuilderTextArea_VariableBaseURL.editPanelValue}}{{PageBuilderTextArea_WidgetCMSHomepageLink.editPanelValue}}"/>
        </actionGroup>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{TextOnStorefront.textAreaText('1', PageBuilderTextProperty.value)}}" stepKey="seeTextCMSPageStage"/>
        <seeElement selector="{{TextOnStorefront.textAreaText('1', _ENV.MAGENTO_BASE_URL)}}" stepKey="seeVariableCMSPageStage"/>
        <seeElement selector="{{TextOnStorefront.textWidget('1', _ENV.MAGENTO_BASE_URL, PageBuilderTextArea_WidgetCMSHomepageLink.identifier)}}" stepKey="seeWidgetCMSPageStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{TextOnStorefront.textAreaText('1', PageBuilderTextProperty.value)}}" stepKey="seeTextCMSPageStorefront"/>
        <seeElement selector="{{TextOnStorefront.textAreaText('1', _ENV.MAGENTO_BASE_URL)}}" stepKey="seeVariableCMSPageStorefront"/>
        <seeElement selector="{{TextOnStorefront.textWidget('1', _ENV.MAGENTO_BASE_URL, PageBuilderTextArea_WidgetCMSHomepageLink.identifier)}}" stepKey="seeWidgetCMSPageStorefront"/>
        <!-- Click Page Link Widget -->
        <comment userInput="Click Page Link Widget" stepKey="clickClickPageLinkWidget"/>
        <click selector="{{TextOnStorefront.textWidget('1', _ENV.MAGENTO_BASE_URL, PageBuilderTextArea_WidgetCMSHomepageLink.identifier)}}" stepKey="clickWidgetCMSPageStorefront"/>
        <wait time="3" stepKey="waitArbitraryTimeForPotentialNavigationToOccurStorefront"/>
        <seeCurrentUrlEquals url="{{_ENV.MAGENTO_BASE_URL}}{{PageBuilderTextArea_WidgetCMSHomepageLink.identifier}}" stepKey="seeThatUrlIsChangedToPageLinkWidgetUrlStorefront"/>
    </test>
    <test name="BlockRenderBannerPosterAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Banner Poster Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the banner content type poster appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15188"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <resizeWindow width="1280" height="1024" stepKey="resizeWindowToDesktop"/>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="navigateToMediaGallery" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="navigateToDesktopImageFolder">
                <argument name="FolderName" value="{{PageBuilderBackgroundImage_JPG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="deleteBackgroundImage">
                <argument name="Image" value="PageBuilderBackgroundImage_JPG"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="deleteMobileBackgroundImage">
                <argument name="Image" value="PageBuilderBackgroundMobileImage_GIF"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Banner -->
        <comment userInput="Add Banner" stepKey="commentAddBanner"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Edit Banner -->
        <comment userInput="Edit Banner" stepKey="commentEditBanner"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setAppearance">
            <argument name="property" value="PageBuilderAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setMinHeight">
            <argument name="property" value="PageBuilderBannerMinimumHeightProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Plaintext_Green"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachBackgroundImage">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachBackgroundMobileImage">
            <argument name="property" value="PageBuilderBackgroundMobileImage_GIF"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="setBackgroundPosition">
            <argument name="property" value="PageBuilderBackgroundPosition_Center"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setBackgroundSize">
            <argument name="property" value="PageBuilderBackgroundSize_Auto"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="setBackgroundAttachment">
            <argument name="property" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setBackgroundRepeat">
            <argument name="property" value="PageBuilderBackgroundRepeat_Enabled"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCE" stepKey="addTextToTinyMCE">
            <argument name="property" value="PageBuilderBannerMessageProperty"/>
            <argument name="section" value="BannerOnConfigurationPanel"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelLinkUrlField" stepKey="setLink">
            <argument name="property" value="PageBuilderBannerLinkUrlPropertyValidate"/>
            <argument name="selection" value="{{ExternalLink.url}}"/>
            <argument name="newTab" value="PageBuilderBannerNewTabDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="setShowButton">
            <argument name="property" value="PageBuilderBannerShowButtonOnHoverProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="setButtonText">
            <argument name="property" value="PageBuilderBannerButtonTextProperty"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="setButtonType">
            <argument name="property" value="PageBuilderBannerButtonTypeSecondaryProperty"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="setShowOverlay">
            <argument name="property" value="PageBuilderBannerShowContentOverlayOnHoverProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setOverlayColor">
            <argument name="property" value="PageBuilderBannerOverlayColor_Blue_Opaque"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeElement selector="{{BannerOnBackend.appearance('1', PageBuilderAppearance_Poster.value)}}" stepKey="seeAppearanceCMSBlockStage"/>
        <actionGroup ref="validateOverlayPositionPoster" stepKey="validateOverlayPositionCMSBlockStage">
            <argument name="page" value="BannerOnBackend"/>
        </actionGroup>
        <seeElement selector="{{BannerOnBackend.posterMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightCMSBlockStage"/>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateHeightCMSBlockStage">
            <argument name="content" value="{{BannerOnBackend.wrapperCSS}}"/>
            <argument name="height" value="PageBuilderBannerMinimumHeightProperty"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateBackgroundAttributesCMSBlockStage">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImage" stepKey="validateBackgroundImageCMSBlockStage">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <seeElement selector="{{BannerOnBackend.messageContent('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeMessageContentCMSBlockStage"/>
        <seeElementInDOM selector="{{BannerOnBackend.button('1')}}" stepKey="seeButtonInDOMCMSBlockStage"/>
        <dontSeeElement selector="{{BannerOnBackend.button('1')}}" stepKey="dontSeeButtonCMSBlockStage"/>
        <seeElement selector="{{BannerOnBackend.transparentOverlay('1')}}" stepKey="seeTransparentOverlayCMSBlockStage"/>
        <moveMouseOver selector="{{BannerOnBackend.appearance('1', PageBuilderAppearance_Poster.value)}}" stepKey="moveMouseOverBannerCMSBlockStage"/>
        <seeElement selector="{{BannerOnBackend.button('1')}}" stepKey="seeButtonOnHoverCMSBlockStage"/>
        <seeElement selector="{{BannerOnBackend.buttonText('1', PageBuilderBannerButtonTextProperty.value)}}" stepKey="seeButtonTextOnHoverCMSBlockStage"/>
        <seeElement selector="{{BannerOnBackend.buttonType('1', PageBuilderBannerButtonTypeSecondaryProperty.value)}}" stepKey="seeButtonTypeOnHoverCMSBlockStage"/>
        <seeElement selector="{{BannerOnBackend.overlayBackgroundColor('1', PageBuilderBannerOverlayColor_Blue_Opaque.value)}}" stepKey="seeOverlayOnHoverCMSBlockStage"/>
        <executeJS function="return {{BannerOnBackend.overlayJS('1')}}.getBoundingClientRect().left" stepKey="overlayLeftPositionCMSBlockStage"/>
        <executeJS function="return document.evaluate(&quot;{{BannerOnBackend.button('1')}}&quot;, document.body).iterateNext().getBoundingClientRect().left" stepKey="buttonLeftPositionCMSBlockStage"/>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSBlockStage}-{$overlayLeftPositionCMSBlockStage}-{{PageBuilderPaddingProperty40.paddingLeft}}))" stepKey="buttonMinusOverlayMinusPaddingCMSBlockStage"/>
        <assertLessThanOrEqual stepKey="assertButtonLeftAlignedCMSBlockStage">
            <expectedResult type="int">5</expectedResult>
            <actualResult type="variable">buttonMinusOverlayMinusPaddingCMSBlockStage</actualResult>
        </assertLessThanOrEqual>
        <executeJS function="return window.getComputedStyle({{BannerOnBackend.wrapperJS('1')}}).textAlign" stepKey="grabDefaultComputedTextAlignCMSBlockStage"/>
        <assertEquals stepKey="assertDefaultComputedTextAlignCMSBlockStage">
            <expectedResult type="string">{{PageBuilderAdvancedAlignmentPropertyStart.value}}</expectedResult>
            <actualResult type="variable">grabDefaultComputedTextAlignCMSBlockStage</actualResult>
        </assertEquals>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderAppearance_Poster.value)}}" stepKey="seeAppearanceCMSPageStage"/>
        <actionGroup ref="validateOverlayPositionPoster" stepKey="validateOverlayPositionCMSPageStage">
            <argument name="page" value="BannerOnFrontend"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.posterMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightCMSPageStage"/>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateHeightCMSPageStage">
            <argument name="content" value="{{BannerOnFrontend.wrapperCSS}}"/>
            <argument name="height" value="PageBuilderBannerMinimumHeightProperty"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateBackgroundAttributesCMSPageStage">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStage">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.messageContent('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeMessageContentCMSPageStage"/>
        <seeElementInDOM selector="{{BannerOnFrontend.button('1')}}" stepKey="seeButtonInDOMCMSPageStage"/>
        <dontSeeElement selector="{{BannerOnFrontend.button('1')}}" stepKey="dontSeeButtonCMSPageStage"/>
        <seeElement selector="{{BannerOnFrontend.transparentOverlay('1')}}" stepKey="seeTransparentOverlayCMSPageStage"/>
        <executeJS function="return {{BannerOnFrontend.overlayJS('1')}}.getBoundingClientRect().left" stepKey="overlayLeftPositionCMSPageStage"/>
        <executeJS function="return document.evaluate(&quot;{{BannerOnFrontend.button('1')}}&quot;, document.body).iterateNext().getBoundingClientRect().left" stepKey="buttonLeftPositionCMSPageStage"/>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSPageStage}-{$overlayLeftPositionCMSPageStage}-{{PageBuilderPaddingProperty40.paddingLeft}}))" stepKey="buttonMinusOverlayMinusPaddingCMSPageStage"/>
        <assertLessThanOrEqual stepKey="assertButtonLeftAlignedCMSPageStage">
            <expectedResult type="int">5</expectedResult>
            <actualResult type="variable">buttonMinusOverlayMinusPaddingCMSPageStage</actualResult>
        </assertLessThanOrEqual>
        <executeJS function="return window.getComputedStyle({{BannerOnFrontend.wrapperJS('1')}}).textAlign" stepKey="grabDefaultComputedTextAlignCMSPageStage"/>
        <assertEquals stepKey="assertDefaultComputedTextAlignCMSPageStage">
            <expectedResult type="string">{{PageBuilderAdvancedAlignmentPropertyStart.value}}</expectedResult>
            <actualResult type="variable">grabDefaultComputedTextAlignCMSPageStage</actualResult>
        </assertEquals>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStoreFront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderAppearance_Poster.value)}}" stepKey="seeAppearanceCMSPageStorefront"/>
        <actionGroup ref="validateOverlayPositionPoster" stepKey="validateOverlayPositionCMSPageStorefront">
            <argument name="page" value="BannerOnFrontend"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.posterMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightCMSPageStorefront"/>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateHeightCMSPageStorefront">
            <argument name="content" value="{{BannerOnFrontend.wrapperCSS}}"/>
            <argument name="height" value="PageBuilderBannerMinimumHeightProperty"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateBackgroundAttributesCMSPageStorefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStorefront">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.messageContent('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeMessageContentCMSPageStorefront"/>
        <seeElementInDOM selector="{{BannerOnFrontend.button('1')}}" stepKey="seeButtonInDOMCMSPageStorefront"/>
        <dontSeeElement selector="{{BannerOnFrontend.button('1')}}" stepKey="dontSeeButtonCMSPageStorefront"/>
        <seeElement selector="{{BannerOnFrontend.transparentOverlay('1')}}" stepKey="seeTransparentOverlayCMSPageStorefront"/>
        <moveMouseOver selector="{{BannerOnFrontend.appearance('1', PageBuilderAppearance_Poster.value)}}" stepKey="moveMouseOverBannerCMSPageStorefront"/>
        <seeElement selector="{{BannerOnFrontend.button('1')}}" stepKey="seeButtonOnHoverCMSPageStorefront"/>
        <seeElement selector="{{BannerOnFrontend.buttonText('1', PageBuilderBannerButtonTextProperty.value)}}" stepKey="seeButtonTextOnHoverCMSPageStorefront"/>
        <seeElement selector="{{BannerOnFrontend.buttonType('1', PageBuilderBannerButtonTypeSecondaryProperty.value)}}" stepKey="seeButtonTypeOnHoverCMSPageStorefront"/>
        <seeElement selector="{{BannerOnFrontend.overlayBackgroundColor('1', PageBuilderBannerOverlayColor_Blue_Opaque.value)}}" stepKey="seeOverlayOnHoverCMSPageStorefront"/>
        <executeJS function="return {{BannerOnFrontend.overlayJS('1')}}.getBoundingClientRect().left" stepKey="overlayLeftPositionCMSPageStorefront"/>
        <executeJS function="return document.evaluate(&quot;{{BannerOnFrontend.button('1')}}&quot;, document.body).iterateNext().getBoundingClientRect().left" stepKey="buttonLeftPositionCMSPageStorefront"/>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSPageStorefront}-{$overlayLeftPositionCMSPageStorefront}-{{PageBuilderPaddingProperty40.paddingLeft}}))" stepKey="buttonMinusOverlayMinusPaddingCMSPageStorefront"/>
        <assertLessThanOrEqual stepKey="assertButtonLeftAlignedCMSPageStorefront">
            <expectedResult type="int">5</expectedResult>
            <actualResult type="variable">buttonMinusOverlayMinusPaddingCMSPageStorefront</actualResult>
        </assertLessThanOrEqual>
        <executeJS function="return window.getComputedStyle({{BannerOnFrontend.wrapperJS('1')}}).textAlign" stepKey="grabDefaultComputedTextAlignCMSPageStorefront"/>
        <assertEquals stepKey="assertDefaultComputedTextAlignCMSPageStorefront">
            <expectedResult type="string">{{PageBuilderAdvancedAlignmentPropertyStart.value}}</expectedResult>
            <actualResult type="variable">grabDefaultComputedTextAlignCMSPageStorefront</actualResult>
        </assertEquals>
        <!-- Validate Banner Link -->
        <comment userInput="Validate Banner Link" stepKey="commentValidateBannerLinkCMSPageStorefront"/>
        <click selector="{{BannerOnFrontend.linkUrl('1', PageBuilderBannerLinkUrlPropertyValidate.value)}}" stepKey="clickLinkUrlCMSPageStorefront"/>
        <wait time="3" stepKey="waitArbitraryTimeForPotentialNavigationToOccurCMSPageStorefront"/>
        <seeCurrentUrlEquals url="{{PageBuilderBannerLinkUrlPropertyValidate.value}}" stepKey="seeThatUrlIsChangedToButtonUrlCMSPageStorefront"/>
        <!-- Validate CMS Page Storefront Mobile -->
        <comment userInput="Validate CMS Page Storefront Mobile" stepKey="commentValidateCMSPageStorefrontMobile"/>
        <resizeWindow width="767" height="1000" stepKey="resizeWindowToMobile"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStoreFrontMobile">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <actionGroup ref="validateOverlayPositionPoster" stepKey="validateOverlayPositionCMSPageStorefrontMobile">
            <argument name="page" value="BannerOnFrontend"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateHeightCMSPageStorefrontMobile">
            <argument name="content" value="{{BannerOnFrontend.wrapperCSS}}"/>
            <argument name="height" value="PageBuilderBannerMinimumHeightProperty"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStorefrontMobile">
            <argument name="section" value="BannerOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundMobileImage_GIF"/>
        </actionGroup>
        <seeElementInDOM selector="{{BannerOnFrontend.button('1')}}" stepKey="seeButtonInDOMCMSPageStorefrontMobile"/>
        <dontSeeElement selector="{{BannerOnFrontend.button('1')}}" stepKey="dontSeeButtonCMSPageStorefrontMobile"/>
        <seeElement selector="{{BannerOnFrontend.transparentOverlay('1')}}" stepKey="seeTransparentOverlayCMSPageStorefrontMobile"/>
        <moveMouseOver selector="{{BannerOnFrontend.base('1')}}" stepKey="moveMouseOverBannerCMSPageStorefrontMobile"/>
        <seeElement selector="{{BannerOnFrontend.button('1')}}" stepKey="seeButtonOnHoverCMSPageStorefrontMobile"/>
        <seeElement selector="{{BannerOnFrontend.overlayBackgroundColor('1', PageBuilderBannerOverlayColor_Blue_Opaque.value)}}" stepKey="seeOverlayOnHoverCMSPageStorefrontMobile"/>
        <!-- Validate Banner Link Mobile -->
        <comment userInput="Validate Banner Link" stepKey="commentValidateBannerLinkCMSPageStorefrontMobile"/>
        <click selector="{{BannerOnFrontend.linkUrl('1', PageBuilderBannerLinkUrlPropertyValidate.value)}}" stepKey="clickLinkUrlCMSPageStorefrontMobile"/>
        <wait time="3" stepKey="waitArbitraryTimeForPotentialNavigationToOccurCMSPageStorefrontMobile"/>
        <seeCurrentUrlEquals url="{{PageBuilderBannerLinkUrlPropertyValidate.value}}" stepKey="seeThatUrlIsChangedToButtonUrlCMSPageStorefrontMobile"/>
    </test>
    <test name="BlockRenderBannerCollageLeftAppearanceThroughBlockContentType" extends="BlockRenderBannerPosterAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Banner Collage Left Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the banner content type collage left appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15190"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerCollageLeft"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setAppearance">
            <argument name="property" value="PageBuilderAppearance_CollageLeft"/>
        </actionGroup>
        <seeElement selector="{{BannerOnBackend.appearance('1', PageBuilderAppearance_CollageLeft.value)}}" stepKey="seeAppearanceCMSBlockStage"/>
        <actionGroup ref="validateOverlayPositionCollageLeft" stepKey="validateOverlayPositionCMSBlockStage">
            <argument name="page" value="BannerOnBackend"/>
        </actionGroup>
        <seeElement selector="{{BannerOnBackend.collageMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightCMSBlockStage"/>
        <moveMouseOver selector="{{BannerOnBackend.appearance('1', PageBuilderAppearance_CollageLeft.value)}}" stepKey="moveMouseOverBannerCMSBlockStage"/>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSBlockStage}-{$overlayLeftPositionCMSBlockStage}-30))" stepKey="buttonMinusOverlayMinusPaddingCMSBlockStage"/>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderAppearance_CollageLeft.value)}}" stepKey="seeAppearanceCMSPageStage"/>
        <actionGroup ref="validateOverlayPositionCollageLeft" stepKey="validateOverlayPositionCMSPageStage">
            <argument name="page" value="BannerOnFrontend"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.collageMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightCMSPageStage"/>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSPageStage}-{$overlayLeftPositionCMSPageStage}-30))" stepKey="buttonMinusOverlayMinusPaddingCMSPageStage"/>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderAppearance_CollageLeft.value)}}" stepKey="seeAppearanceCMSPageStorefront"/>
        <actionGroup ref="validateOverlayPositionCollageLeft" stepKey="validateOverlayPositionCMSPageStorefront">
            <argument name="page" value="BannerOnFrontend"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.collageMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightCMSPageStorefront"/>
        <moveMouseOver selector="{{BannerOnFrontend.appearance('1', PageBuilderAppearance_CollageLeft.value)}}" stepKey="moveMouseOverBannerCMSPageStorefront"/>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSPageStorefront}-{$overlayLeftPositionCMSPageStorefront}-30))" stepKey="buttonMinusOverlayMinusPaddingCMSPageStorefront"/>
        <executeJS function="return Math.abs({{BannerOnFrontend.wrapperJS('1')}}.getBoundingClientRect().width - {{PageBuilderPaddingProperty40.paddingLeft}} - {{PageBuilderPaddingProperty40.paddingRight}})" stepKey="widthOfWrapperMinusPaddingCMSPageStorefrontMobile" before="validateOverlayPositionCMSPageStorefrontMobile"/>
        <actionGroup ref="validateOverlayPositionCollageLeft" stepKey="validateOverlayPositionCMSPageStorefrontMobile">
            <argument name="page" value="BannerOnFrontend"/>
            <argument name="expectedOverlayWidth" value="{$widthOfWrapperMinusPaddingCMSPageStorefrontMobile}"/>
        </actionGroup>
    </test>
    <test name="BlockRenderBannerCollageCenteredAppearanceThroughBlockContentType" extends="BlockRenderBannerPosterAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Banner Collage Centered Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the banner content type collage centered appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15189"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerCollageCentered"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setAppearance">
            <argument name="property" value="PageBuilderBannerCollageCenteredProperty"/>
        </actionGroup>
        <seeElement selector="{{BannerOnBackend.appearance('1', PageBuilderBannerCollageCenteredProperty.value)}}" stepKey="seeAppearanceCMSBlockStage"/>
        <actionGroup ref="validateOverlayPositionCollageCenter" stepKey="validateOverlayPositionCMSBlockStage">
            <argument name="page" value="BannerOnBackend"/>
        </actionGroup>
        <seeElement selector="{{BannerOnBackend.collageMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightCMSBlockStage"/>
        <moveMouseOver selector="{{BannerOnBackend.appearance('1', PageBuilderBannerCollageCenteredProperty.value)}}" stepKey="moveMouseOverBannerCMSBlockStage"/>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSBlockStage}-{$overlayLeftPositionCMSBlockStage}-30))" stepKey="buttonMinusOverlayMinusPaddingCMSBlockStage"/>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerCollageCenteredProperty.value)}}" stepKey="seeAppearanceCMSPageStage"/>
        <actionGroup ref="validateOverlayPositionCollageCenter" stepKey="validateOverlayPositionCMSPageStage">
            <argument name="page" value="BannerOnFrontend"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.collageMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightCMSPageStage"/>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSPageStage}-{$overlayLeftPositionCMSPageStage}-30))" stepKey="buttonMinusOverlayMinusPaddingCMSPageStage"/>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerCollageCenteredProperty.value)}}" stepKey="seeAppearanceCMSPageStorefront"/>
        <actionGroup ref="validateOverlayPositionCollageCenter" stepKey="validateOverlayPositionCMSPageStorefront">
            <argument name="page" value="BannerOnFrontend"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.collageMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightCMSPageStorefront"/>
        <moveMouseOver selector="{{BannerOnFrontend.appearance('1', PageBuilderBannerCollageCenteredProperty.value)}}" stepKey="moveMouseOverBannerCMSPageStorefront"/>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSPageStorefront}-{$overlayLeftPositionCMSPageStorefront}-30))" stepKey="buttonMinusOverlayMinusPaddingCMSPageStorefront"/>
        <executeJS function="return Math.abs({{BannerOnFrontend.wrapperJS('1')}}.getBoundingClientRect().width - {{PageBuilderPaddingProperty40.paddingLeft}} - {{PageBuilderPaddingProperty40.paddingRight}})" stepKey="widthOfWrapperMinusPaddingCMSPageStorefrontMobile" before="validateOverlayPositionCMSPageStorefrontMobile"/>
        <actionGroup ref="validateOverlayPositionCollageCenter" stepKey="validateOverlayPositionCMSPageStorefrontMobile">
            <argument name="page" value="BannerOnFrontend"/>
            <argument name="expectedOverlayWidth" value="{$widthOfWrapperMinusPaddingCMSPageStorefrontMobile}"/>
        </actionGroup>
    </test>
    <test name="BlockRenderBannerCollageRightAppearanceThroughBlockContentType" extends="BlockRenderBannerPosterAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Banner Collage Right Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the banner content type collage right appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15191"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerCollageRight"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setAppearance">
            <argument name="property" value="PageBuilderAppearance_CollageRight"/>
        </actionGroup>
        <seeElement selector="{{BannerOnBackend.appearance('1', PageBuilderAppearance_CollageRight.value)}}" stepKey="seeAppearanceCMSBlockStage"/>
        <actionGroup ref="validateOverlayPositionCollageRight" stepKey="validateOverlayPositionCMSBlockStage">
            <argument name="page" value="BannerOnBackend"/>
        </actionGroup>
        <seeElement selector="{{BannerOnBackend.collageMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightCMSBlockStage"/>
        <moveMouseOver selector="{{BannerOnBackend.appearance('1', PageBuilderAppearance_CollageRight.value)}}" stepKey="moveMouseOverBannerCMSBlockStage"/>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSBlockStage}-{$overlayLeftPositionCMSBlockStage}-30))" stepKey="buttonMinusOverlayMinusPaddingCMSBlockStage"/>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderAppearance_CollageRight.value)}}" stepKey="seeAppearanceCMSPageStage"/>
        <actionGroup ref="validateOverlayPositionCollageRight" stepKey="validateOverlayPositionCMSPageStage">
            <argument name="page" value="BannerOnFrontend"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.collageMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightCMSPageStage"/>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSPageStage}-{$overlayLeftPositionCMSPageStage}-30))" stepKey="buttonMinusOverlayMinusPaddingCMSPageStage"/>
        <seeElement selector="{{BannerOnFrontend.appearance('1', PageBuilderAppearance_CollageRight.value)}}" stepKey="seeAppearanceCMSPageStorefront"/>
        <actionGroup ref="validateOverlayPositionCollageRight" stepKey="validateOverlayPositionCMSPageStorefront">
            <argument name="page" value="BannerOnFrontend"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.collageMinimumHeight('1', PageBuilderBannerMinimumHeightProperty.value)}}" stepKey="seeMinimumHeightCMSPageStorefront"/>
        <moveMouseOver selector="{{BannerOnFrontend.appearance('1', PageBuilderAppearance_CollageRight.value)}}" stepKey="moveMouseOverBannerCMSPageStorefront"/>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSPageStorefront}-{$overlayLeftPositionCMSPageStorefront}-30))" stepKey="buttonMinusOverlayMinusPaddingCMSPageStorefront"/>
        <executeJS function="return Math.abs({{BannerOnFrontend.wrapperJS('1')}}.getBoundingClientRect().width - {{PageBuilderPaddingProperty40.paddingLeft}} - {{PageBuilderPaddingProperty40.paddingRight}})" stepKey="widthOfWrapperMinusPaddingCMSPageStorefrontMobile" before="validateOverlayPositionCMSPageStorefrontMobile"/>
        <actionGroup ref="validateOverlayPositionCollageRight" stepKey="validateOverlayPositionCMSPageStorefrontMobile">
            <argument name="page" value="BannerOnFrontend"/>
            <argument name="expectedOverlayWidth" value="{$widthOfWrapperMinusPaddingCMSPageStorefrontMobile}"/>
        </actionGroup>
    </test>
    <test name="BlockRenderBannerThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Banner Through Block Content Type With TinyMCE4 and Wysiwyg Enabled By Default"/>
            <description value="Verify that users are able to successfully render and use the Banner content type through the Block content type with TinyMCE4 and Wysiwyg Enabled By default."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15192"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <magentoCLI command="config:set cms/wysiwyg/enabled enabled" stepKey="configWYSIWYG"/>
            <magentoCLI command="config:set cms/wysiwyg/editor mage/adminhtml/wysiwyg/tiny_mce/tinymce4Adapter" stepKey="configTinyMCE"/>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <createData entity="_defaultCmsPage" stepKey="createPreReqCMSPage"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createPreReqCMSPage" stepKey="deletePreReqCMSPage"/>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Banner -->
        <comment userInput="Add Banner" stepKey="commentAddBanner"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Inline Edit: Add Text -->
        <comment userInput="Inline Edit: Add Text" stepKey="commentInlineEditAddText"/>
        <actionGroup ref="focusOnInlineTinyMCEEditor" stepKey="focusOnInlineTinyMCEEditor">
            <argument name="section" value="BannerOnBackend"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCEInline" stepKey="addTextToTinyMCEInline">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="text" value="{{PageBuilderBannerMessageProperty.value}}"/>
        </actionGroup>
        <!-- Inline Edit: Add Variable -->
        <comment userInput="Inline Edit: Add Variable" stepKey="commentInlineEditAddVariable"/>
        <actionGroup ref="focusOnInlineTinyMCEEditor" stepKey="focusOnInlineTinyMCEEditor2">
            <argument name="section" value="BannerOnBackend"/>
        </actionGroup>
        <actionGroup ref="addVariableToTinyMCEInline" stepKey="addVariableToTinyMCE">
            <argument name="variable" value="TinyMCEVariableBaseURL"/>
        </actionGroup>
        <!-- Inline Edit: Add Widget -->
        <comment userInput="Inline Edit: Add Widget" stepKey="commentInlineEditAddWidget"/>
        <actionGroup ref="focusOnInlineTinyMCEEditor" stepKey="focusOnInlineTinyMCEEditor3">
            <argument name="section" value="BannerOnBackend"/>
        </actionGroup>
        <actionGroup ref="addPageLinkWidgetToTinyMCEInline" stepKey="addPageLinkWidgetToTinyMCE">
            <argument name="widget" value="TinyMCEWidgetCMSPageLink"/>
            <argument name="page" value="$$createPreReqCMSPage.identifier$$"/>
        </actionGroup>
        <!-- Inline Edit: Add Image -->
        <comment userInput="Inline Edit: Add Image" stepKey="commentInlineEditAddImage"/>
        <actionGroup ref="focusOnInlineTinyMCEEditor" stepKey="focusOnInlineTinyMCEEditor4">
            <argument name="section" value="BannerOnBackend"/>
        </actionGroup>
        <actionGroup ref="clickInsertImageInTinyMCE" stepKey="clickInsertImageInTinyMCE"/>
        <actionGroup ref="clickBrowseBtnOnUploadPopup" stepKey="clickBrowserBtn"/>
        <actionGroup ref="VerifyMediaGalleryStorageActions" stepKey="VerifyMediaGalleryStorageBtn"/>
        <actionGroup ref="clickMediaGalleryStorageRootArrow" stepKey="clickMediaGalleryStorageRootArrow"/>
        <actionGroup ref="CreateImageFolder" stepKey="CreateImageFolder">
            <argument name="ImageFolder" value="ImageFolder"/>
        </actionGroup>
        <actionGroup ref="attachImage" stepKey="attachImage">
            <argument name="Image" value="ImageUpload3"/>
        </actionGroup>
        <actionGroup ref="saveImage" stepKey="insertImage"/>
        <actionGroup ref="fillOutUploadImagePopup" stepKey="fillOutUploadImagePopup"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeElement selector="{{BannerOnBackend.messageContent('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeTextCMSBlockStage"/>
        <seeElement selector="{{BannerOnBackend.messageContent('1', TinyMCEVariableBaseURL.editPanelValue)}}" stepKey="seeVariableCMSBlockStage"/>
        <seeElement selector="{{BannerOnBackend.messageContent('1', TinyMCEWidgetCMSPageLink.editPanelValue)}}" stepKey="seeWidgetCMSBlockStage"/>
        <seeElement selector="{{BannerOnBackend.base('1')}}{{CmsWYSIWYGSection.imageSource(ImageUpload3.fileName)}}" stepKey="seeImageFileNameCMSBlockStage"/>
        <seeElement selector="{{BannerOnBackend.base('1')}}{{CmsWYSIWYGSection.imageSource(ImageUpload3.extension)}}" stepKey="seeImageExtensionCMSBlockStage"/>
        <seeElement selector="{{BannerOnBackend.base('1')}}{{CmsWYSIWYGSection.ImageAlt(ImageUpload3.content)}}" stepKey="seeImageAltCMSBlockStage"/>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{BannerOnFrontend.messageContent('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeTextCMSPageStage"/>
        <seeElement selector="{{BannerOnFrontend.messageContent('1', _ENV.MAGENTO_BASE_URL)}}" stepKey="seeVariableCMSPageStage"/>
        <seeElement selector="{{BannerOnFrontend.messageContentWidget('1', _ENV.MAGENTO_BASE_URL, $$createPreReqCMSPage.identifier$$)}}" stepKey="seeWidgetCMSPageStage"/>
        <seeElement selector="{{BannerOnFrontend.base('1')}}{{CmsWYSIWYGSection.imageSource(ImageUpload3.fileName)}}" stepKey="seeImageFileNameCMSPageStage"/>
        <seeElement selector="{{BannerOnFrontend.base('1')}}{{CmsWYSIWYGSection.imageSource(ImageUpload3.extension)}}" stepKey="seeImageExtensionCMSPageStage"/>
        <seeElement selector="{{BannerOnFrontend.base('1')}}{{CmsWYSIWYGSection.ImageAlt(ImageUpload3.content)}}" stepKey="seeImageAltCMSPageStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.messageContent('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeTextCMSPageStorefront"/>
        <seeElement selector="{{BannerOnFrontend.messageContent('1', _ENV.MAGENTO_BASE_URL)}}" stepKey="seeVariableCMSPageStorefront"/>
        <seeElement selector="{{BannerOnFrontend.messageContentWidget('1', _ENV.MAGENTO_BASE_URL, $$createPreReqCMSPage.identifier$$)}}" stepKey="seeWidgetCMSPageStorefront"/>
        <seeElement selector="{{BannerOnFrontend.base('1')}}{{CmsWYSIWYGSection.imageSource(ImageUpload3.fileName)}}" stepKey="seeImageFileNameCMSPageStorefront"/>
        <seeElement selector="{{BannerOnFrontend.base('1')}}{{CmsWYSIWYGSection.imageSource(ImageUpload3.extension)}}" stepKey="seeImageExtensionCMSPageStorefront"/>
        <seeElement selector="{{BannerOnFrontend.base('1')}}{{CmsWYSIWYGSection.ImageAlt(ImageUpload3.content)}}" stepKey="seeImageAltCMSPageStorefront"/>
        <!-- Click Page Link Widget -->
        <comment userInput="Click Page Link Widget" stepKey="clickClickPageLinkWidget"/>
        <click selector="{{BannerOnFrontend.messageContentWidget('1', _ENV.MAGENTO_BASE_URL, $$createPreReqCMSPage.identifier$$)}}" stepKey="clickWidgetCMSPageStorefront"/>
        <wait time="3" stepKey="waitArbitraryTimeForPotentialNavigationToOccurStorefront"/>
        <seeCurrentUrlEquals url="{{_ENV.MAGENTO_BASE_URL}}$$createPreReqCMSPage.identifier$$" stepKey="seeThatUrlIsChangedToPageLinkWidgetUrlStorefront"/>
    </test>
    <test name="BlockRenderBannerThroughBlockContentTypeTinyMCE4WysiwygDisabledByDefault" extends="BlockRenderBannerThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Banner Through Block Content Type With TinyMCE4 and Wysiwyg Disabled By Default"/>
            <description value="Verify that users are able to successfully render and use the Banner content type through the Block content type with TinyMCE4 and Wysiwyg Disabled By Default."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15193"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <magentoCLI command="config:set cms/wysiwyg/enabled hidden" stepKey="configWYSIWYG"/>
        </before>
        <after>
            <magentoCLI command="config:set cms/wysiwyg/enabled enabled" stepKey="enableWYSIWYG" before="deleteCMSBlock"/>
        </after>
    </test>
    <test name="BlockRenderBannerThroughBlockContentTypeTinyMCE4WysiwygDisabledCompletely">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Banner Through Block Content Type With TinyMCE4 and Wysiwyg Disabled Completely"/>
            <description value="Verify that users are able to successfully render and use the Banner content type through the Block content type with TinyMCE4 and Wysiwyg Disabled Completely."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15194"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-banner"/>
            <group value="pagebuilder-bannerPoster"/>
        </annotations>
        <before>
            <magentoCLI command="config:set cms/wysiwyg/enabled disabled" stepKey="configWYSIWYG"/>
            <magentoCLI command="config:set cms/wysiwyg/editor mage/adminhtml/wysiwyg/tiny_mce/tinymce4Adapter" stepKey="configTinyMCE"/>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <createData entity="_defaultCmsPage" stepKey="createPreReqCMSPage"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <magentoCLI command="config:set cms/wysiwyg/enabled enabled" stepKey="enableWYSIWYG"/>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createPreReqCMSPage" stepKey="deletePreReqCMSPage"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Banner -->
        <comment userInput="Add Banner" stepKey="commentAddBanner"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBannerIntoStage">
            <argument name="contentType" value="PageBuilderBannerContentType"/>
        </actionGroup>
        <!-- Inline Edit: Add Text -->
        <comment userInput="Inline Edit: Add Text" stepKey="commentInlineEditAddText"/>
        <actionGroup ref="focusOnInlineTextAreaEditor" stepKey="focusOnInlineTextAreaEditor">
            <argument name="section" value="BannerOnBackend"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCEInlineWYSIWYGDisabled" stepKey="addTextToTinyMCEInline">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="text" value="{{PageBuilderBannerMessageProperty.value}}"/>
        </actionGroup>
        <!-- Inline Edit: Add Variable -->
        <actionGroup ref="focusOnInlineTextAreaEditor" stepKey="focusOnInlineTextAreaEditor2">
            <argument name="section" value="BannerOnBackend"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCEInlineWYSIWYGDisabled" stepKey="addVariableToTinyMCE">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="text" value="{{PageBuilderTextArea_VariableBaseURL.editPanelValue}}"/>
        </actionGroup>
        <!-- Inline Edit: Add Widget -->
        <comment userInput="Inline Edit: Add Widget" stepKey="commentInlineEditAddWidget"/>
        <actionGroup ref="focusOnInlineTextAreaEditor" stepKey="focusOnInlineTextAreaEditor3">
            <argument name="section" value="BannerOnBackend"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCEInlineWYSIWYGDisabled" stepKey="addPageLinkWidgetToTinyMCE">
            <argument name="section" value="BannerOnBackend"/>
            <argument name="text" value="{{PageBuilderTextArea_WidgetCMSHomepageLink.editPanelValue}}"/>
        </actionGroup>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <actionGroup ref="assertTextareaContainsValue" stepKey="assertTextareaContainsValueCMSBlockStage">
            <argument name="selector" value="{{BannerOnBackend.textArea('1')}}"/>
            <argument name="value" value="{{PageBuilderBannerMessageProperty.value}}{{PageBuilderTextArea_VariableBaseURL.editPanelValue}}{{PageBuilderTextArea_WidgetCMSHomepageLink.editPanelValue}}"/>
        </actionGroup>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{BannerOnFrontend.messageContentTextArea('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeTextCMSPageStage"/>
        <seeElement selector="{{BannerOnFrontend.messageContentTextArea('1', _ENV.MAGENTO_BASE_URL)}}" stepKey="seeVariableCMSPageStage"/>
        <seeElement selector="{{BannerOnFrontend.messageContentWidget('1', _ENV.MAGENTO_BASE_URL, PageBuilderTextArea_WidgetCMSHomepageLink.identifier)}}" stepKey="seeWidgetCMSPageStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{BannerOnFrontend.messageContentTextArea('1', PageBuilderBannerMessageProperty.value)}}" stepKey="seeTextCMSPageStorefront"/>
        <seeElement selector="{{BannerOnFrontend.messageContentTextArea('1', _ENV.MAGENTO_BASE_URL)}}" stepKey="seeVariableCMSPageStorefront"/>
        <seeElement selector="{{BannerOnFrontend.messageContentWidget('1', _ENV.MAGENTO_BASE_URL, PageBuilderTextArea_WidgetCMSHomepageLink.identifier)}}" stepKey="seeWidgetCMSPageStorefront"/>
        <!-- Click Page Link Widget -->
        <comment userInput="Click Page Link Widget" stepKey="clickClickPageLinkWidget"/>
        <click selector="{{BannerOnFrontend.messageContentWidget('1', _ENV.MAGENTO_BASE_URL, PageBuilderTextArea_WidgetCMSHomepageLink.identifier)}}" stepKey="clickWidgetCMSPageStorefront"/>
        <wait time="3" stepKey="waitArbitraryTimeForPotentialNavigationToOccurStorefront"/>
        <seeCurrentUrlEquals url="{{_ENV.MAGENTO_BASE_URL}}{{PageBuilderTextArea_WidgetCMSHomepageLink.identifier}}" stepKey="seeThatUrlIsChangedToPageLinkWidgetUrlStorefront"/>
    </test>
    <test name="BlockRenderSliderThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Slider Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the slider content type through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15206"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-slide"/>
            <group value="pagebuilder-sliderCommon"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Slider -->
        <comment userInput="Add Slider" stepKey="commentAddSlider"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderSliderContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragSliderOntoStage">
            <argument name="contentType" value="PageBuilderSliderContentType"/>
        </actionGroup>
        <!-- Edit Slide 1 -->
        <comment userInput="Edit Slide 1" stepKey="commentEditSlide1"/>
        <actionGroup ref="focusOnInlineTinyMCEEditor" stepKey="focusOnInlineTinyMCEEditor">
            <argument name="section" value="SlideOnBackend"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCEInline" stepKey="addTextToTinyMCEInline">
            <argument name="section" value="SlideOnBackend"/>
            <argument name="text" value="{{PageBuilderSlideItemContent_Slide1.value}}"/>
        </actionGroup>
        <!-- Edit Slider -->
        <comment userInput="Edit Slider" stepKey="commentEditSlider"/>
        <click selector="{{PageBuilderPanel.searchPanel}}" stepKey="unFocusSlide"/>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openSliderEditPanel">
            <argument name="contentType" value="PageBuilderSliderContentType"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="enterAutoPlay">
            <argument name="property" value="PageBuilderSliderAutoPlay_Enabled"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterAutoPlaySpeed">
            <argument name="property" value="PageBuilderSliderAutoPlaySpeed_50000"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="enterFade">
            <argument name="property" value="PageBuilderSliderFade_Enabled"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="enterInfiniteLoop">
            <argument name="property" value="PageBuilderSliderInfiniteLoop_Enabled"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="enterShowArrow">
            <argument name="property" value="PageBuilderSliderShowArrows_Enabled"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="enterShowDots">
            <argument name="property" value="PageBuilderSliderShowDots_Enabled"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSliderMinHeight">
            <argument name="property" value="PageBuilderSliderMinHeight_500"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings1"/>
        <!-- Add Slide 2 -->
        <comment userInput="Add Slide 2" stepKey="commentAddSlide2"/>
        <actionGroup ref="addChildContentTypeFromOptionMenu" stepKey="addChildContentType">
            <argument name="contentType" value="PageBuilderSliderContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanelSmallByIndex" stepKey="openEditPanelSlide2">
            <argument name="section" value="SlideOnBackend"/>
            <argument name="targetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setMinHeight">
            <argument name="property" value="PageBuilderSlideItemMinimumHeight_Empty"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCE" stepKey="addTextToTinyMCE">
            <argument name="property" value="PageBuilderSlideItemContent_Slide2"/>
            <argument name="section" value="SlideOnConfigurationPanel"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings2"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeElement selector="{{SliderOnStage.autoPlay('1', PageBuilderSliderAutoPlay_Enabled.value)}}" stepKey="seeAutoPlayCMSBlockStage"/>
        <seeElement selector="{{SliderOnStage.autoPlaySpeed('1', PageBuilderSliderAutoPlaySpeed_50000.value)}}" stepKey="seeAutoPlaySpeedCMSBlockStage"/>
        <seeElement selector="{{SliderOnStage.fade('1', PageBuilderSliderFade_Enabled.value)}}" stepKey="seeFadeCMSBlockStage"/>
        <seeElement selector="{{SliderOnStage.infiniteLoop('1', PageBuilderSliderInfiniteLoop_Enabled.value)}}" stepKey="seeInfiniteLoopCMSBlockStage"/>
        <seeElement selector="{{SliderOnStage.showArrows('1', PageBuilderSliderShowArrows_Enabled.value)}}" stepKey="seeArrowsCMSBlockStage"/>
        <seeElement selector="{{SliderOnStage.showDots('1', PageBuilderSliderShowDots_Enabled.value)}}" stepKey="seeDotsCMSBlockStage"/>
        <seeElement selector="{{SliderOnStage.minHeight('1', PageBuilderSliderMinHeight_500.value)}}" stepKey="seeMinHeightCMSBlockStage"/>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateHeightSlide1CMSBlockStage">
            <argument name="content" value="{{SlideOnBackend.wrapperCSS}}"/>
            <argument name="height" value="PageBuilderSlideItemMinimumHeight_300"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <click selector="{{SliderOnStage.slideNavigationDot('1', '1')}}" stepKey="clickSlide1CMSBlockStage"/>
        <waitForPageLoad stepKey="waitForSlide1CMSBlockStage"/>
        <seeElement selector="{{SlideOnBackend.messageContent('1', PageBuilderSlideItemContent_Slide1.value)}}" stepKey="seeSlide1ContentCMSBlockStage"/>
        <click selector="{{SliderOnStage.slideNavigationDot('1', '2')}}" stepKey="clickSlide2CMSBlockStage"/>
        <waitForPageLoad stepKey="waitForSlide2CMSBlockStage"/>
        <seeElement selector="{{SlideOnBackend.messageContent('2', PageBuilderSlideItemContent_Slide2.value)}}" stepKey="seeSlide2ContentCMSBlockStage"/>
        <click selector="{{SliderOnStage.previousSlideArrow('1')}}" stepKey="clickPreviousSlideArrowCMSBlockStage"/>
        <waitForPageLoad stepKey="waitForPreviousSlideCMSBlockStage"/>
        <seeElement selector="{{SlideOnBackend.messageContent('1', PageBuilderSlideItemContent_Slide1.value)}}" stepKey="seeSlide1ContentCMSBlockStage2"/>
        <click selector="{{SliderOnStage.previousSlideArrow('1')}}" stepKey="clickPreviousSlideArrowCMSBlockStage2"/>
        <waitForPageLoad stepKey="waitForPreviousSlideCMSBlockStage2"/>
        <seeElement selector="{{SlideOnBackend.messageContent('2', PageBuilderSlideItemContent_Slide2.value)}}" stepKey="seeSlide2ContentCMSBlockStage2"/>
        <click selector="{{SliderOnStage.nextSlideArrow('1')}}" stepKey="clickNextSlideArrowCMSBlockStage"/>
        <waitForPageLoad stepKey="waitForNextSlideCMSBlockStage"/>
        <seeElement selector="{{SlideOnBackend.messageContent('1', PageBuilderSlideItemContent_Slide1.value)}}" stepKey="seeSlide1ContentCMSBlockStage3"/>
        <click selector="{{SliderOnStage.nextSlideArrow('1')}}" stepKey="clickNextSlideArrowCMSBlockStage2"/>
        <waitForPageLoad stepKey="waitForNextSlideCMSBlockStage2"/>
        <seeElement selector="{{SlideOnBackend.messageContent('2', PageBuilderSlideItemContent_Slide2.value)}}" stepKey="seeSlide2ContentCMSBlockStage3"/>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateHeightSlide2CMSBlockStage">
            <argument name="content" value="{{SlideOnBackend.wrapperCSS}}"/>
            <argument name="height" value="PageBuilderSliderMinHeight_500"/>
            <argument name="index" value="2"/>
        </actionGroup>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{SliderOnFrontend.autoPlay('1', PageBuilderSliderAutoPlay_Enabled.value)}}" stepKey="seeAutoPlayCMSPageStage"/>
        <seeElement selector="{{SliderOnFrontend.autoPlaySpeed('1', PageBuilderSliderAutoPlaySpeed_50000.value)}}" stepKey="seeAutoPlaySpeedCMSPageStage"/>
        <seeElement selector="{{SliderOnFrontend.fade('1', PageBuilderSliderFade_Enabled.value)}}" stepKey="seeFadeCMSPageStage"/>
        <seeElement selector="{{SliderOnFrontend.infiniteLoop('1', PageBuilderSliderInfiniteLoop_Enabled.value)}}" stepKey="seeInfiniteLoopCMSPageStage"/>
        <seeElement selector="{{SliderOnFrontend.showArrows('1', PageBuilderSliderShowArrows_Enabled.value)}}" stepKey="seeArrowsCMSPageStage"/>
        <seeElement selector="{{SliderOnFrontend.showDots('1', PageBuilderSliderShowDots_Enabled.value)}}" stepKey="seeDotsCMSPageStage"/>
        <seeElement selector="{{SliderOnFrontend.minHeight('1', PageBuilderSliderMinHeight_500.value)}}" stepKey="seeHeightCMSPageStage"/>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateHeightSlide1CMSPageStage">
            <argument name="content" value="{{SlideOnFrontend.wrapperCSS}}"/>
            <argument name="height" value="PageBuilderSlideItemMinimumHeight_300"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{SliderOnFrontend.autoPlay('1', PageBuilderSliderAutoPlay_Enabled.value)}}" stepKey="seeAutoPlayCMSPageStorefront"/>
        <seeElement selector="{{SliderOnFrontend.autoPlaySpeed('1', PageBuilderSliderAutoPlaySpeed_50000.value)}}" stepKey="seeAutoPlaySpeedCMSPageStorefront"/>
        <seeElement selector="{{SliderOnFrontend.fade('1', PageBuilderSliderFade_Enabled.value)}}" stepKey="seeFadeCMSPageStorefront"/>
        <seeElement selector="{{SliderOnFrontend.infiniteLoop('1', PageBuilderSliderInfiniteLoop_Enabled.value)}}" stepKey="seeInfiniteLoopCMSPageStorefront"/>
        <seeElement selector="{{SliderOnFrontend.showArrows('1', PageBuilderSliderShowArrows_Enabled.value)}}" stepKey="seeArrowsCMSPageStorefront"/>
        <seeElement selector="{{SliderOnFrontend.showDots('1', PageBuilderSliderShowDots_Enabled.value)}}" stepKey="seeDotsCMSPageStorefront"/>
        <seeElement selector="{{SliderOnFrontend.minHeight('1', PageBuilderSliderMinHeight_500.value)}}" stepKey="seeHeightCMSPageStorefront"/>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateHeightSlide1CMSPageStorefront">
            <argument name="content" value="{{SlideOnFrontend.wrapperCSS}}"/>
            <argument name="height" value="PageBuilderSlideItemMinimumHeight_300"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <click selector="{{SliderOnFrontend.slideNavigationDot('1', '1')}}" stepKey="clickSlide1CMSPageStorefront"/>
        <waitForPageLoad stepKey="waitForSlide1CMSPageStorefront"/>
        <seeElement selector="{{SlideOnFrontend.messageContent('1', PageBuilderSlideItemContent_Slide1.value)}}" stepKey="seeSlide1ContentCMSPageStorefront"/>
        <click selector="{{SliderOnFrontend.slideNavigationDot('1', '2')}}" stepKey="clickSlide2CMSPageStorefront"/>
        <waitForPageLoad stepKey="waitForSlide2CMSPageStorefront"/>
        <seeElement selector="{{SlideOnFrontend.messageContent('2', PageBuilderSlideItemContent_Slide2.value)}}" stepKey="seeSlide2ContentCMSPageStorefront"/>
        <click selector="{{SliderOnFrontend.previousSlideArrow('1')}}" stepKey="clickPreviousSlideArrowCMSPageStorefront"/>
        <waitForPageLoad stepKey="waitForPreviousSlideCMSPageStorefront"/>
        <seeElement selector="{{SlideOnFrontend.messageContent('1', PageBuilderSlideItemContent_Slide1.value)}}" stepKey="seeSlide1ContentCMSPageStorefront2"/>
        <click selector="{{SliderOnFrontend.previousSlideArrow('1')}}" stepKey="clickPreviousSlideArrowCMSPageStorefront2"/>
        <waitForPageLoad stepKey="waitForPreviousSlideCMSPageStorefront2"/>
        <seeElement selector="{{SlideOnFrontend.messageContent('2', PageBuilderSlideItemContent_Slide2.value)}}" stepKey="seeSlide2ContentCMSPageStorefront2"/>
        <click selector="{{SliderOnFrontend.nextSlideArrow('1')}}" stepKey="clickNextSlideArrowCMSPageStorefront"/>
        <waitForPageLoad stepKey="waitForNextSlideCMSPageStorefront"/>
        <seeElement selector="{{SlideOnFrontend.messageContent('1', PageBuilderSlideItemContent_Slide1.value)}}" stepKey="seeSlide1ContentCMSPageStorefront3"/>
        <click selector="{{SliderOnFrontend.nextSlideArrow('1')}}" stepKey="clickNextSlideArrowCMSPageStorefront2"/>
        <waitForPageLoad stepKey="waitForNextSlideCMSPageStorefront2"/>
        <seeElement selector="{{SlideOnFrontend.messageContent('2', PageBuilderSlideItemContent_Slide2.value)}}" stepKey="seeSlide2ContentCMSPageStorefront3"/>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateHeightSlide2CMSPageStorefront">
            <argument name="content" value="{{SlideOnFrontend.wrapperCSS}}"/>
            <argument name="height" value="PageBuilderSliderMinHeight_500"/>
            <argument name="index" value="2"/>
        </actionGroup>
    </test>
    <test name="BlockRenderSlideItemPosterAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Slide Item Poster Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the slide item content type poster appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15207"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-slide"/>
            <group value="pagebuilder-slideItemPoster"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <resizeWindow width="1280" height="1024" stepKey="resizeWindowToDesktop"/>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="navigateToMediaGallery" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="navigateToDesktopImageFolder">
                <argument name="FolderName" value="{{PageBuilderBackgroundImage_JPG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="deleteBackgroundImage">
                <argument name="Image" value="PageBuilderBackgroundImage_JPG"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="deleteMobileBackgroundImage">
                <argument name="Image" value="PageBuilderBackgroundMobileImage_GIF"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Slider -->
        <comment userInput="Add Slider" stepKey="commentAddSlider"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderSliderContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragSliderIntoStage">
            <argument name="contentType" value="PageBuilderSliderContentType"/>
        </actionGroup>
        <!-- Edit Slider -->
        <comment userInput="Edit Slider" stepKey="commentEditSlider"/>
        <actionGroup ref="openPageBuilderEditPanelSmallByIndex" stepKey="openEditPanelAfterDrop">
            <argument name="section" value="SlideOnBackend"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setAppearance">
            <argument name="property" value="PageBuilderAppearance_Poster"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setSlideName">
            <argument name="property" value="PageBuilderSlideItemSlideName_Slide1"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setMinHeight">
            <argument name="property" value="PageBuilderSlideItemMinimumHeight_500"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Plaintext_Green"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachBackgroundImage">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachBackgroundMobileImage">
            <argument name="property" value="PageBuilderBackgroundMobileImage_GIF"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="setBackgroundPosition">
            <argument name="property" value="PageBuilderBackgroundPosition_Center"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setBackgroundSize">
            <argument name="property" value="PageBuilderBackgroundSize_Auto"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setBackgroundRepeat">
            <argument name="property" value="PageBuilderBackgroundRepeat_Enabled"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCE" stepKey="addTextToTinyMCE">
            <argument name="property" value="PageBuilderSlideItemContent_Slide1"/>
            <argument name="section" value="SlideOnConfigurationPanel"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelLinkUrlField" stepKey="setLink">
            <argument name="property" value="PageBuilderSlideItemLinkURL_External"/>
            <argument name="selection" value="{{ExternalLink.url}}"/>
            <argument name="newTab" value="PageBuilderSlideItemLinkNewTab_False"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="setShowButton">
            <argument name="property" value="PageBuilderSlideItemShowButton_OnHover"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="setButtonText">
            <argument name="property" value="PageBuilderSlideItemButtonText_Common"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="setButtonType">
            <argument name="property" value="PageBuilderSlideItemButtonType_Secondary"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="setShowOverlay">
            <argument name="property" value="PageBuilderSlideItemShowOverlay_OnHover"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setOverlayColor">
            <argument name="property" value="PageBuilderSlideItemOverlayColor_Blue_Opaque"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeElement selector="{{SlideOnBackend.appearance('1', PageBuilderAppearance_Poster.value)}}" stepKey="seeAppearanceCMSBlockStage"/>
        <actionGroup ref="validateOverlayPositionPoster" stepKey="validateOverlayPositionCMSBlockStage">
            <argument name="page" value="SlideOnBackend"/>
        </actionGroup>
        <seeElement selector="{{SlideOnBackend.slideName('1', PageBuilderSlideItemSlideName_Slide1.value)}}" stepKey="seeSlideNameCMSBlockStage"/>
        <moveMouseOver selector="{{SliderOnStage.activeSlideNavigationDot}}" stepKey="mouseOverSlideDotCMSBlockStage"/>
        <see userInput="{{PageBuilderSlideItemSlideName_Slide1.value}}" selector="{{SliderOnStage.slideNavigationDotNameTooltip('1')}}" stepKey="seeSlideName1InTooltipCMSBlockStage"/>
        <seeElement selector="{{SlideOnBackend.posterMinimumHeight('1', PageBuilderSlideItemMinimumHeight_500.value)}}" stepKey="seeMinimumHeightCMSBlockStage"/>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateHeightCMSBlockStage">
            <argument name="content" value="{{SlideOnBackend.wrapperCSS}}"/>
            <argument name="height" value="PageBuilderSlideItemMinimumHeight_500"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundAttributesWithNoImageForSlide" stepKey="validateBackgroundAttributesCMSBlockStage">
            <argument name="section" value="SlideOnBackend"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImage" stepKey="validateBackgroundImageCMSBlockStage">
            <argument name="section" value="SlideOnBackend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <seeElement selector="{{SlideOnBackend.messageContent('1', PageBuilderSlideItemContent_Slide1.value)}}" stepKey="seeMessageContentCMSBlockStage"/>
        <seeElementInDOM selector="{{SlideOnBackend.button('1')}}" stepKey="seeButtonInDOMCMSBlockStage"/>
        <dontSeeElement selector="{{SlideOnBackend.button('1')}}" stepKey="dontSeeButtonCMSBlockStage"/>
        <seeElement selector="{{SlideOnBackend.transparentOverlay('1')}}" stepKey="seeTransparentOverlayCMSBlockStage"/>
        <moveMouseOver selector="{{SlideOnBackend.appearance('1', PageBuilderAppearance_Poster.value)}}" stepKey="moveMouseOverSlideCMSBlockStage"/>
        <seeElement selector="{{SlideOnBackend.button('1')}}" stepKey="seeButtonOnHoverCMSBlockStage"/>
        <seeElement selector="{{SlideOnBackend.buttonText('1', PageBuilderSlideItemButtonText_Common.value)}}" stepKey="seeButtonTextOnHoverCMSBlockStage"/>
        <seeElement selector="{{SlideOnBackend.buttonType('1', PageBuilderSlideItemButtonType_Secondary.value)}}" stepKey="seeButtonTypeOnHoverCMSBlockStage"/>
        <seeElement selector="{{SlideOnBackend.overlayBackgroundColor('1', PageBuilderSlideItemOverlayColor_Blue_Opaque.value)}}" stepKey="seeOverlayOnHoverCMSBlockStage"/>
        <executeJS function="return {{SlideOnBackend.overlayJS('1')}}.getBoundingClientRect().left" stepKey="overlayLeftPositionCMSBlockStage"/>
        <executeJS function="return document.evaluate(&quot;{{SlideOnBackend.button('1')}}&quot;, document.body).iterateNext().getBoundingClientRect().left" stepKey="buttonLeftPositionCMSBlockStage"/>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSBlockStage}-{$overlayLeftPositionCMSBlockStage}-{{PageBuilderPaddingProperty40.paddingLeft}}))" stepKey="buttonMinusOverlayMinusPaddingCMSBlockStage"/>
        <assertLessThanOrEqual stepKey="assertButtonLeftAlignedCMSBlockStage">
            <expectedResult type="int">5</expectedResult>
            <actualResult type="variable">buttonMinusOverlayMinusPaddingCMSBlockStage</actualResult>
        </assertLessThanOrEqual>
        <executeJS function="return window.getComputedStyle({{SlideOnBackend.wrapperJS('1')}}).textAlign" stepKey="grabDefaultComputedTextAlignCMSBlockStage"/>
        <assertEquals stepKey="assertDefaultComputedTextAlignCMSBlockStage">
            <expectedResult type="string">{{PageBuilderAdvancedAlignmentPropertyStart.value}}</expectedResult>
            <actualResult type="variable">grabDefaultComputedTextAlignCMSBlockStage</actualResult>
        </assertEquals>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_Poster.value)}}" stepKey="seeAppearanceCMSPageStage"/>
        <actionGroup ref="validateOverlayPositionPoster" stepKey="validateOverlayPositionCMSPageStage">
            <argument name="page" value="SlideOnFrontend"/>
        </actionGroup>
        <seeElement selector="{{SlideOnFrontend.minimumHeight('1', PageBuilderSlideItemMinimumHeight_500.value)}}" stepKey="seeMinimumHeightCMSPageStage"/>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateHeightCMSPageStage">
            <argument name="content" value="{{SlideOnFrontend.wrapperCSS}}"/>
            <argument name="height" value="PageBuilderSlideItemMinimumHeight_500"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundAttributesWithNoImageForSlide" stepKey="validateBackgroundAttributesCMSPageStage">
            <argument name="section" value="SlideOnFrontend"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStage">
            <argument name="section" value="SlideOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <seeElement selector="{{SlideOnFrontend.messageContent('1', PageBuilderSlideItemContent_Slide1.value)}}" stepKey="seeMessageContentCMSPageStage"/>
        <seeElementInDOM selector="{{SlideOnFrontend.button('1')}}" stepKey="seeButtonInDOMCMSPageStage"/>
        <dontSeeElement selector="{{SlideOnFrontend.button('1')}}" stepKey="dontSeeButtonCMSPageStage"/>
        <seeElement selector="{{SlideOnFrontend.transparentOverlay('1')}}" stepKey="seeTransparentOverlayCMSPageStage"/>
        <executeJS function="return {{SlideOnFrontend.overlayJS('1')}}.getBoundingClientRect().left" stepKey="overlayLeftPositionCMSPageStage"/>
        <executeJS function="return document.evaluate(&quot;{{SlideOnFrontend.button('1')}}&quot;, document.body).iterateNext().getBoundingClientRect().left" stepKey="buttonLeftPositionCMSPageStage"/>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSPageStage}-{$overlayLeftPositionCMSPageStage}-{{PageBuilderPaddingProperty40.paddingLeft}}))" stepKey="buttonMinusOverlayMinusPaddingCMSPageStage"/>
        <assertLessThanOrEqual stepKey="assertButtonLeftAlignedCMSPageStage">
            <expectedResult type="int">5</expectedResult>
            <actualResult type="variable">buttonMinusOverlayMinusPaddingCMSPageStage</actualResult>
        </assertLessThanOrEqual>
        <executeJS function="return window.getComputedStyle({{SlideOnFrontend.wrapperJS('1')}}).textAlign" stepKey="grabDefaultComputedTextAlignCMSPageStage"/>
        <assertEquals stepKey="assertDefaultComputedTextAlignCMSPageStage">
            <expectedResult type="string">{{PageBuilderAdvancedAlignmentPropertyStart.value}}</expectedResult>
            <actualResult type="variable">grabDefaultComputedTextAlignCMSPageStage</actualResult>
        </assertEquals>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToStoreFront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_Poster.value)}}" stepKey="seeAppearanceCMSPageStorefront"/>
        <actionGroup ref="validateOverlayPositionPoster" stepKey="validateOverlayPositionCMSPageStorefront">
            <argument name="page" value="SlideOnFrontend"/>
        </actionGroup>
        <seeElement selector="{{SlideOnFrontend.slideName('1', PageBuilderSlideItemSlideName_Slide1.value)}}" stepKey="seeSlideNameCMSPageStorefront"/>
        <seeElement selector="{{SlideOnFrontend.minimumHeight('1', PageBuilderSlideItemMinimumHeight_500.value)}}" stepKey="seeMinimumHeightCMSPageStorefront"/>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateHeightCMSPageStorefront">
            <argument name="content" value="{{SlideOnFrontend.wrapperCSS}}"/>
            <argument name="height" value="PageBuilderSlideItemMinimumHeight_500"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundAttributesWithNoImageForSlide" stepKey="validateBackgroundAttributesCMSPageStorefront">
            <argument name="section" value="SlideOnFrontend"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStorefront">
            <argument name="section" value="SlideOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <seeElement selector="{{SlideOnFrontend.messageContent('1', PageBuilderSlideItemContent_Slide1.value)}}" stepKey="seeMessageContentCMSPageStorefront"/>
        <seeElementInDOM selector="{{SlideOnFrontend.button('1')}}" stepKey="seeButtonInDOMCMSPageStorefront"/>
        <dontSeeElement selector="{{SlideOnFrontend.button('1')}}" stepKey="dontSeeButtonCMSPageStorefront"/>
        <seeElement selector="{{SlideOnFrontend.transparentOverlay('1')}}" stepKey="seeTransparentOverlayCMSPageStorefront"/>
        <moveMouseOver selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_Poster.value)}}" stepKey="moveMouseOverSlideCMSPageStorefront"/>
        <seeElement selector="{{SlideOnFrontend.button('1')}}" stepKey="seeButtonOnHoverCMSPageStorefront"/>
        <seeElement selector="{{SlideOnFrontend.buttonText('1', PageBuilderSlideItemButtonText_Common.value)}}" stepKey="seeButtonTextOnHoverCMSPageStorefront"/>
        <seeElement selector="{{SlideOnFrontend.buttonType('1', PageBuilderSlideItemButtonType_Secondary.value)}}" stepKey="seeButtonTypeOnHoverCMSPageStorefront"/>
        <seeElement selector="{{SlideOnFrontend.overlayBackgroundColor('1', PageBuilderSlideItemOverlayColor_Blue_Opaque.value)}}" stepKey="seeOverlayOnHoverCMSPageStorefront"/>
        <executeJS function="return {{SlideOnFrontend.overlayJS('1')}}.getBoundingClientRect().left" stepKey="overlayLeftPositionCMSPageStorefront"/>
        <executeJS function="return document.evaluate(&quot;{{SlideOnFrontend.button('1')}}&quot;, document.body).iterateNext().getBoundingClientRect().left" stepKey="buttonLeftPositionCMSPageStorefront"/>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSPageStorefront}-{$overlayLeftPositionCMSPageStorefront}-{{PageBuilderPaddingProperty40.paddingLeft}}))" stepKey="buttonMinusOverlayMinusPaddingCMSPageStorefront"/>
        <assertLessThanOrEqual stepKey="assertButtonLeftAlignedCMSPageStorefront">
            <expectedResult type="int">5</expectedResult>
            <actualResult type="variable">buttonMinusOverlayMinusPaddingCMSPageStorefront</actualResult>
        </assertLessThanOrEqual>
        <executeJS function="return window.getComputedStyle({{SlideOnFrontend.wrapperJS('1')}}).textAlign" stepKey="grabDefaultComputedTextAlignCMSPageStorefront"/>
        <assertEquals stepKey="assertDefaultComputedTextAlignCMSPageStorefront">
            <expectedResult type="string">{{PageBuilderAdvancedAlignmentPropertyStart.value}}</expectedResult>
            <actualResult type="variable">grabDefaultComputedTextAlignCMSPageStorefront</actualResult>
        </assertEquals>
        <!-- Validate Slide Link -->
        <comment userInput="Validate Slide Link" stepKey="commentValidateSlideLinkCMSPageStorefront"/>
        <click selector="{{SlideOnFrontend.linkUrl('1', PageBuilderSlideItemLinkURL_External.value)}}" stepKey="clickLinkUrlCMSPageStorefront"/>
        <wait time="3" stepKey="waitArbitraryTimeForPotentialNavigationToOccurCMSPageStorefront"/>
        <seeCurrentUrlEquals url="{{PageBuilderSlideItemLinkURL_External.value}}" stepKey="seeThatUrlIsChangedToButtonUrlCMSPageStorefront"/>
        <!-- Validate CMS Page Storefront Mobile -->
        <comment userInput="Validate CMS Page Storefront Mobile" stepKey="commentValidateCMSPageStorefrontMobile"/>
        <resizeWindow width="767" height="1000" stepKey="resizeWindowToMobile"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStoreFrontMobile">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <actionGroup ref="validateOverlayPositionPoster" stepKey="validateOverlayPositionCMSPageStorefrontMobile">
            <argument name="page" value="SlideOnFrontend"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateHeightCMSPageStorefrontMobile">
            <argument name="content" value="{{SlideOnFrontend.wrapperCSS}}"/>
            <argument name="height" value="PageBuilderSlideItemMinimumHeight_500"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStorefrontMobile">
            <argument name="section" value="SlideOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundMobileImage_GIF"/>
        </actionGroup>
        <seeElementInDOM selector="{{SlideOnFrontend.button('1')}}" stepKey="seeButtonInDOMCMSPageStorefrontMobile"/>
        <dontSeeElement selector="{{SlideOnFrontend.button('1')}}" stepKey="dontSeeButtonCMSPageStorefrontMobile"/>
        <seeElement selector="{{SlideOnFrontend.transparentOverlay('1')}}" stepKey="seeTransparentOverlayCMSPageStorefrontMobile"/>
        <moveMouseOver selector="{{SlideOnFrontend.base('1')}}" stepKey="moveMouseOverSlideCMSPageStorefrontMobile"/>
        <seeElement selector="{{SlideOnFrontend.button('1')}}" stepKey="seeButtonOnHoverCMSPageStorefrontMobile"/>
        <seeElement selector="{{SlideOnFrontend.overlayBackgroundColor('1', PageBuilderSlideItemOverlayColor_Blue_Opaque.value)}}" stepKey="seeOverlayOnHoverCMSPageStorefrontMobile"/>
        <!-- Validate Slide Link Mobile -->
        <comment userInput="Validate Slide Link" stepKey="commentValidateSlideLinkCMSPageStorefrontMobile"/>
        <click selector="{{SlideOnFrontend.linkUrl('1', PageBuilderSlideItemLinkURL_External.value)}}" stepKey="clickLinkUrlCMSPageStorefrontMobile"/>
        <wait time="3" stepKey="waitArbitraryTimeForPotentialNavigationToOccurCMSPageStorefrontMobile"/>
        <seeCurrentUrlEquals url="{{PageBuilderSlideItemLinkURL_External.value}}" stepKey="seeThatUrlIsChangedToButtonUrlCMSPageStorefrontMobile"/>
    </test>
    <test name="BlockRenderSlideItemCollageLeftAppearanceThroughBlockContentType" extends="BlockRenderSlideItemPosterAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Slide Item Collage Left Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the slide item content type collage left appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15208"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-slide"/>
            <group value="pagebuilder-slideItemCollageLeft"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setAppearance">
            <argument name="property" value="PageBuilderAppearance_CollageLeft"/>
        </actionGroup>
        <seeElement selector="{{SlideOnBackend.appearance('1', PageBuilderAppearance_CollageLeft.value)}}" stepKey="seeAppearanceCMSBlockStage"/>
        <actionGroup ref="validateOverlayPositionCollageLeft" stepKey="validateOverlayPositionCMSBlockStage">
            <argument name="page" value="SlideOnBackend"/>
        </actionGroup>
        <seeElement selector="{{SlideOnBackend.collageMinimumHeight('1', PageBuilderSlideItemMinimumHeight_500.value)}}" stepKey="seeMinimumHeightCMSBlockStage"/>
        <moveMouseOver selector="{{SlideOnBackend.appearance('1', PageBuilderAppearance_CollageLeft.value)}}" stepKey="moveMouseOverSlideCMSBlockStage"/>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSBlockStage}-{$overlayLeftPositionCMSBlockStage}-30))" stepKey="buttonMinusOverlayMinusPaddingCMSBlockStage"/>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_CollageLeft.value)}}" stepKey="seeAppearanceCMSPageStage"/>
        <actionGroup ref="validateOverlayPositionCollageLeft" stepKey="validateOverlayPositionCMSPageStage">
            <argument name="page" value="SlideOnFrontend"/>
        </actionGroup>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSPageStage}-{$overlayLeftPositionCMSPageStage}-30))" stepKey="buttonMinusOverlayMinusPaddingCMSPageStage"/>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_CollageLeft.value)}}" stepKey="seeAppearanceCMSPageStorefront"/>
        <actionGroup ref="validateOverlayPositionCollageLeft" stepKey="validateOverlayPositionCMSPageStorefront">
            <argument name="page" value="SlideOnFrontend"/>
        </actionGroup>
        <moveMouseOver selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_CollageLeft.value)}}" stepKey="moveMouseOverSlideCMSPageStorefront"/>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSPageStorefront}-{$overlayLeftPositionCMSPageStorefront}-30))" stepKey="buttonMinusOverlayMinusPaddingCMSPageStorefront"/>
        <executeJS function="return Math.abs({{SlideOnFrontend.wrapperJS('1')}}.getBoundingClientRect().width - {{PageBuilderPaddingProperty40.paddingLeft}} - {{PageBuilderPaddingProperty40.paddingRight}})" stepKey="widthOfWrapperMinusPaddingCMSPageStorefrontMobile" before="validateOverlayPositionCMSPageStorefrontMobile"/>
        <actionGroup ref="validateOverlayPositionCollageLeft" stepKey="validateOverlayPositionCMSPageStorefrontMobile">
            <argument name="page" value="SlideOnFrontend"/>
            <argument name="expectedOverlayWidth" value="{$widthOfWrapperMinusPaddingCMSPageStorefrontMobile}"/>
        </actionGroup>
    </test>
    <test name="BlockRenderSlideItemCollageCenterAppearanceThroughBlockContentType" extends="BlockRenderSlideItemPosterAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Slide Item Collage Center Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the slide item content type collage center appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15209"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-slide"/>
            <group value="pagebuilder-slideItemCollageCenter"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setAppearance">
            <argument name="property" value="PageBuilderAppearance_CollageCentered"/>
        </actionGroup>
        <seeElement selector="{{SlideOnBackend.appearance('1', PageBuilderAppearance_CollageCentered.value)}}" stepKey="seeAppearanceCMSBlockStage"/>
        <actionGroup ref="validateOverlayPositionCollageCenter" stepKey="validateOverlayPositionCMSBlockStage">
            <argument name="page" value="SlideOnBackend"/>
        </actionGroup>
        <seeElement selector="{{SlideOnBackend.collageMinimumHeight('1', PageBuilderSlideItemMinimumHeight_500.value)}}" stepKey="seeMinimumHeightCMSBlockStage"/>
        <moveMouseOver selector="{{SlideOnBackend.appearance('1', PageBuilderAppearance_CollageCentered.value)}}" stepKey="moveMouseOverSlideCMSBlockStage"/>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSBlockStage}-{$overlayLeftPositionCMSBlockStage}-30))" stepKey="buttonMinusOverlayMinusPaddingCMSBlockStage"/>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_CollageCentered.value)}}" stepKey="seeAppearanceCMSPageStage"/>
        <actionGroup ref="validateOverlayPositionCollageCenter" stepKey="validateOverlayPositionCMSPageStage">
            <argument name="page" value="SlideOnFrontend"/>
        </actionGroup>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSPageStage}-{$overlayLeftPositionCMSPageStage}-30))" stepKey="buttonMinusOverlayMinusPaddingCMSPageStage"/>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_CollageCentered.value)}}" stepKey="seeAppearanceCMSPageStorefront"/>
        <actionGroup ref="validateOverlayPositionCollageCenter" stepKey="validateOverlayPositionCMSPageStorefront">
            <argument name="page" value="SlideOnFrontend"/>
        </actionGroup>
        <moveMouseOver selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_CollageCentered.value)}}" stepKey="moveMouseOverSlideCMSPageStorefront"/>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSPageStorefront}-{$overlayLeftPositionCMSPageStorefront}-30))" stepKey="buttonMinusOverlayMinusPaddingCMSPageStorefront"/>
        <executeJS function="return Math.abs({{SlideOnFrontend.wrapperJS('1')}}.getBoundingClientRect().width - {{PageBuilderPaddingProperty40.paddingLeft}} - {{PageBuilderPaddingProperty40.paddingRight}})" stepKey="widthOfWrapperMinusPaddingCMSPageStorefrontMobile" before="validateOverlayPositionCMSPageStorefrontMobile"/>
        <actionGroup ref="validateOverlayPositionCollageCenter" stepKey="validateOverlayPositionCMSPageStorefrontMobile">
            <argument name="page" value="SlideOnFrontend"/>
            <argument name="expectedOverlayWidth" value="{$widthOfWrapperMinusPaddingCMSPageStorefrontMobile}"/>
        </actionGroup>
    </test>
    <test name="BlockRenderSlideItemCollageRightAppearanceThroughBlockContentType" extends="BlockRenderSlideItemPosterAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Slide Item Collage Right Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the slide item content type collage right appearance through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15210"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-slide"/>
            <group value="pagebuilder-slideItemCollageRight"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setAppearance">
            <argument name="property" value="PageBuilderAppearance_CollageRight"/>
        </actionGroup>
        <seeElement selector="{{SlideOnBackend.appearance('1', PageBuilderAppearance_CollageRight.value)}}" stepKey="seeAppearanceCMSBlockStage"/>
        <actionGroup ref="validateOverlayPositionCollageRight" stepKey="validateOverlayPositionCMSBlockStage">
            <argument name="page" value="SlideOnBackend"/>
        </actionGroup>
        <seeElement selector="{{SlideOnBackend.collageMinimumHeight('1', PageBuilderSlideItemMinimumHeight_500.value)}}" stepKey="seeMinimumHeightCMSBlockStage"/>
        <moveMouseOver selector="{{SlideOnBackend.appearance('1', PageBuilderAppearance_CollageRight.value)}}" stepKey="moveMouseOverSlideCMSBlockStage"/>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSBlockStage}-{$overlayLeftPositionCMSBlockStage}-30))" stepKey="buttonMinusOverlayMinusPaddingCMSBlockStage"/>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_CollageRight.value)}}" stepKey="seeAppearanceCMSPageStage"/>
        <actionGroup ref="validateOverlayPositionCollageRight" stepKey="validateOverlayPositionCMSPageStage">
            <argument name="page" value="SlideOnFrontend"/>
        </actionGroup>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSPageStage}-{$overlayLeftPositionCMSPageStage}-30))" stepKey="buttonMinusOverlayMinusPaddingCMSPageStage"/>
        <seeElement selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_CollageRight.value)}}" stepKey="seeAppearanceCMSPageStorefront"/>
        <actionGroup ref="validateOverlayPositionCollageRight" stepKey="validateOverlayPositionCMSPageStorefront">
            <argument name="page" value="SlideOnFrontend"/>
        </actionGroup>
        <moveMouseOver selector="{{SlideOnFrontend.appearance('1', PageBuilderAppearance_CollageRight.value)}}" stepKey="moveMouseOverSlideCMSPageStorefront"/>
        <executeJS function="return Math.abs(Math.round({$buttonLeftPositionCMSPageStorefront}-{$overlayLeftPositionCMSPageStorefront}-30))" stepKey="buttonMinusOverlayMinusPaddingCMSPageStorefront"/>
        <executeJS function="return Math.abs({{SlideOnFrontend.wrapperJS('1')}}.getBoundingClientRect().width - {{PageBuilderPaddingProperty40.paddingLeft}} - {{PageBuilderPaddingProperty40.paddingRight}})" stepKey="widthOfWrapperMinusPaddingCMSPageStorefrontMobile" before="validateOverlayPositionCMSPageStorefrontMobile"/>
        <actionGroup ref="validateOverlayPositionCollageRight" stepKey="validateOverlayPositionCMSPageStorefrontMobile">
            <argument name="page" value="SlideOnFrontend"/>
            <argument name="expectedOverlayWidth" value="{$widthOfWrapperMinusPaddingCMSPageStorefrontMobile}"/>
        </actionGroup>
    </test>
    <test name="BlockRenderSlideItemThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Slide Items Through Block Content Type With TinyMCE4 and Wysiwyg Enabled By Default"/>
            <description value="Verify that users are able to successfully render and use the slide item content type through the Block content type with TinyMCE4 and Wysiwyg Enabled By default."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15211"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-slide"/>
            <group value="pagebuilder-slideItemPoster"/>
        </annotations>
        <before>
            <magentoCLI command="config:set cms/wysiwyg/enabled enabled" stepKey="configWYSIWYG"/>
            <magentoCLI command="config:set cms/wysiwyg/editor mage/adminhtml/wysiwyg/tiny_mce/tinymce4Adapter" stepKey="configTinyMCE"/>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <createData entity="_defaultCmsPage" stepKey="createPreReqCMSPage"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createPreReqCMSPage" stepKey="deletePreReqCMSPage"/>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Slider -->
        <comment userInput="Add Slider" stepKey="commentAddSlider"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderSliderContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragSliderIntoStage">
            <argument name="contentType" value="PageBuilderSliderContentType"/>
        </actionGroup>
        <!-- Inline Edit: Add Text -->
        <comment userInput="Inline Edit: Add Text" stepKey="commentInlineEditAddText"/>
        <actionGroup ref="focusOnInlineTinyMCEEditor" stepKey="focusOnInlineTinyMCEEditor">
            <argument name="section" value="SlideOnBackend"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCEInline" stepKey="addTextToTinyMCEInline">
            <argument name="section" value="SlideOnBackend"/>
            <argument name="text" value="{{PageBuilderSlideItemContent_Slide1.value}}"/>
        </actionGroup>
        <!-- Inline Edit: Add Variable -->
        <comment userInput="Inline Edit: Add Variable" stepKey="commentInlineEditAddVariable"/>
        <actionGroup ref="focusOnInlineTinyMCEEditor" stepKey="focusOnInlineTinyMCEEditor2">
            <argument name="section" value="SlideOnBackend"/>
        </actionGroup>
        <actionGroup ref="addVariableToTinyMCEInline" stepKey="addVariableToTinyMCE">
            <argument name="variable" value="TinyMCEVariableBaseURL"/>
        </actionGroup>
        <!-- Inline Edit: Add Widget -->
        <comment userInput="Inline Edit: Add Widget" stepKey="commentInlineEditAddWidget"/>
        <actionGroup ref="focusOnInlineTinyMCEEditor" stepKey="focusOnInlineTinyMCEEditor3">
            <argument name="section" value="SlideOnBackend"/>
        </actionGroup>
        <actionGroup ref="addPageLinkWidgetToTinyMCEInline" stepKey="addPageLinkWidgetToTinyMCE">
            <argument name="widget" value="TinyMCEWidgetCMSPageLink"/>
            <argument name="page" value="$$createPreReqCMSPage.identifier$$"/>
        </actionGroup>
        <!-- Inline Edit: Add Image -->
        <comment userInput="Inline Edit: Add Image" stepKey="commentInlineEditAddImage"/>
        <actionGroup ref="focusOnInlineTinyMCEEditor" stepKey="focusOnInlineTinyMCEEditor4">
            <argument name="section" value="SlideOnBackend"/>
        </actionGroup>
        <actionGroup ref="clickInsertImageInTinyMCE" stepKey="clickInsertImageInTinyMCE"/>
        <actionGroup ref="clickBrowseBtnOnUploadPopup" stepKey="clickBrowserBtn"/>
        <actionGroup ref="VerifyMediaGalleryStorageActions" stepKey="VerifyMediaGalleryStorageBtn"/>
        <actionGroup ref="clickMediaGalleryStorageRootArrow" stepKey="clickMediaGalleryStorageRootArrow"/>
        <actionGroup ref="CreateImageFolder" stepKey="CreateImageFolder">
            <argument name="ImageFolder" value="ImageFolder"/>
        </actionGroup>
        <actionGroup ref="attachImage" stepKey="attachImage">
            <argument name="Image" value="ImageUpload3"/>
        </actionGroup>
        <actionGroup ref="saveImage" stepKey="insertImage"/>
        <actionGroup ref="fillOutUploadImagePopup" stepKey="fillOutUploadImagePopup"/>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <actionGroup ref="focusOnInlineTinyMCEEditor" stepKey="focusOnInlineTinyMCEEditor5">
            <argument name="section" value="SlideOnBackend"/>
        </actionGroup>
        <seeElement selector="{{SlideOnBackend.messageContent('1', PageBuilderSlideItemContent_Slide1.value)}}" stepKey="seeTextCMSBlockStage"/>
        <seeElement selector="{{SlideOnBackend.messageContent('1', TinyMCEVariableBaseURL.editPanelValue)}}" stepKey="seeVariableCMSBlockStage"/>
        <seeElement selector="{{SlideOnBackend.messageContent('1', TinyMCEWidgetCMSPageLink.editPanelValue)}}" stepKey="seeWidgetCMSBlockStage"/>
        <seeElement selector="{{SlideOnBackend.base('1')}}{{CmsWYSIWYGSection.imageSource(ImageUpload3.fileName)}}" stepKey="seeImageFileNameCMSBlockStage"/>
        <seeElement selector="{{SlideOnBackend.base('1')}}{{CmsWYSIWYGSection.imageSource(ImageUpload3.extension)}}" stepKey="seeImageExtensionCMSBlockStage"/>
        <seeElement selector="{{SlideOnBackend.base('1')}}{{CmsWYSIWYGSection.ImageAlt(ImageUpload3.content)}}" stepKey="seeImageAltCMSBlockStage"/>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{SlideOnFrontend.messageContent('1', PageBuilderSlideItemContent_Slide1.value)}}" stepKey="seeTextCMSPageStage"/>
        <seeElement selector="{{SlideOnFrontend.messageContent('1', _ENV.MAGENTO_BASE_URL)}}" stepKey="seeVariableCMSPageStage"/>
        <seeElement selector="{{SlideOnFrontend.messageContentWidget('1', _ENV.MAGENTO_BASE_URL, $$createPreReqCMSPage.identifier$$)}}" stepKey="seeWidgetCMSPageStage"/>
        <seeElement selector="{{SlideOnFrontend.base('1')}}{{CmsWYSIWYGSection.imageSource(ImageUpload3.fileName)}}" stepKey="seeImageFileNameCMSPageStage"/>
        <seeElement selector="{{SlideOnFrontend.base('1')}}{{CmsWYSIWYGSection.imageSource(ImageUpload3.extension)}}" stepKey="seeImageExtensionCMSPageStage"/>
        <seeElement selector="{{SlideOnFrontend.base('1')}}{{CmsWYSIWYGSection.ImageAlt(ImageUpload3.content)}}" stepKey="seeImageAltCMSPageStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{SlideOnFrontend.messageContent('1', PageBuilderSlideItemContent_Slide1.value)}}" stepKey="seeTextCMSPageStorefront"/>
        <seeElement selector="{{SlideOnFrontend.messageContent('1', _ENV.MAGENTO_BASE_URL)}}" stepKey="seeVariableCMSPageStorefront"/>
        <seeElement selector="{{SlideOnFrontend.messageContentWidget('1', _ENV.MAGENTO_BASE_URL, $$createPreReqCMSPage.identifier$$)}}" stepKey="seeWidgetCMSPageStorefront"/>
        <seeElement selector="{{SlideOnFrontend.base('1')}}{{CmsWYSIWYGSection.imageSource(ImageUpload3.fileName)}}" stepKey="seeImageFileNameCMSPageStorefront"/>
        <seeElement selector="{{SlideOnFrontend.base('1')}}{{CmsWYSIWYGSection.imageSource(ImageUpload3.extension)}}" stepKey="seeImageExtensionCMSPageStorefront"/>
        <seeElement selector="{{SlideOnFrontend.base('1')}}{{CmsWYSIWYGSection.ImageAlt(ImageUpload3.content)}}" stepKey="seeImageAltCMSPageStorefront"/>
        <!-- Click Page Link Widget -->
        <comment userInput="Click Page Link Widget" stepKey="clickClickPageLinkWidget"/>
        <click selector="{{SlideOnFrontend.messageContentWidget('1', _ENV.MAGENTO_BASE_URL, $$createPreReqCMSPage.identifier$$)}}" stepKey="clickWidgetCMSPageStorefront"/>
        <wait time="3" stepKey="waitArbitraryTimeForPotentialNavigationToOccurStorefront"/>
        <seeCurrentUrlEquals url="{{_ENV.MAGENTO_BASE_URL}}$$createPreReqCMSPage.identifier$$" stepKey="seeThatUrlIsChangedToPageLinkWidgetUrlStorefront"/>
    </test>
    <test name="BlockRenderSlideItemThroughBlockContentTypeTinyMCE4WysiwygDisabledByDefault" extends="BlockRenderSlideItemThroughBlockContentTypeTinyMCE4WysiwygEnabledByDefault">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Slide Item Through Block Content Type With TinyMCE4 and Wysiwyg Disabled By Default"/>
            <description value="Verify that users are able to successfully render and use the slide item content type through the Block content type with TinyMCE4 and Wysiwyg Disabled By Default."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15212"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-slide"/>
            <group value="pagebuilder-slideItemPoster"/>
        </annotations>
        <before>
            <magentoCLI command="config:set cms/wysiwyg/enabled hidden" stepKey="configWYSIWYG"/>
        </before>
        <after>
            <magentoCLI command="config:set cms/wysiwyg/enabled enabled" stepKey="enableWYSIWYG" before="deleteCMSBlock"/>
        </after>
    </test>
    <test name="BlockRenderSlideItemThroughBlockContentTypeTinyMCE4WysiwygDisabledCompletely">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Slide Item Through Block Content Type With TinyMCE4 and Wysiwyg Disabled Completely"/>
            <description value="Verify that users are able to successfully render and use the slide item content type through the Block content type with TinyMCE4 and Wysiwyg Disabled Completely."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15213"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-slide"/>
            <group value="pagebuilder-slideItemPoster"/>
        </annotations>
        <before>
            <magentoCLI command="config:set cms/wysiwyg/enabled disabled" stepKey="configWYSIWYG"/>
            <magentoCLI command="config:set cms/wysiwyg/editor mage/adminhtml/wysiwyg/tiny_mce/tinymce4Adapter" stepKey="configTinyMCE"/>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <createData entity="_defaultCmsPage" stepKey="createPreReqCMSPage"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <magentoCLI command="config:set cms/wysiwyg/enabled enabled" stepKey="enableWYSIWYG"/>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createPreReqCMSPage" stepKey="deletePreReqCMSPage"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Slider -->
        <comment userInput="Add Slider" stepKey="commentAddSlider"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderSliderContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragSliderIntoStage">
            <argument name="contentType" value="PageBuilderSliderContentType"/>
        </actionGroup>
        <!-- Inline Edit: Add Text -->
        <comment userInput="Inline Edit: Add Text" stepKey="commentInlineEditAddText"/>
        <actionGroup ref="focusOnInlineTextAreaEditor" stepKey="focusOnInlineTextAreaEditor">
            <argument name="section" value="SlideOnBackend"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCEInlineWYSIWYGDisabled" stepKey="addTextToTinyMCEInline">
            <argument name="section" value="SlideOnBackend"/>
            <argument name="text" value="{{PageBuilderSlideItemContent_Slide1.value}}"/>
        </actionGroup>
        <!-- Inline Edit: Add Variable -->
        <actionGroup ref="focusOnInlineTextAreaEditor" stepKey="focusOnInlineTextAreaEditor2">
            <argument name="section" value="SlideOnBackend"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCEInlineWYSIWYGDisabled" stepKey="addVariableToTinyMCE">
            <argument name="section" value="SlideOnBackend"/>
            <argument name="text" value="{{PageBuilderTextArea_VariableBaseURL.editPanelValue}}"/>
        </actionGroup>
        <!-- Inline Edit: Add Widget -->
        <comment userInput="Inline Edit: Add Widget" stepKey="commentInlineEditAddWidget"/>
        <actionGroup ref="focusOnInlineTextAreaEditor" stepKey="focusOnInlineTextAreaEditor3">
            <argument name="section" value="SlideOnBackend"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCEInlineWYSIWYGDisabled" stepKey="addPageLinkWidgetToTinyMCE">
            <argument name="section" value="SlideOnBackend"/>
            <argument name="text" value="{{PageBuilderTextArea_WidgetCMSHomepageLink.editPanelValue}}"/>
        </actionGroup>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <actionGroup ref="assertTextareaContainsValue" stepKey="assertTextareaContainsValueCMSBlockStage">
            <argument name="selector" value="{{SlideOnBackend.textArea('1')}}"/>
            <argument name="value" value="{{PageBuilderSlideItemContent_Slide1.value}}{{PageBuilderTextArea_VariableBaseURL.editPanelValue}}{{PageBuilderTextArea_WidgetCMSHomepageLink.editPanelValue}}"/>
        </actionGroup>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeElement selector="{{SlideOnFrontend.messageContentTextArea('1', PageBuilderSlideItemContent_Slide1.value)}}" stepKey="seeTextCMSPageStage"/>
        <seeElement selector="{{SlideOnFrontend.messageContentTextArea('1', _ENV.MAGENTO_BASE_URL)}}" stepKey="seeVariableCMSPageStage"/>
        <seeElement selector="{{SlideOnFrontend.messageContentWidget('1', _ENV.MAGENTO_BASE_URL, PageBuilderTextArea_WidgetCMSHomepageLink.identifier)}}" stepKey="seeWidgetCMSPageStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeElement selector="{{SlideOnFrontend.messageContentTextArea('1', PageBuilderSlideItemContent_Slide1.value)}}" stepKey="seeTextCMSPageStorefront"/>
        <seeElement selector="{{SlideOnFrontend.messageContentTextArea('1', _ENV.MAGENTO_BASE_URL)}}" stepKey="seeVariableCMSPageStorefront"/>
        <seeElement selector="{{SlideOnFrontend.messageContentWidget('1', _ENV.MAGENTO_BASE_URL, PageBuilderTextArea_WidgetCMSHomepageLink.identifier)}}" stepKey="seeWidgetCMSPageStorefront"/>
        <!-- Click Page Link Widget -->
        <comment userInput="Click Page Link Widget" stepKey="clickClickPageLinkWidget"/>
        <click selector="{{SlideOnFrontend.messageContentWidget('1', _ENV.MAGENTO_BASE_URL, PageBuilderTextArea_WidgetCMSHomepageLink.identifier)}}" stepKey="clickWidgetCMSPageStorefront"/>
        <wait time="3" stepKey="waitArbitraryTimeForPotentialNavigationToOccurStorefront"/>
        <seeCurrentUrlEquals url="{{_ENV.MAGENTO_BASE_URL}}{{PageBuilderTextArea_WidgetCMSHomepageLink.identifier}}" stepKey="seeThatUrlIsChangedToPageLinkWidgetUrlStorefront"/>
    </test>
    <test name="BlockRenderColumnFullHeightAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Column Full Height Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the column content type with full height appearance and all attributes through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15221"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-column"/>
        </annotations>
        <before>
            <resizeWindow width="1280" height="1024" stepKey="resizeWindowToDesktop"/>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="navigateToMediaGallery" stepKey="navigateToMediaGallery"/>
            <actionGroup ref="NavigateToMediaFolderActionGroup" stepKey="navigateToDesktopImageFolder">
                <argument name="FolderName" value="{{PageBuilderBackgroundImage_JPG.path}}"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="deleteBackgroundImage">
                <argument name="Image" value="PageBuilderBackgroundImage_JPG"/>
            </actionGroup>
            <actionGroup ref="DeleteImageFromStorageActionGroup" stepKey="deleteMobileBackgroundImage">
                <argument name="Image" value="PageBuilderBackgroundMobileImage_GIF"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Columns -->
        <comment userInput="Add Columns" stepKey="commentAddColumns"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragColumnOntoStage">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <!-- Edit Column 1 -->
        <comment userInput="Edit Column 1" stepKey="commentEditColumn1"/>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditPanelColumn1">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setAppearanceColumn1">
            <argument name="property" value="PageBuilderColumnAppearanceProperty_FullHeight"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setBackgroundColorColumn1">
            <argument name="property" value="PageBuilderBackgroundColor_Plaintext_Green"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachBackgroundImageColumn1">
            <argument name="property" value="PageBuilderBackgroundImage_JPG"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachBackgroundMobileImageColumn1">
            <argument name="property" value="PageBuilderBackgroundMobileImage_GIF"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="setBackgroundPositionColumn1">
            <argument name="property" value="PageBuilderBackgroundPosition_Center"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setBackgroundSizeColumn1">
            <argument name="property" value="PageBuilderBackgroundSize_Auto"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="setBackgroundAttachmentColumn1">
            <argument name="property" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="conditionalClickSlideOutPanelFieldGeneral" stepKey="setBackgroundRepeatColumn1">
            <argument name="property" value="PageBuilderBackgroundRepeat_Enabled"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="setMinHeightColumn1">
            <argument name="property" value="PageBuilderMinHeightProperty_200"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setVerticalAlignmentColumn1">
            <argument name="property" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsColumn1"/>
        <!-- Edit Column 2 -->
        <comment userInput="Edit Column 2" stepKey="commentEditColumn2"/>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditPanelColumn2">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
            <argument name="contentTypeIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="setBackgroundColorColumn2">
            <argument name="property" value="PageBuilderBackgroundColor_RGB_Blue"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="setMinHeightColumn2">
            <argument name="property" value="PageBuilderMinHeightProperty_500"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsColumn2"/>
        <!-- Add Divider To Column 1 -->
        <comment userInput="Add Divider To Column 1" stepKey="commentAddDivider"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSectionDivider">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragDividerToColumn1">
            <argument name="contentType" value="PageBuilderDividerContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <actionGroup ref="validateColumnAppearanceFullHeight" stepKey="validateColumn1AppearanceCMSBlockStage"/>
        <actionGroup ref="validateBackgroundAttributes" stepKey="validateBackgroundCMSBlockStage">
            <argument name="section" value="ColumnOnBackend"/>
            <argument name="index" value="1"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSBlockStage">
            <argument name="section" value="ColumnOnBackend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateLayoutCMSBlockStage">
            <argument name="page" value="ColumnOnBackend"/>
            <argument name="index" value="1"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_200"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateColumn1HeightCMSBlockStage">
            <argument name="content" value="{{ColumnOnBackend.baseCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_500"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateDividerWidthPercentage" stepKey="validateDividerWidthCMSBlockStage">
            <argument name="page" value="DividerOnStage"/>
        </actionGroup>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <actionGroup ref="validateColumnAppearanceFullHeight" stepKey="validateColumn1AppearanceCMSPageStage">
            <argument name="section" value="ColumnOnFrontend"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateBackgroundCMSPageStage">
            <argument name="section" value="ColumnOnFrontend"/>
            <argument name="index" value="1"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStage">
            <argument name="section" value="ColumnOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateLayoutCMSPageStage">
            <argument name="page" value="ColumnOnFrontend"/>
            <argument name="index" value="1"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_200"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateColumn1HeightCMSPageStage">
            <argument name="content" value="{{ColumnOnFrontend.baseCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_500"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="verifyVerticalAlignmentCenterInBlock" stepKey="verifyVerticalAlignmentCenterCMSPageStage">
            <argument name="container" value="ColumnOnFrontend"/>
            <argument name="content" value="DividerOnStorefront"/>
            <argument name="containerIndex" value="1"/>
            <argument name="contentIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="validateDividerWidthPercentage" stepKey="validateDividerWidthCMSPageStage">
            <argument name="page" value="DividerOnStorefront"/>
            <argument name="expectedOffset" value="{{PageBuilderDividerLineThickness_Default.value}}*2"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <actionGroup ref="validateColumnAppearanceFullHeight" stepKey="validateColumn1AppearanceCMSPageStorefront">
            <argument name="section" value="ColumnOnFrontend"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundAttributesWithNoImage" stepKey="validateBackgroundCMSPageStorefront">
            <argument name="section" value="ColumnOnFrontend"/>
            <argument name="index" value="1"/>
            <argument name="backgroundColor" value="PageBuilderBackgroundColor_Plaintext_Green"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="backgroundPosition" value="PageBuilderBackgroundPosition_Center"/>
            <argument name="backgroundSize" value="PageBuilderBackgroundSize_Auto"/>
            <argument name="backgroundRepeat" value="PageBuilderBackgroundRepeat_Enabled"/>
            <argument name="backgroundAttachment" value="PageBuilderBackgroundAttachment_Fixed"/>
        </actionGroup>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStorefront">
            <argument name="section" value="ColumnOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundImage_JPG"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateLayoutStylesWithAllUpdated" stepKey="validateLayoutCMSPageStorefront">
            <argument name="page" value="ColumnOnFrontend"/>
            <argument name="index" value="1"/>
            <argument name="minHeight" value="PageBuilderMinHeightProperty_200"/>
            <argument name="verticalAlignContainer" value="PageBuilderVerticalAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateColumn1HeightCMSPageStorefront">
            <argument name="content" value="{{ColumnOnFrontend.baseCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_500"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="verifyVerticalAlignmentCenterInBlock" stepKey="verifyVerticalAlignmentCenterCMSPageStorefront">
            <argument name="container" value="ColumnOnFrontend"/>
            <argument name="content" value="DividerOnStorefront"/>
            <argument name="containerIndex" value="1"/>
            <argument name="contentIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="validateDividerWidthPercentage" stepKey="validateDividerWidthCMSPageStorefront">
            <argument name="page" value="DividerOnStorefront"/>
        </actionGroup>
        <!-- Validate CMS Page Storefront Mobile -->
        <comment userInput="Validate CMS Page Storefront Mobile" stepKey="commentValidateCMSPageStorefrontMobile"/>
        <resizeWindow width="767" height="1000" stepKey="resizeWindowToMobileCMSPageStorefront"/>
        <reloadPage stepKey="reloadPage"/>
        <waitForPageLoad stepKey="waitForReload"/>
        <actionGroup ref="validateBackgroundImageContainer" stepKey="validateBackgroundImageCMSPageStorefrontMobile">
            <argument name="section" value="ColumnOnFrontend"/>
            <argument name="backgroundImage" value="PageBuilderBackgroundMobileImage_GIF"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateColumn1HeightCMSPageStorefrontMobile">
            <argument name="content" value="{{ColumnOnFrontend.baseCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="verifyVerticalAlignmentCenterInBlock" stepKey="verifyVerticalAlignmentCenterCMSPageStorefrontMobile">
            <argument name="container" value="ColumnOnFrontend"/>
            <argument name="content" value="DividerOnStorefront"/>
            <argument name="containerIndex" value="1"/>
            <argument name="contentIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="validateDividerWidthPercentage" stepKey="validateDividerWidthCMSPageStorefrontMobile">
            <argument name="page" value="DividerOnStorefront"/>
        </actionGroup>
    </test>
    <test name="BlockRenderColumnTopAlignmentAppearanceThroughBlockContentType" extends="BlockRenderColumnFullHeightAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Column Top Alignment Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the column content type with top alignment appearance and all attributes through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15222"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-column"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setAppearanceColumn1">
            <argument name="property" value="PageBuilderColumnAppearanceProperty_Top"/>
        </actionGroup>
        <actionGroup ref="validateColumnAppearanceTopAligned" stepKey="validateColumn1AppearanceCMSBlockStage">
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateColumn1HeightCMSBlockStage">
            <argument name="content" value="{{ColumnOnBackend.baseCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateColumnAppearanceTopAligned" stepKey="validateColumn1AppearanceCMSPageStage">
            <argument name="section" value="ColumnOnFrontend"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateColumn1HeightCMSPageStage">
            <argument name="content" value="{{ColumnOnFrontend.baseCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateColumnAppearanceTopAligned" stepKey="validateColumn1AppearanceCMSPageStorefront">
            <argument name="section" value="ColumnOnFrontend"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateColumn1HeightCMSPageStorefront">
            <argument name="content" value="{{ColumnOnFrontend.baseCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
            <argument name="index" value="1"/>
        </actionGroup>
    </test>
    <test name="BlockRenderColumnCenterAlignmentAppearanceThroughBlockContentType" extends="BlockRenderColumnFullHeightAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Column Center Alignment Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the column content type with center alignment appearance and all attributes through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15223"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-column"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setAppearanceColumn1">
            <argument name="property" value="PageBuilderColumnAppearanceProperty_Center"/>
        </actionGroup>
        <actionGroup ref="validateColumnAppearanceCenterAligned" stepKey="validateColumn1AppearanceCMSBlockStage">
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateColumn1HeightCMSBlockStage">
            <argument name="content" value="{{ColumnOnBackend.baseCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateColumnAppearanceCenterAligned" stepKey="validateColumn1AppearanceCMSPageStage">
            <argument name="section" value="ColumnOnFrontend"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateColumn1HeightCMSPageStage">
            <argument name="content" value="{{ColumnOnFrontend.baseCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateColumnAppearanceCenterAligned" stepKey="validateColumn1AppearanceCMSPageStorefront">
            <argument name="section" value="ColumnOnFrontend"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateColumn1HeightCMSPageStorefront">
            <argument name="content" value="{{ColumnOnFrontend.baseCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
            <argument name="index" value="1"/>
        </actionGroup>
    </test>
    <test name="BlockRenderColumnBottomAlignmentAppearanceThroughBlockContentType" extends="BlockRenderColumnFullHeightAppearanceThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Render Column Bottom Alignment Appearance Through Block Content Type"/>
            <description value="Verify that users are able to successfully render and use the column content type with bottom alignment appearance and all attributes through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15224"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-column"/>
        </annotations>
        <actionGroup ref="chooseVisualSelectOption" stepKey="setAppearanceColumn1">
            <argument name="property" value="PageBuilderColumnAppearanceProperty_Bottom"/>
        </actionGroup>
        <actionGroup ref="validateColumnAppearanceBottomAligned" stepKey="validateColumn1AppearanceCMSBlockStage">
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateColumn1HeightCMSBlockStage">
            <argument name="content" value="{{ColumnOnBackend.baseCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateColumnAppearanceBottomAligned" stepKey="validateColumn1AppearanceCMSPageStage">
            <argument name="section" value="ColumnOnFrontend"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateColumn1HeightCMSPageStage">
            <argument name="content" value="{{ColumnOnFrontend.baseCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="validateColumnAppearanceBottomAligned" stepKey="validateColumn1AppearanceCMSPageStorefront">
            <argument name="section" value="ColumnOnFrontend"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
        </actionGroup>
        <actionGroup ref="validateContentTypeHeightEqualToMinHeight" stepKey="validateColumn1HeightCMSPageStorefront">
            <argument name="content" value="{{ColumnOnFrontend.baseCSS}}"/>
            <argument name="height" value="PageBuilderMinHeightProperty_200"/>
            <argument name="index" value="1"/>
        </actionGroup>
    </test>
    <test name="BlockRenderColumnDragAndDropMultipleColumnsResizingThroughBlockContentType">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Block Content"/>
            <title value="Validate Column Width When Rendered Through Block Content Type"/>
            <description value="Verify that column widths are rendered correctly when rendered through the Block content type."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-15225"/>
            <useCaseId value="MC-13769"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-block"/>
            <group value="pagebuilder-block-content"/>
            <group value="pagebuilder-column"/>
        </annotations>
        <before>
            <createData entity="_emptyCmsPage" stepKey="createCMSPage"/>
            <createData entity="_emptyCmsBlock" stepKey="createCMSBlock"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToCreatedCMSBlockPage" stepKey="navigateToCreatedCMSBlockPage1">
                <argument name="CMSBlockPage" value="$$createCMSBlock$$"/>
            </actionGroup>
        </before>
        <after>
            <deleteData createDataKey="createCMSBlock" stepKey="deleteCMSBlock"/>
            <deleteData createDataKey="createCMSPage" stepKey="deleteCMSPage"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <!-- Add Column -->
        <comment userInput="Add Column" stepKey="commentAddColumn"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragColumnOntoStage">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragNewColumnToFirstColumn">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="1"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragNewColumnToSecondColumn">
            <argument name="contentType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetType" value="PageBuilderColumnContentType"/>
            <argument name="containerTargetIndex" value="2"/>
            <argument name="contentTypeIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="saveCMSBlock" stepKey="saveCMSBlock"/>
        <!-- Validate CMS Block Stage -->
        <comment userInput="Validate CMS Block Stage" stepKey="commentValidateCMSBlockStage"/>
        <seeNumberOfElements selector="{{ColumnOnBackend.allColumns}}" userInput="4" stepKey="seeNumberOfColumnsCMSBlockStage"/>
        <seeElement selector="{{ColumnOnBackend.displayLabel('1','1/12')}}" stepKey="findAfterLabelColumn1CMSBlockStage"/>
        <seeElement selector="{{ColumnOnBackend.displayLabel('2','1/12')}}" stepKey="findAfterLabelColumn2CMSBlockStage"/>
        <seeElement selector="{{ColumnOnBackend.displayLabel('3','4/12')}}" stepKey="findAfterLabelColumn3CMSBlockStage"/>
        <seeElement selector="{{ColumnOnBackend.displayLabel('4','6/12')}}" stepKey="findAfterLabelColumn4CMSBlockStage"/>
        <executeJS function="return document.querySelector('{{ColumnOnBackend.columnX('1')}}').clientWidth" stepKey="columnOneWidthCMSBlockStage"/>
        <executeJS function="return document.querySelector('{{ColumnOnBackend.columnX('2')}}').clientWidth" stepKey="columnTwoWidthCMSBlockStage"/>
        <executeJS function="return document.querySelector('{{ColumnOnBackend.columnX('3')}}').clientWidth" stepKey="columnThreeWidthCMSBlockStage"/>
        <executeJS function="return document.querySelector('{{ColumnOnBackend.columnX('4')}}').clientWidth" stepKey="columnFourWidthCMSBlockStage"/>
        <executeJS function="return Math.round({$columnTwoWidthCMSBlockStage}/{$columnOneWidthCMSBlockStage})" stepKey="columnRatioCMSBlockStage"/>
        <assertEquals stepKey="assertRatioIsCorrectCMSBlockStage">
            <expectedResult type="int">1</expectedResult>
            <actualResult type="variable">columnRatioCMSBlockStage</actualResult>
        </assertEquals>
        <executeJS function="return Math.round({$columnThreeWidthCMSBlockStage}/{$columnOneWidthCMSBlockStage})" stepKey="columnRatio2CMSBlockStage"/>
        <assertEquals stepKey="assertRatioIsCorrect2CMSBlockStage">
            <expectedResult type="int">4</expectedResult>
            <actualResult type="variable">columnRatio2CMSBlockStage</actualResult>
        </assertEquals>
        <executeJS function="return Math.round({$columnFourWidthCMSBlockStage}/{$columnOneWidthCMSBlockStage})" stepKey="columnRatio3CMSBlockStage"/>
        <assertEquals stepKey="assertRatioIsCorrect3CMSBlockStage">
            <expectedResult type="int">6</expectedResult>
            <actualResult type="variable">columnRatio3CMSBlockStage</actualResult>
        </assertEquals>
        <executeJS function="return Math.round({$columnOneWidthCMSBlockStage}+{$columnTwoWidthCMSBlockStage}+{$columnThreeWidthCMSBlockStage}+{$columnFourWidthCMSBlockStage})" stepKey="totalColumnWidthCMSBlockStage"/>
        <executeJS function="return Math.round({{RowOnStage.rowWidthJS('1')}}-{{PageBuilderPaddingPropertyRowDefault.paddingLeft}}-{{PageBuilderPaddingPropertyRowDefault.paddingRight}})" stepKey="rowWidthCMSBlockStage"/>
        <executeJS function="return Math.abs({$totalColumnWidthCMSBlockStage}-{$rowWidthCMSBlockStage})" stepKey="widthDifferenceCMSBlockStage"/>
        <assertLessThanOrEqual stepKey="assertWidthOfAllColumnsCMSBlockStage">
            <expectedResult type="int">2</expectedResult>
            <actualResult type="variable">widthDifferenceCMSBlockStage</actualResult>
        </assertLessThanOrEqual>
        <!-- Add Block to CMS Page -->
        <comment userInput="Add Block to CMS Page" stepKey="commentAddBlockToCMSPage"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSPage">
            <argument name="CMSPage" value="$$createCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPanelAddContentMenuSection">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragBlockIntoStage">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditAfterDropBlock">
            <argument name="contentType" value="PageBuilderBlockContentType"/>
        </actionGroup>
        <actionGroup ref="searchBlockInGrid" stepKey="searchBlockInGrid">
            <argument name="block" value="$$createCMSBlock$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettingsBlock"/>
        <!-- Validate CMS Page Stage -->
        <comment userInput="Validate CMS Page Stage" stepKey="commentValidateCMSPageStage"/>
        <seeNumberOfElements selector="{{ColumnOnFrontend.allColumns}}" userInput="4" stepKey="seeNumberOfColumnsCMSPageStage"/>
        <executeJS function="return document.querySelector('{{ColumnOnFrontend.columnX('1')}}').clientWidth" stepKey="columnOneWidthCMSPageStage"/>
        <executeJS function="return document.querySelector('{{ColumnOnFrontend.columnX('2')}}').clientWidth" stepKey="columnTwoWidthCMSPageStage"/>
        <executeJS function="return document.querySelector('{{ColumnOnFrontend.columnX('3')}}').clientWidth" stepKey="columnThreeWidthCMSPageStage"/>
        <executeJS function="return document.querySelector('{{ColumnOnFrontend.columnX('4')}}').clientWidth" stepKey="columnFourWidthCMSPageStage"/>
        <executeJS function="return Math.round({$columnTwoWidthCMSPageStage}/{$columnOneWidthCMSPageStage})" stepKey="columnRatioCMSPageStage"/>
        <assertEquals stepKey="assertRatioIsCorrectCMSPageStage">
            <expectedResult type="int">1</expectedResult>
            <actualResult type="variable">columnRatioCMSPageStage</actualResult>
        </assertEquals>
        <executeJS function="return Math.round({$columnThreeWidthCMSPageStage}/{$columnOneWidthCMSPageStage})" stepKey="columnRatio2CMSPageStage"/>
        <assertEquals stepKey="assertRatioIsCorrect2CMSPageStage">
            <expectedResult type="int">4</expectedResult>
            <actualResult type="variable">columnRatio2CMSPageStage</actualResult>
        </assertEquals>
        <executeJS function="return Math.round({$columnFourWidthCMSPageStage}/{$columnOneWidthCMSPageStage})" stepKey="columnRatio3CMSPageStage"/>
        <assertEquals stepKey="assertRatioIsCorrect3CMSPageStage">
            <expectedResult type="int">6</expectedResult>
            <actualResult type="variable">columnRatio3CMSPageStage</actualResult>
        </assertEquals>
        <executeJS function="return Math.round({$columnOneWidthCMSPageStage}+{$columnTwoWidthCMSPageStage}+{$columnThreeWidthCMSPageStage}+{$columnFourWidthCMSPageStage})" stepKey="totalColumnWidthCMSPageStage"/>
        <executeJS function="return Math.round({{RowOnStorefront.rowWidthJS('2')}}-{{PageBuilderPaddingPropertyRowDefault.paddingLeft}}-{{PageBuilderPaddingPropertyRowDefault.paddingRight}})" stepKey="rowWidthCMSPageStage"/>
        <executeJS function="return Math.abs({$totalColumnWidthCMSPageStage}-{$rowWidthCMSPageStage})" stepKey="widthDifferenceCMSPageStage"/>
        <assertLessThanOrEqual stepKey="assertWidthOfAllColumnsCMSPageStage">
            <expectedResult type="int">2</expectedResult>
            <actualResult type="variable">widthDifferenceCMSPageStage</actualResult>
        </assertLessThanOrEqual>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Validate CMS Page Storefront -->
        <comment userInput="Validate CMS Page Storefront" stepKey="commentValidateCMSPageStorefront"/>
        <actionGroup ref="navigateToStorefrontForCreatedPage" stepKey="navigateToCMSPageStorefront">
            <argument name="page" value="$$createCMSPage.identifier$$"/>
        </actionGroup>
        <seeNumberOfElements selector="{{ColumnOnFrontend.allColumns}}" userInput="4" stepKey="seeNumberOfColumnsCMSPageStorefront"/>
        <executeJS function="return document.querySelector('{{ColumnOnFrontend.columnX('1')}}').clientWidth" stepKey="columnOneWidthCMSPageStorefront"/>
        <executeJS function="return document.querySelector('{{ColumnOnFrontend.columnX('2')}}').clientWidth" stepKey="columnTwoWidthCMSPageStorefront"/>
        <executeJS function="return document.querySelector('{{ColumnOnFrontend.columnX('3')}}').clientWidth" stepKey="columnThreeWidthCMSPageStorefront"/>
        <executeJS function="return document.querySelector('{{ColumnOnFrontend.columnX('4')}}').clientWidth" stepKey="columnFourWidthCMSPageStorefront"/>
        <executeJS function="return Math.round({$columnTwoWidthCMSPageStorefront}/{$columnOneWidthCMSPageStorefront})" stepKey="columnRatioCMSPageStorefront"/>
        <assertEquals stepKey="assertRatioIsCorrectCMSPageStorefront">
            <expectedResult type="int">1</expectedResult>
            <actualResult type="variable">columnRatioCMSPageStorefront</actualResult>
        </assertEquals>
        <executeJS function="return Math.round({$columnThreeWidthCMSPageStorefront}/{$columnOneWidthCMSPageStorefront})" stepKey="columnRatio2CMSPageStorefront"/>
        <assertEquals stepKey="assertRatioIsCorrect2CMSPageStorefront">
            <expectedResult type="int">4</expectedResult>
            <actualResult type="variable">columnRatio2CMSPageStorefront</actualResult>
        </assertEquals>
        <executeJS function="return Math.round({$columnFourWidthCMSPageStorefront}/{$columnOneWidthCMSPageStorefront})" stepKey="columnRatio3CMSPageStorefront"/>
        <assertEquals stepKey="assertRatioIsCorrect3CMSPageStorefront">
            <expectedResult type="int">6</expectedResult>
            <actualResult type="variable">columnRatio3CMSPageStorefront</actualResult>
        </assertEquals>
        <executeJS function="return Math.round({$columnOneWidthCMSPageStorefront}+{$columnTwoWidthCMSPageStorefront}+{$columnThreeWidthCMSPageStorefront}+{$columnFourWidthCMSPageStorefront})" stepKey="totalColumnWidthCMSPageStorefront"/>
        <executeJS function="return Math.round({{RowOnStorefront.rowWidthJS('2')}}-{{PageBuilderPaddingPropertyRowDefault.paddingLeft}}-{{PageBuilderPaddingPropertyRowDefault.paddingRight}})" stepKey="rowWidthCMSPageStorefront"/>
        <executeJS function="return Math.abs({$totalColumnWidthCMSPageStorefront}-{$rowWidthCMSPageStorefront})" stepKey="widthDifferenceCMSPageStorefront"/>
        <assertLessThanOrEqual stepKey="assertWidthOfAllColumnsCMSPageStorefront">
            <expectedResult type="int">2</expectedResult>
            <actualResult type="variable">widthDifferenceCMSPageStorefront</actualResult>
        </assertLessThanOrEqual>
    </test>
</tests>
