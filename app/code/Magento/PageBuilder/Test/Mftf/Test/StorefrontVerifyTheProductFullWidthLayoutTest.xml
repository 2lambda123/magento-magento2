<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright © Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="StorefrontVerifyTheProductFullWidthLayoutTest">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Catalog Products"/>
            <title value="Verify the Product – Full Width layout on the storefront with all product content"/>
            <description value="Verify the Product – Full Width layout on the storefront with all product content"/>
            <severity value="CRITICAL"/>
            <useCaseId value=""/>
            <testCaseId value="MC-3317"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-layout"/>
            <group value="pagebuilder-fullwidth"/>
            <group value="pagebuilder-catalog-product"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createProduct1">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_defaultProduct" stepKey="createProduct2">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_defaultProduct" stepKey="createProduct3">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_defaultProduct" stepKey="createProduct4">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_defaultProduct" stepKey="createProduct5">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_defaultProduct" stepKey="createProduct6">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData stepKey="createPageBuilderAttribute" entity="productAttributePageBuilder"/>
            <resizeWindow width="1920" height="1024" stepKey="resizeWindow"/>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
        </before>
        <after>
            <resizeWindow width="1280" height="1024" stepKey="resizeWindowToDesktop"/>
            <deleteData createDataKey="createProduct1" stepKey="deleteCreatedProduct1"/>
            <deleteData createDataKey="createProduct2" stepKey="deleteCreatedProduct2"/>
            <deleteData createDataKey="createProduct3" stepKey="deleteCreatedProduct3"/>
            <deleteData createDataKey="createProduct4" stepKey="deleteCreatedProduct4"/>
            <deleteData createDataKey="createProduct5" stepKey="deleteCreatedProduct5"/>
            <deleteData createDataKey="createProduct6" stepKey="deleteCreatedProduct6"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deleteCreatedCategory"/>
            <deleteData createDataKey="createPageBuilderAttribute" stepKey="deletePreReqProductAttribute"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>

        <!-- Navigate to Stores > Attributes > Product-->
        <actionGroup ref="AdminOpenProductAttributePageActionGroup" stepKey="openProductAttributePage"/>
        <actionGroup ref="NavigateToCreatedProductAttributeActionGroup" stepKey="navigateToCreatedProductAttribute">
            <argument name="ProductAttribute" value="$$createPageBuilderAttribute$$"/>
        </actionGroup>

        <!-- Input value for Default Label and "Catalog Input Type for Store Owner" -->
        <actionGroup ref="AdminFillProductAttributePropertiesActionGroup" stepKey="fillAttributeProperties">
            <argument name="attributeName" value="{{productAttributePageBuilder.frontend_label}}"/>
            <argument name="attributeType" value="{{productAttributePageBuilder.frontend_input_admin}}"/>
        </actionGroup>

        <!-- Set advanced attribute properties -->
        <actionGroup ref="AdminNavigateToProductAttributeAdvancedSectionActionGroup" stepKey="goToAdvancedSection"/>
        <selectOption selector="{{AdvancedAttributePropertiesSection.AddToColumnOptions}}" userInput="No" stepKey="addColumnToOptions"/>

        <!-- Click on "Storefront Properties" tab on left menu -->
        <click selector="{{StorefrontPropertiesSection.StoreFrontPropertiesTab}}" stepKey="clickStorefrontPropertiesTab"/>
        <waitForPageLoad stepKey="waitForPageLoad"/>

        <!-- Selection for "Visible on Catalog Pages on Storefront" -->
        <selectOption selector="{{StorefrontPropertiesSection.visibleOnCatalogPagesOnStorefront}}" userInput="Yes" stepKey="enableVisibleOnStorefront"/>

        <!-- Save Product Attribute -->
        <actionGroup ref="SaveProductAttributeActionGroup" stepKey="saveAttribute"/>

        <!-- Go to Store > Attribute Set -->
        <actionGroup ref="AdminOpenAttributeSetGridPageActionGroup" stepKey="openAttributeSetPage"/>

        <!-- From grid, click on attribute set Default -->
        <actionGroup ref="AdminOpenAttributeSetByNameActionGroup" stepKey="openDefaultAttributeSet"/>

        <!-- Add Product Attribute to Default attribute by dragging and dropping this to the 'Content' folder. Then Save. -->
        <actionGroup ref="AssignAttributeToGroupActionGroup" stepKey="assignAttributeToGroup">
            <argument name="group" value="Content"/>
            <argument name="attribute" value="$$createPageBuilderAttribute.attribute_code$$"/>
        </actionGroup>
        <actionGroup ref="SaveAttributeSetActionGroup" stepKey="saveAttributeSet"/>

        <!-- Search 'short_description' attribute in product attribute grid and change 'Catalog Input Type for Store Owner' to Page Builder -->
        <actionGroup ref="OpenProductAttributeFromSearchResultInGridActionGroup" stepKey="openWeightProductAttributeInAdmin">
            <argument name="productAttributeCode" value="short_description"/>
        </actionGroup>
        <selectOption selector="{{AttributePropertiesSection.InputType}}" userInput="Page Builder" stepKey="selectPageBuilder"/>
        <!-- Save Product Attribute -->
        <actionGroup ref="SaveProductAttributeActionGroup" stepKey="saveAttribute2"/>

        <!-- Flush Magento Cache -->
        <actionGroup ref="ClearCacheActionGroup" stepKey="clearCache" />

        <!-- Create a new product -->
        <amOnPage url="{{AdminProductCreatePage.url(AddToDefaultSet.attributeSetId, 'simple')}}" stepKey="navigateToNewProduct"/>
        <waitForPageLoad stepKey="waitForProductPage"/>
        <!-- Fill the remaining product fields accordingly -->
        <actionGroup ref="FillMainProductFormActionGroup" stepKey="fillMainProductForm">
            <argument name="product" value="SimpleProduct"/>
        </actionGroup>

        <actionGroup ref="ExpandAdminProductSectionActionGroup" stepKey="expandContentSection"/>

        <!-- Edit Description-->
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForDescription">
            <argument name="pageBuilderArea" value="{{PageBuilderProductAttribute.PageBuilderArea('description')}}"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragRowToRootContainer">
            <argument name="contentType" value="PageBuilderRowContentType"/>
            <argument name="containerTargetType" value="PageBuilderRootContainerContentType"/>
            <argument name="containerTargetIndex" value="3"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuOnStage">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearance">
            <argument name="property" value="PageBuilderRowAppearance_FullWidth"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBackgroundColor">
            <argument name="property" value="PageBuilderBackgroundColor_Sprout"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragHeadingIntoStage">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="enterHeadingOnStage" stepKey="enterHeadingOnStage">
            <argument name="headingText" value="PageBuilderHeadingTextSample1"/>
        </actionGroup>
        <actionGroup ref="clickOutsideLiveEditHeading" stepKey="clickOutsideLiveEditHeading">
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreen1"/>

        <!-- Edit Short Description -->
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForShortDescription">
            <argument name="attributeCode" value="short_description"/>
            <argument name="pageBuilderArea" value="{{PageBuilderProductAttribute.PageBuilderArea('short_description')}}"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragRowToRootContainer2">
            <argument name="contentType" value="PageBuilderRowContentType"/>
            <argument name="containerTargetType" value="PageBuilderRootContainerContentType"/>
            <argument name="containerTargetIndex" value="2"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuOnStage2">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearance2">
            <argument name="property" value="PageBuilderRowAppearance_FullWidth"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBackgroundColor2">
            <argument name="property" value="PageBuilderBackgroundColor_TonysPink"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings2"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection2">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragHeadingIntoStage2">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="enterHeadingOnStage" stepKey="enterHeadingOnStage2">
            <argument name="headingText" value="PageBuilderHeadingTextSample2"/>
        </actionGroup>
        <actionGroup ref="clickOutsideLiveEditHeading" stepKey="clickOutsideLiveEditHeading2">
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreen2"/>

        <!-- Edit Custom Page Builder Attribute -->
        <actionGroup ref="openPageBuilderForAttribute" stepKey="openPageBuilderForCustomPageBuilderAttribute">
            <argument name="attributeCode" value="$$createPageBuilderAttribute.attribute_code$$"/>
            <argument name="pageBuilderArea" value="{{PageBuilderProductAttribute.PageBuilderArea($$createPageBuilderAttribute.attribute_code$$)}}"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToStage" stepKey="dragRowToRootContainer3">
            <argument name="contentType" value="PageBuilderRowContentType"/>
            <argument name="containerTargetType" value="PageBuilderRootContainerContentType"/>
        </actionGroup>

        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openEditMenuOnStage3">
            <argument name="contentType" value="PageBuilderRowContentType"/>
        </actionGroup>
        <actionGroup ref="chooseVisualSelectOption" stepKey="enterAppearance3">
            <argument name="property" value="PageBuilderRowAppearance_FullWidth"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBackgroundColor3">
            <argument name="property" value="PageBuilderBackgroundColor_Cornflower"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings3"/>
        <actionGroup ref="expandPageBuilderPanelMenuSection" stepKey="expandPageBuilderPanelMenuSection3">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="dragContentTypeToContainer" stepKey="dragHeadingIntoStage3">
            <argument name="contentType" value="PageBuilderHeadingContentType"/>
        </actionGroup>
        <actionGroup ref="enterHeadingOnStage" stepKey="enterHeadingOnStage3">
            <argument name="headingText" value="PageBuilderHeadingTextSample3"/>
        </actionGroup>
        <actionGroup ref="clickOutsideLiveEditHeading" stepKey="clickOutsideLiveEditHeading3">
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="exitPageBuilderFullScreen" stepKey="exitPageBuilderFullScreen3"/>

        <!-- Add Product Image -->
        <actionGroup ref="AddProductImageActionGroup" stepKey="addProductImage"/>

        <!-- Add Related Products and Up-Sells -->
        <actionGroup ref="AddRelatedProductBySkuActionGroup" stepKey="addRelatedProduct1">
            <argument name="sku" value="$$createProduct1.sku$$"/>
        </actionGroup>
        <actionGroup ref="AddRelatedProductBySkuActionGroup" stepKey="addRelatedProduct2">
            <argument name="sku" value="$$createProduct2.sku$$"/>
        </actionGroup>

        <actionGroup ref="AddUpSellProductBySkuActionGroup" stepKey="addUpSellProduct1">
            <argument name="sku" value="$$createProduct3.sku$$"/>
        </actionGroup>
        <actionGroup ref="AddUpSellProductBySkuActionGroup" stepKey="addUpSellProduct2">
            <argument name="sku" value="$$createProduct4.sku$$"/>
        </actionGroup>

        <!-- Save product after adding related and upsell -->
        <actionGroup ref="AdminProductFormSaveActionGroup" stepKey="clickSaveButton"/>
        <seeElement selector="{{AdminCategoryMessagesSection.SuccessMessage}}" stepKey="verifySaveMessageSuccessIsShown"/>

        <actionGroup ref="AddCrossSellProductBySkuActionGroup" stepKey="addCrossSellProduct1">
            <argument name="sku" value="$$createProduct5.sku$$"/>
        </actionGroup>
        <actionGroup ref="AddCrossSellProductBySkuActionGroup" stepKey="addCrossSellProduct2">
            <argument name="sku" value="$$createProduct6.sku$$"/>
        </actionGroup>

        <!-- Use Full Width layout -->
        <actionGroup ref="SetLayoutActionGroup" stepKey="setFullWidthLayout">
            <argument name="designSection" value="ProductDesignSection"/>
            <argument name="layoutOption" value="PageBuilderFullWidthLayout.product"/>
        </actionGroup>

        <actionGroup ref="AdminProductFormSaveActionGroup" stepKey="clickSaveButton2"/>
        <seeElement selector="{{AdminCategoryMessagesSection.SuccessMessage}}" stepKey="verifySaveMessageSuccessIsShown2"/>

        <!-- Validate in Storefront - Full screen -->
        <amOnPage url="{{SimpleProduct.name}}.html" stepKey="navigateToProductPage"/>
        <waitForPageLoad stepKey="waitForPageLoad1"/>

        <!-- Assert sections on page are in correct order -->
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.shortDescription}}')[0].getBoundingClientRect().y" stepKey="shortDescriptionPosition"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.description}}')[0].getBoundingClientRect().y" stepKey="descriptionPosition"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.attributes}}')[0].getBoundingClientRect().y" stepKey="attributesPosition"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.related}}')[0].getBoundingClientRect().y" stepKey="relatedPosition"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.upsell}}')[0].getBoundingClientRect().y" stepKey="upsellPosition"/>

        <assertGreaterThan stepKey="assertDescriptionBelowShortDescription">
            <expectedResult type="variable">shortDescriptionPosition</expectedResult>
            <actualResult type="variable">descriptionPosition</actualResult>
        </assertGreaterThan>

        <assertGreaterThan stepKey="assertAttributesBelowDescription">
            <expectedResult type="variable">descriptionPosition</expectedResult>
            <actualResult type="variable">attributesPosition</actualResult>
        </assertGreaterThan>

        <assertGreaterThan stepKey="assertRelatedBelowAttributes">
            <expectedResult type="variable">attributesPosition</expectedResult>
            <actualResult type="variable">relatedPosition</actualResult>
        </assertGreaterThan>

        <assertGreaterThan stepKey="assertUpsellBelowRelated">
            <expectedResult type="variable">relatedPosition</expectedResult>
            <actualResult type="variable">upsellPosition</actualResult>
        </assertGreaterThan>

        <!-- Validate in Storefront - 1600px width -->
        <resizeWindow width="1600" height="1024" stepKey="resizeWindowWidth"/>

        <!-- Assert sections on page are in correct order -->
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.shortDescription}}')[0].getBoundingClientRect().y" stepKey="shortDescriptionPosition1"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.description}}')[0].getBoundingClientRect().y" stepKey="descriptionPosition1"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.attributes}}')[0].getBoundingClientRect().y" stepKey="attributesPosition1"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.related}}')[0].getBoundingClientRect().y" stepKey="relatedPosition1"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.upsell}}')[0].getBoundingClientRect().y" stepKey="upsellPosition1"/>

        <assertGreaterThan stepKey="assertDescriptionBelowShortDescription1">
            <expectedResult type="variable">shortDescriptionPosition1</expectedResult>
            <actualResult type="variable">descriptionPosition1</actualResult>
        </assertGreaterThan>

        <assertGreaterThan stepKey="assertAttributesBelowDescription1">
            <expectedResult type="variable">descriptionPosition1</expectedResult>
            <actualResult type="variable">attributesPosition1</actualResult>
        </assertGreaterThan>

        <assertGreaterThan stepKey="assertRelatedBelowAttributes1">
            <expectedResult type="variable">attributesPosition1</expectedResult>
            <actualResult type="variable">relatedPosition1</actualResult>
        </assertGreaterThan>

        <assertGreaterThan stepKey="assertUpsellBelowRelated1">
            <expectedResult type="variable">relatedPosition1</expectedResult>
            <actualResult type="variable">upsellPosition1</actualResult>
        </assertGreaterThan>

        <!-- Validate in Storefront - 600px width -->
        <resizeWindow width="600" height="1000" stepKey="resizeWindowWidth2"/>

        <!-- Assert sections on page are in correct order -->
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.shortDescription}}')[0].getBoundingClientRect().y" stepKey="shortDescriptionPosition2"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.description}}')[0].getBoundingClientRect().y" stepKey="descriptionPosition2"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.attributes}}')[0].getBoundingClientRect().y" stepKey="attributesPosition2"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.related}}')[0].getBoundingClientRect().y" stepKey="relatedPosition2"/>
        <executeJS function="return document.querySelectorAll('{{StorefrontProductFullWidth.upsell}}')[0].getBoundingClientRect().y" stepKey="upsellPosition2"/>

        <assertGreaterThan stepKey="assertDescriptionBelowShortDescription2">
            <expectedResult type="variable">shortDescriptionPosition2</expectedResult>
            <actualResult type="variable">descriptionPosition2</actualResult>
        </assertGreaterThan>

        <assertGreaterThan stepKey="assertAttributesBelowDescription2">
            <expectedResult type="variable">descriptionPosition2</expectedResult>
            <actualResult type="variable">attributesPosition2</actualResult>
        </assertGreaterThan>

        <assertGreaterThan stepKey="assertRelatedBelowAttributes2">
            <expectedResult type="variable">attributesPosition2</expectedResult>
            <actualResult type="variable">relatedPosition2</actualResult>
        </assertGreaterThan>

        <assertGreaterThan stepKey="assertUpsellBelowRelated2">
            <expectedResult type="variable">relatedPosition2</expectedResult>
            <actualResult type="variable">upsellPosition2</actualResult>
        </assertGreaterThan>
    </test>
</tests>
