<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="../../../../../../vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/Test/etc/testSchema.xsd">
    <test name="TabAdvancedSectionDefaults">
        <annotations>
            <features value="PageBuilder - Tabs"/>
            <stories value="MAGETWO-71593: Add new Tab to Tabs from the Stage and Tab configuration"/>
            <title value="Tab advanced configuration has default properties"/>
            <description value="New tab has default values on Advanced section"/>
            <severity value="CRITICAL"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-tabs"/>
            <testCaseId value="MAGETWO-90003"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="turnOnPageBuilder" after="enableWYSIWYG"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentBlockType" value="PageBuilderTabsContentBlock"/>
        </actionGroup>
        <!--Add Tabs to Stage -->
        <click selector="{{PageBuilderActionsSection.interactiveGroup}}" stepKey="clickInteractiveGroup"/>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragTabsIntoStage">
            <argument name="contentBlockType" value="PageBuilderTabsContentBlock"/>
        </actionGroup>
        <waitForElementVisible selector="{{TabOnStage.tabOptionsEdit}}" stepKey="seeTabOptionsEdit"/>
        <click selector="{{TabOnStage.tabOptionsEdit}}" stepKey="clickEditContentBlock"/>
        <waitForElementVisible stepKey="wait1" selector="{{PageBuilderActionsSection.editFormTitle}}" time="10"/>
        <see userInput="Edit Tab" selector="{{PageBuilderActionsSection.editFormTitle}}" stepKey="editTab"/>
        <waitForPageLoad stepKey="waitForPageBuilderPageLoad"/>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection"/>
        <!-- Text Alignment -->
        <comment userInput="Text Alignment: dropdown defaults to Default and available values Default, Left, Center, Right" stepKey="AC0" />
        <actionGroup ref="validateVisualSelects" stepKey="validateAlignment">
            <argument name="property1" value="PageBuilderAdvancedAlignmentPropertyDefault"/>
            <argument name="property2" value="PageBuilderAdvancedAlignmentPropertyLeft"/>
            <argument name="property3" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
            <argument name="property4" value="PageBuilderAdvancedAlignmentPropertyRight"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotRequired" stepKey="validateTextAlignmentAttributeNotRequired">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="validateAlignmentFieldIsNotDisabled" stepKey="validateTextAlignmentAttributeNotDisabled">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyDefault"/>
        </actionGroup>
        <!-- Border -->
        <comment userInput="Border: dropdown defaults to Default" stepKey="AC1"/>
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeBorderAttribute">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotRequired" stepKey="validateBorderAttributeNotRequired">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotDisabled" stepKey="validateBorderAttributeNotDisabled">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeBorderAttributeValue">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDefault"/>
        </actionGroup>
        <comment userInput="Border: available values None, Default, Dotted, Dashed, Solid, Double, Groove, Ridge, Inset, Outset" stepKey="AC2"/>
        <grabMultiple selector="{{PageBuilderColumnSection.panelFieldOptions(PageBuilderAdvancedBorderPropertyDefault.section, PageBuilderAdvancedBorderPropertyDefault.fieldName)}}" userInput="innerText" stepKey="grabBorderOptions"/>
        <assertEquals expected="{{PageBuilderAdvancedBorderDefaultSlideProperty.optionsList}}" expectedType="array" actual="grabBorderOptions" actualType="variable" message="Verify Border dropdown options" stepKey="assertBorderOptions2"/>
        <!-- Border Color -->
        <comment userInput="Border Color: input defaults to empty." stepKey="AC3"/>
        <grabValueFrom selector="{{PageBuilderColumnSection.panelFieldControl(PageBuilderAdvancedBorderColorDefaultProperty.section, PageBuilderAdvancedBorderColorDefaultProperty.fieldName)}}" stepKey="getTextFromBorderColorAttribute"/>
        <assertEmpty stepKey="assertBorderColorEmpty" message="Border Color has text: getTextFromBorderColorAttribute">
            <actualResult type="variable">getTextFromBorderColorAttribute</actualResult>
        </assertEmpty>
        <actionGroup ref="validateSlideOutPanelFieldIsNotRequired" stepKey="validateBorderColorAttributeNotRequired">
            <argument name="property" value="PageBuilderAdvancedBorderColorDefaultProperty"/>
        </actionGroup>
        <comment userInput="Border Color: Field is enabled by default due to Default on Border." stepKey="AC4"/>
        <actionGroup ref="validateSlideOutPanelFieldIsNotDisabled" stepKey="validateBorderColorAttributeNotDisabled">
            <argument name="property" value="PageBuilderAdvancedBorderColorDefaultProperty"/>
        </actionGroup>
        <!-- Border Size -->
        <comment userInput="Border Width: input defaults to 1." stepKey="AC5"/>
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeBorderSizeAttribute">
            <argument name="property" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderSizePlaceholderText">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotRequired" stepKey="validateBorderSizeAttributeNotRequired">
            <argument name="property" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
        </actionGroup>
        <comment userInput="Border Width: Field is enabled by default due to Default on Border." stepKey="AC6"/>
        <actionGroup ref="validateSlideOutPanelFieldIsNotDisabled" stepKey="validateBorderSizeAttributeNotDisabled">
            <argument name="property" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
        </actionGroup>
        <!-- Border Radius -->
        <comment userInput="Border radius: input defaults to 0." stepKey="AC7"/>
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeBorderRadiusAttribute">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotRequired" stepKey="validateBorderRadiusAttributeNotRequired">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotDisabled" stepKey="validateBorderRadiusAttributeNotDisabled">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadiusAttributePlaceholderText">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
        </actionGroup>
        <!-- CSS Classes -->
        <comment userInput="CSS classes: input defaults to empty." stepKey="AC8"/>
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeCSSClassesAttribute">
            <argument name="property" value="PageBuilderAdvancedCssClassesDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotRequired" stepKey="validateCSSClassesAttributeNotRequired">
            <argument name="property" value="PageBuilderAdvancedCssClassesDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotDisabled" stepKey="validateCSSClassesAttributeNotDisabled">
            <argument name="property" value="PageBuilderAdvancedCssClassesDefaultProperty"/>
        </actionGroup>
        <grabValueFrom selector="{{PageBuilderColumnSection.panelFieldControl(PageBuilderAdvancedCssClassesDefaultProperty.section, PageBuilderAdvancedCssClassesDefaultProperty.fieldName)}}" stepKey="getTextFromCSSClassesAttribute"/>
        <assertEmpty stepKey="assertGetTextFromCSSClassesAttribute" message="CSS Classes field was not empty. Had text: $getTextFromCSSClassesAttribute">
            <actualResult type="variable">getTextFromCSSClassesAttribute</actualResult>
        </assertEmpty>
        <!-- Margins and Padding -->
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeMarginsAndPaddingAttribute">
            <argument name="property" value="PageBuilderAdvancedMarginsAndPaddingDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotRequired" stepKey="validateMarginsAndPaddingAttributeNotRequired">
            <argument name="property" value="PageBuilderAdvancedMarginsAndPaddingDefaultProperty"/>
        </actionGroup>
        <!-- Assert against values -->
        <comment userInput="Margins: defaults to 0" stepKey="AC9"/>
        <comment userInput="Padding: defaults to 40 all sides" stepKey="AC10"/>
        <grabValueFrom selector="{{AdvancedForm.advancedMarginTop}}" stepKey="getTextMarginTop"/>
        <assertEquals expected="{{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.marginTop}}" expectedType="string" actual="getTextMarginTop" actualType="variable" message="Verify Text Alignment dropdown options" stepKey="assertTextMarginTop"/>
        <grabValueFrom selector="{{AdvancedForm.advancedMarginRight}}" stepKey="getTextMarginRight"/>
        <assertEquals expected="{{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.marginRight}}" expectedType="string" actual="getTextMarginRight" actualType="variable" message="Verify Text Alignment dropdown options" stepKey="assertTextMarginRight"/>
        <grabValueFrom selector="{{AdvancedForm.advancedMarginLeft}}" stepKey="getTextMarginLeft"/>
        <assertEquals expected="{{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.marginLeft}}" expectedType="string" actual="getTextMarginLeft" actualType="variable" message="Verify Text Alignment dropdown options" stepKey="assertTextMarginLeft"/>
        <grabValueFrom selector="{{AdvancedForm.advancedMarginBottom}}" stepKey="getTextMarginBottom"/>
        <assertEquals expected="{{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.marginBottom}}" expectedType="string" actual="getTextMarginBottom" actualType="variable" message="Verify Text Alignment dropdown options" stepKey="assertTextMarginBottom"/>
        <grabValueFrom selector="{{AdvancedForm.advancedPaddingTop}}" stepKey="getTextPaddingTop"/>
        <assertEquals expected="{{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.paddingTop}}" expectedType="string" actual="getTextPaddingTop" actualType="variable" message="Verify Text Alignment dropdown options" stepKey="assertTextPaddingTop"/>
        <grabValueFrom selector="{{AdvancedForm.advancedPaddingRight}}" stepKey="getTextPaddingRight"/>
        <assertEquals expected="{{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.paddingRight}}" expectedType="string" actual="getTextPaddingRight" actualType="variable" message="Verify Text Alignment dropdown options" stepKey="assertTextPaddingRight"/>
        <grabValueFrom selector="{{AdvancedForm.advancedPaddingLeft}}" stepKey="getTextPaddingLeft"/>
        <assertEquals expected="{{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.paddingLeft}}" expectedType="string" actual="getTextPaddingLeft" actualType="variable" message="Verify Text Alignment dropdown options" stepKey="assertTextPaddingLeft"/>
        <grabValueFrom selector="{{AdvancedForm.advancedPaddingBottom}}" stepKey="getTextPaddingBottom"/>
        <assertEquals expected="{{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.paddingBottom}}" expectedType="string" actual="getTextPaddingBottom" actualType="variable" message="Verify Text Alignment dropdown options" stepKey="assertTextPaddingBottom"/>
    </test>
</tests>

