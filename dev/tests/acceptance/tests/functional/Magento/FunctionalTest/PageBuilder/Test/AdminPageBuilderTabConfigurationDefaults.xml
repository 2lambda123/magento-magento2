<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="../../../../../../vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/Test/etc/testSchema.xsd">
    <test name="DefaultTabStateOnAddingNewTab">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Tabs: Tab Configuration"/>
            <useCaseId value="MAGETWO-71593"/>
            <title value="Empty Tabs Default State on Admin Preview and Storefront"/>
            <description value="As a Content Manager I want to see empty tab preview on the stage so that I see its position and can access settings"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-90008"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-tabs"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="turnOnPageBuilder" after="enableWYSIWYG"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentBlockType" value="PageBuilderTabsContentBlock"/>
        </actionGroup>
        <!-- Add Tabs to Stage -->
        <click selector="{{PageBuilderActionsSection.interactiveGroup}}" stepKey="clickInteractiveGroup"/>
        <comment userInput="User adds tabs and sees 1st default tab item created by default" stepKey="AC1"/>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragTabsIntoStage">
            <argument name="contentBlockType" value="PageBuilderTabsContentBlock"/>
        </actionGroup>
        <!-- Open Tabs Panel -->
        <comment userInput="Tab option panel displayed on top of the new tab after adding it." stepKey="AC2"/>
        <waitForElement selector="{{TabOnStage.tabOptionsByIndex('1')}}" stepKey="seeTabOptionsPanel" time="30"/>
        <waitForElementVisible selector="{{TabOnStage.tabOptionsEdit}}" stepKey="seeTabOptionsEditVisible"/>
        <comment userInput="A placeholder indicates that content can be added inside the tab" stepKey="AC3"/>
        <see selector="{{TabOnStage.empty}}" userInput="Drag content blocks or columns here" stepKey="seeTabPlaceholder"/>
        <comment userInput="User sees the first tab to be active and focused." stepKey="AC4"/>
        <assertElementContainsAttribute selector="{{TabOnStage.tabPanel('1')}}" attribute="aria-expanded" expectedValue="true" stepKey="assertTab1ContentFocused"/>
        <assertElementContainsAttribute selector="{{TabOnStage.tabPanel('1')}}" attribute="aria-hidden" expectedValue="false" stepKey="assertTab1ContentVisible"/>

        <comment userInput="User doesn't see the Tabs option panel" stepKey="AC5"/>
        <dontSeeElement selector="{{TabsOnStage.tabsOptionsTitle}}" stepKey="dontSeeTabsOptionsAfterAddTabs"/>

        <comment userInput="Add second tab and view on stage" stepKey="AC6"/>
        <waitForElementVisible selector="{{TabOnStage.tabHeader('1')}}" stepKey="seeTabHeader1"/>
        <actionGroup ref="addTab" stepKey="addTab"/>
        <waitForElementVisible selector="{{TabOnStage.tabHeader('2')}}" stepKey="seeTabHeader2"/>
        <see selector="{{TabOnStage.tabHeader('2')}}" userInput="Tab 2" stepKey="seeTab2DefaultTitleAdmin"/>
        <seeElement selector="{{TabOnStage.tabContentBackgroundPosition('2', PageBuilderTabBackgroundPositionDefault.style)}}" stepKey="seeTabBackgroundPositionAdmin2"/>
        <seeElement selector="{{TabOnStage.tabContentBackgroundSize('2', PageBuilderTabBackgroundSizeDefault.value)}}" stepKey="seeTabBackgroundSizeAdmin2"/>
        <seeElement selector="{{TabOnStage.tabContentBackgroundAttachment('2', PageBuilderTabBackgroundAttachmentDefault.value)}}" stepKey="seeTabBackgroundAttachmentAdmin2"/>
        <seeElement selector="{{TabOnStage.tabContentBackgroundRepeat('2', PageBuilderTabBackgroundRepeatNo.style)}}" stepKey="seeTab2StageBackgroundRepeatNo"/>
        <actionGroup ref="switchTabsAdmin" stepKey="switchTabsAdmin">
            <argument name="from" value="2"/>
            <argument name="to" value="1"/>
        </actionGroup>
        <comment userInput="View default Tabs with empty first Tab on stage" stepKey="AC7"/>
        <see selector="{{TabOnStage.tabHeader('1')}}" userInput="{{PageBuilderTabName1Default.value}}" stepKey="seeTab1TitleAdmin1"/>
        <seeElement selector="{{TabOnStage.tabContentBackgroundPosition('1', PageBuilderTabBackgroundPositionDefault.style)}}" stepKey="seeTabBackgroundPositionAdmin1"/>
        <seeElement selector="{{TabOnStage.tabContentBackgroundSize('1', PageBuilderTabBackgroundSizeDefault.value)}}" stepKey="seeTabBackgroundSizeAdmin1"/>
        <seeElement selector="{{TabOnStage.tabContentBackgroundAttachment('1', PageBuilderTabBackgroundAttachmentDefault.value)}}" stepKey="seeTabBackgroundAttachmentAdmin1"/>
        <seeElement selector="{{TabOnStage.tabContentBackgroundRepeat('1', PageBuilderTabBackgroundRepeatNo.style)}}" stepKey="seeTab1StageBackgroundRepeatNo"/>
        <comment userInput="User sees tab default min height to be 300 px on stage" stepKey="AC8"/>
        <seeElement selector="{{TabsOnStage.tabsContentMinHeight(PageBuilderTabsDefaultMinHeight.value)}}" stepKey="seeTabMinHeightAdmin1"/>
        <comment userInput="User sees tab preview takes 100% container width" stepKey="AC9"/>
        <!--assert computed styles matching expected depends on MQE-818 -->

        <comment userInput="User sees tabs border settings to be default as documented (defined by the theme style)" stepKey="AC10"/>
        <seeElement selector="{{TabOnStage.tabContentBorderWidth('1', PageBuilderAdvancedBorderWidthPropertyDefault.value)}}" stepKey="seeTab1BorderWidth"/>
        <seeElement selector="{{TabOnStage.tabContentBorderRadius('1', PageBuilderAdvancedBorderRadiusDefaultProperty.value)}}" stepKey="seeTab1BorderRadius"/>
        <seeElement selector="{{TabOnStage.tabContentMargin('1', PageBuilderMarginsPropertyTabDefault.value)}}" stepKey="seeTab1Margins"/>
        <seeElement selector="{{TabOnStage.tabContentPadding('1', PageBuilderPaddingProperty40.value)}}" stepKey="seeTab1Padding"/>

        <!-- Validate Default Values on Edit Tab for initial tab -->
        <waitForElementVisible selector="{{TabOnStage.tabOptionsEdit}}" stepKey="seeTabOptionsEdit"/>
        <click selector="{{TabOnStage.tabOptionsEdit}}" stepKey="clickEditContentBlock"/>

        <comment userInput="Tab has default value Tab 1 for Tab Name" stepKey="AC11"/>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateDefaultTabName">
            <argument name="property" value="PageBuilderTabName1Default"/>
        </actionGroup>
        <comment userInput="Tab has default value empty for Background Image" stepKey="AC12"/>
        <waitForElementVisible selector="{{ImageOnConfigurationPanel.placeholderContent('Background Image')}}" stepKey="seeImagePlaceHolderOnBackgroundImage"/>
        <comment userInput="Tab has default value empty for Background Mobile image - This feature is not yet available" stepKey="AC13"/>
        <comment userInput="Tab has default value empty for Background Color" stepKey="commentDefaultBackgroundColor"/>
        <grabValueFrom selector="{{PageBuilderColumnSection.panelFieldControl(PageBuilderTabBackgroundColorProperty.section, PageBuilderTabBackgroundColorProperty.fieldName)}}" stepKey="getBackgroundColor"/>
        <assertEmpty actual="getBackgroundColor" actualType="variable" message="Text field has text: $getBackgroundColor" stepKey="assertBackgroundColor"/>

        <comment userInput="Tab has default value Top Aligned for Background Position" stepKey="commentDefaultBackgroundPosition"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateDefaultBackgroundPosition">
            <argument name="property" value="PageBuilderTabBackgroundPositionTop"/>
        </actionGroup>
        <comment userInput="Background Position has expected dropdown values" stepKey="commentDefaultBackgroundPositionValues"/>
        <grabMultiple selector="{{PageBuilderColumnSection.panelFieldOptions(PageBuilderTabBackgroundPositionDefault.section, PageBuilderTabBackgroundPositionDefault.fieldName)}}" userInput="innerText" stepKey="grabBackgroundPositionOptions"/>
        <assertEquals expected="{{PageBuilderTabBackgroundPositionDefault.optionsList}}" expectedType="array" actual="grabBackgroundPositionOptions" actualType="variable" message="Verify Background Position dropdown options" stepKey="assertBackgroundPositionOptions"/>

        <comment userInput="Tab has default value Cover for Background Size" stepKey="commentDefaultBackgroundSize"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateDefaultBackgroundSize">
            <argument name="property" value="PageBuilderTabBackgroundSizeCover"/>
        </actionGroup>
        <comment userInput="Background Size has expected dropdown values" stepKey="commentDefaultBackgroundSizeValues"/>
        <grabMultiple selector="{{PageBuilderColumnSection.panelFieldOptions(PageBuilderTabBackgroundSizeDefault.section, PageBuilderTabBackgroundSizeDefault.fieldName)}}" userInput="innerText" stepKey="grabBackgroundSizeOptions"/>
        <assertEquals expected="{{PageBuilderTabBackgroundSizeDefault.optionsList}}" expectedType="array" actual="grabBackgroundSizeOptions" actualType="variable" message="Verify Background Size dropdown options" stepKey="assertBackgroundSizeOptions"/>

        <comment userInput="Tab has default value No for Background Repeat" stepKey="commentDefaultBackgroundRepeat"/>
        <actionGroup ref="seeOptionIsNotCheckedSlideOutProperty" stepKey="seeDefaultBackgroundRepeatProperty">
            <argument name="property" value="PageBuilderTabBackgroundRepeatNo"/>
        </actionGroup>

        <comment userInput="Tab has default value Scroll for Background Attachment" stepKey="commentDefaultBackgroundAttachment"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBackgroundAttachment">
            <argument name="property" value="PageBuilderTabBackgroundAttachmentScroll"/>
        </actionGroup>
        <grabMultiple selector="{{PageBuilderColumnSection.panelFieldOptions(PageBuilderTabBackgroundAttachmentDefault.section, PageBuilderTabBackgroundAttachmentDefault.fieldName)}}" userInput="innerText" stepKey="grabBackgroundAttachmentOptions"/>
        <assertEquals expected="{{PageBuilderTabBackgroundAttachmentDefault.optionsList}}" expectedType="array" actual="grabBackgroundAttachmentOptions" actualType="variable" message="Verify Background Attachment dropdown options" stepKey="assertBackgroundAttachmentOptions"/>

        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettingsForTab1"/>
        <!-- Validate Default Values in Edit Tabs -->
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openTabsEditMenuOnStage">
            <argument name="contentBlockType" value="PageBuilderTabsContentBlock"/>
        </actionGroup>

        <comment userInput="Tabs has default value Tab 1 for Default Active Tab" stepKey="commentDefaultActiveTab"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateDefaultActiveTab">
            <argument name="property" value="PageBuilderTabsDefaultActiveTab"/>
        </actionGroup>

        <comment userInput="Tabs has default value 300 for Minimum Height" stepKey="commentDefaultMinimumHeight"/>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateDefaultMinimumHeight">
            <argument name="property" value="PageBuilderTabsDefaultMinHeight"/>
        </actionGroup>

        <comment userInput="Tabs has default value Left for Tab Navigation Alignment" stepKey="commentDefaultTabNavigationAlignment"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateDefaultTabNavigationAlignment">
            <argument name="property" value="PageBuilderTabsAlignmentLeft"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Verify Default Values for Tabs on storefront -->
        <comment userInput="View default Tabs with empty Tab on storefront" stepKey="viewTabOnStorefront"/>
        <amOnPage url="{{PageBuilderTabsContentBlock.name}}{{PageBuilderPageTitle.pageName}}" stepKey="amOnPageBuilderPage"/>
        <reloadPage stepKey="reloadPage"/>
        <waitForPageLoad stepKey="waitForTabsToLoadStorefront" time="30"/>
        <waitForElementVisible selector="{{TabOnStorefront.tabHeader('1')}}" stepKey="seeTabHeader1Storefront"/>
        <see selector="{{TabOnStorefront.tabHeader('1')}}" userInput="{{PageBuilderTabName1Default.value}}" stepKey="seeTab1TitleStorefront"/>
        <seeElement selector="{{TabOnStorefront.tabContentBackgroundPosition('1', PageBuilderTabBackgroundPositionDefault.style)}}" stepKey="seeTabBackgroundPositionStorefront"/>
        <seeElement selector="{{TabOnStorefront.tabContentBackgroundSize('1', PageBuilderTabBackgroundSizeDefault.value)}}" stepKey="seeTabBackgroundSizeStorefront"/>
        <seeElement selector="{{TabOnStorefront.tabContentBackgroundRepeat('1', PageBuilderTabBackgroundRepeatNo.style)}}" stepKey="seeTabBackgroundRepeatNoStorefront"/>
        <seeElement selector="{{TabOnStorefront.tabContentBackgroundAttachment('1', PageBuilderTabBackgroundAttachmentScroll.value)}}" stepKey="seeTabBackgroundAttachmentStorefront"/>
    </test>
    <test name="TabAdvancedSectionDefaults">
        <annotations>
            <features value="PageBuilder"/>
            <stories value="Tabs: Tab Configuration"/>
            <useCaseId value="MAGETWO-71593"/>
            <title value="Tab advanced configuration has default properties"/>
            <description value="New tab has default values on Advanced section"/>
            <severity value="CRITICAL"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-tabs"/>
            <testCaseId value="MAGETWO-90003"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="turnOnPageBuilder" after="enableWYSIWYG"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentBlockType" value="PageBuilderTabsContentBlock"/>
        </actionGroup>
        <!--Add Tabs to Stage -->
        <click selector="{{PageBuilderActionsSection.interactiveGroup}}" stepKey="clickInteractiveGroup"/>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragTabsIntoStage">
            <argument name="contentBlockType" value="PageBuilderTabsContentBlock"/>
        </actionGroup>
        <waitForElementVisible selector="{{TabOnStage.tabOptionsEdit}}" stepKey="seeTabOptionsEdit"/>
        <click selector="{{TabOnStage.tabOptionsEdit}}" stepKey="clickEditContentBlock"/>

        <waitForElementVisible stepKey="wait1" selector="{{PageBuilderActionsSection.editFormTitle}}" time="10"/>
        <see userInput="Edit Tab" selector="{{PageBuilderActionsSection.editFormTitle}}" stepKey="editTab"/>
        <waitForPageLoad stepKey="waitForPageBuilderPageLoad"/>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection"/>
        <!-- Text Alignment -->
        <comment userInput="Text Alignment: dropdown defaults to Default and available values Default, Left, Center, Right" stepKey="AC0" />
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeTextAlignmentAttribute">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotRequired" stepKey="validateTextAlignmentAttributeNotRequired">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotDisabled" stepKey="validateTextAlignmentAttributeNotDisabled">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeTextAlignmentAttributeValue">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyDefault"/>
        </actionGroup>
        <grabMultiple selector="{{PageBuilderColumnSection.panelFieldOptions(PageBuilderAdvancedAlignmentPropertyDefault.section, PageBuilderAdvancedAlignmentPropertyDefault.fieldName)}}" userInput="innerText" stepKey="grabTextAlignmentOptions"/>
        <assertEquals expected="{{PageBuilderAdvancedAlignmentPropertyDefault.optionsList}}" expectedType="array" actual="grabTextAlignmentOptions" actualType="variable" message="Verify Text Alignment dropdown options" stepKey="assertTextAlignmentDropdownOld"/>
        <!-- Border -->
        <comment userInput="Border: dropdown defaults to Default" stepKey="AC1"/>
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeBorderAttribute">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotRequired" stepKey="validateBorderAttributeNotRequired">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotDisabled" stepKey="validateBorderAttributeNotDisabled">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeBorderAttributeValue">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDefault"/>
        </actionGroup>
        <comment userInput="Border: available values None, Default, Dotted, Dashed, Solid, Double, Groove, Ridge, Inset, Outset" stepKey="AC2"/>
        <grabMultiple selector="{{PageBuilderColumnSection.panelFieldOptions(PageBuilderAdvancedBorderPropertyDefault.section, PageBuilderAdvancedBorderPropertyDefault.fieldName)}}" userInput="innerText" stepKey="grabBorderOptions"/>
        <assertEquals expected="{{PageBuilderAdvancedBorderDefaultSlideProperty.optionsList}}" expectedType="array" actual="grabBorderOptions" actualType="variable" message="Verify Border dropdown options" stepKey="assertBorderOptions2"/>
        <!-- Border Color -->
        <comment userInput="Border Color: input defaults to empty." stepKey="AC3"/>
        <grabValueFrom selector="{{PageBuilderColumnSection.panelFieldControl(PageBuilderAdvancedBorderColorDefaultProperty.section, PageBuilderAdvancedBorderColorDefaultProperty.fieldName)}}" stepKey="getTextFromBorderColorAttribute"/>
        <assertEmpty stepKey="assertBorderColorEmpty" message="Border Color has text: getTextFromBorderColorAttribute">
            <actualResult type="variable">getTextFromBorderColorAttribute</actualResult>
        </assertEmpty>
        <actionGroup ref="validateSlideOutPanelFieldIsNotRequired" stepKey="validateBorderColorAttributeNotRequired">
            <argument name="property" value="PageBuilderAdvancedBorderColorDefaultProperty"/>
        </actionGroup>
        <comment userInput="Border Color: Field is enabled by default due to Default on Border." stepKey="AC4"/>
        <actionGroup ref="validateSlideOutPanelFieldIsNotDisabled" stepKey="validateBorderColorAttributeNotDisabled">
            <argument name="property" value="PageBuilderAdvancedBorderColorDefaultProperty"/>
        </actionGroup>
        <!-- Border Size -->
        <comment userInput="Border Width: input defaults to 1." stepKey="AC5"/>
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeBorderSizeAttribute">
            <argument name="property" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderSizePlaceholderText">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotRequired" stepKey="validateBorderSizeAttributeNotRequired">
            <argument name="property" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
        </actionGroup>
        <comment userInput="Border Width: Field is enabled by default due to Default on Border." stepKey="AC6"/>
        <actionGroup ref="validateSlideOutPanelFieldIsNotDisabled" stepKey="validateBorderSizeAttributeNotDisabled">
            <argument name="property" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
        </actionGroup>
        <!-- Border Radius -->
        <comment userInput="Border radius: input defaults to 0." stepKey="AC7"/>
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeBorderRadiusAttribute">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotRequired" stepKey="validateBorderRadiusAttributeNotRequired">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotDisabled" stepKey="validateBorderRadiusAttributeNotDisabled">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadiusAttributePlaceholderText">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
        </actionGroup>
        <!-- CSS Classes -->
        <comment userInput="CSS classes: input defaults to empty." stepKey="AC8"/>
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeCSSClassesAttribute">
            <argument name="property" value="PageBuilderAdvancedCssClassesDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotRequired" stepKey="validateCSSClassesAttributeNotRequired">
            <argument name="property" value="PageBuilderAdvancedCssClassesDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotDisabled" stepKey="validateCSSClassesAttributeNotDisabled">
            <argument name="property" value="PageBuilderAdvancedCssClassesDefaultProperty"/>
        </actionGroup>
        <grabValueFrom selector="{{PageBuilderColumnSection.panelFieldControl(PageBuilderAdvancedCssClassesDefaultProperty.section, PageBuilderAdvancedCssClassesDefaultProperty.fieldName)}}" stepKey="getTextFromCSSClassesAttribute"/>
        <assertEmpty stepKey="assertGetTextFromCSSClassesAttribute" message="CSS Classes field was not empty. Had text: $getTextFromCSSClassesAttribute">
            <actualResult type="variable">getTextFromCSSClassesAttribute</actualResult>
        </assertEmpty>
        <!-- Margins and Padding -->
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeMarginsAndPaddingAttribute">
            <argument name="property" value="PageBuilderAdvancedMarginsAndPaddingDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotRequired" stepKey="validateMarginsAndPaddingAttributeNotRequired">
            <argument name="property" value="PageBuilderAdvancedMarginsAndPaddingDefaultProperty"/>
        </actionGroup>
        <!-- Assert against values -->
        <comment userInput="Margins: defaults to 0" stepKey="AC9"/>
        <comment userInput="Padding: defaults to 40 all sides" stepKey="AC10"/>
        <grabValueFrom selector="{{AdvancedForm.advancedMarginTop}}" stepKey="getTextMarginTop"/>
        <assertEquals expected="{{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.marginTop}}" expectedType="string" actual="getTextMarginTop" actualType="variable" message="Verify Text Alignment dropdown options" stepKey="assertTextMarginTop"/>
        <grabValueFrom selector="{{AdvancedForm.advancedMarginRight}}" stepKey="getTextMarginRight"/>
        <assertEquals expected="{{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.marginRight}}" expectedType="string" actual="getTextMarginRight" actualType="variable" message="Verify Text Alignment dropdown options" stepKey="assertTextMarginRight"/>
        <grabValueFrom selector="{{AdvancedForm.advancedMarginLeft}}" stepKey="getTextMarginLeft"/>
        <assertEquals expected="{{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.marginLeft}}" expectedType="string" actual="getTextMarginLeft" actualType="variable" message="Verify Text Alignment dropdown options" stepKey="assertTextMarginLeft"/>
        <grabValueFrom selector="{{AdvancedForm.advancedMarginBottom}}" stepKey="getTextMarginBottom"/>
        <assertEquals expected="{{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.marginBottom}}" expectedType="string" actual="getTextMarginBottom" actualType="variable" message="Verify Text Alignment dropdown options" stepKey="assertTextMarginBottom"/>
        <grabValueFrom selector="{{AdvancedForm.advancedPaddingTop}}" stepKey="getTextPaddingTop"/>
        <assertEquals expected="{{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.paddingTop}}" expectedType="string" actual="getTextPaddingTop" actualType="variable" message="Verify Text Alignment dropdown options" stepKey="assertTextPaddingTop"/>
        <grabValueFrom selector="{{AdvancedForm.advancedPaddingRight}}" stepKey="getTextPaddingRight"/>
        <assertEquals expected="{{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.paddingRight}}" expectedType="string" actual="getTextPaddingRight" actualType="variable" message="Verify Text Alignment dropdown options" stepKey="assertTextPaddingRight"/>
        <grabValueFrom selector="{{AdvancedForm.advancedPaddingLeft}}" stepKey="getTextPaddingLeft"/>
        <assertEquals expected="{{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.paddingLeft}}" expectedType="string" actual="getTextPaddingLeft" actualType="variable" message="Verify Text Alignment dropdown options" stepKey="assertTextPaddingLeft"/>
        <grabValueFrom selector="{{AdvancedForm.advancedPaddingBottom}}" stepKey="getTextPaddingBottom"/>
        <assertEquals expected="{{PageBuilderAdvancedMarginsAndPaddingPropertyDefaultSlide.paddingBottom}}" expectedType="string" actual="getTextPaddingBottom" actualType="variable" message="Verify Text Alignment dropdown options" stepKey="assertTextPaddingBottom"/>
    </test>
</tests>

