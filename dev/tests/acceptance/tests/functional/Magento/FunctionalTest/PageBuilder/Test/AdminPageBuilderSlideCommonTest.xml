<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="../../../../../../vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/Test/etc/testSchema.xsd">
    <test name="AddSliderContentBlockToCMSPage">
        <annotations>
            <features value="Pagebuilder: Slider"/>
            <stories value="MAGETWO-83933: Advanced Slider"/>
            <title value="Add Slider in PageBuilder for new CMS page, customize slider settings and view on Storefront"/>
            <description value="The user should be able to add the slides media content type to slider media content type and it should be visible on the frontend"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-84920"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-slider"/>
            <group value="pagebuilder-sliderCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="turnOnPageBuilder" after="enableWYSIWYG"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStageAndExpectEditPanel" stepKey="dragSliderOntoStage">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideTitle1">
            <argument name="property" value="PageBuilderSlideItemTitle1"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutPropertyGeneral" stepKey="attachSlideImageFile1">
            <argument name="property" value="PageBuilderSlideBackgroundImageProperty1"/>
        </actionGroup>
        <actionGroup ref="scrollToSlideOutPanelField" stepKey="scrollToLink">
            <argument name="property" value="PageBuilderSlideItemLinkURL1"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCE" stepKey="addTextToTinyMCE">
            <argument name="property" value="PageBuilderSlideItemContent1"/>
            <argument name="section" value="SlideOnConfigurationPanel"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideLinkURL1">
            <argument name="property" value="PageBuilderSlideItemLinkURL1"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="PageBuilderSlideShowButtonAlwaysProperty">
            <argument name="property" value="PageBuilderSlideShowButtonAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideButtonText1">
            <argument name="property" value="PageBuilderSlideItemButtonText1"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanel1Settings"/>
        <!--Open Slider settings -->
        <comment userInput="Open Slider settings" stepKey="EditSlider"/>
        <scrollTo selector="{{CmsNewPagePageActionsSection.pageTitle}}" stepKey="scrollToTop"/>
        <click selector="{{SliderInAdmin.slideWrapper}}" stepKey="clickSliderInStage"/>
        <actionGroup ref="openPageBuilderEditPanelByIndex" stepKey="openSliderEditPanel">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
            <argument name="contentBlockIndex" value="1"/>
        </actionGroup>
        <actionGroup ref="clickSlideOutPanelFieldGeneral" stepKey="enterAutoplayYes">
            <argument name="property" value="PageBuilderSliderAutoplayOnProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterAutoplaySpeed5000">
            <argument name="property" value="PageBuilderSliderAutoplaySpeed5000Property"/>
        </actionGroup>
        <actionGroup ref="clickSlideOutPanelFieldGeneral" stepKey="enterFadeYes">
            <argument name="property" value="PageBuilderSliderFadeYesProperty"/>
        </actionGroup>
        <actionGroup ref="clickSlideOutPanelFieldGeneral" stepKey="enterIsInfiniteYes">
            <argument name="property" value="PageBuilderSliderIsInfiniteProperty"/>
        </actionGroup>
        <actionGroup ref="clickSlideOutPanelFieldGeneral" stepKey="enterShowArrowYes">
            <argument name="property" value="PageBuilderSliderShowArrowsYesProperty"/>
        </actionGroup>
        <actionGroup ref="clickSlideOutPanelFieldGeneral" stepKey="enterShowDotsNo">
            <argument name="property" value="PageBuilderSliderShowDotsNoProperty"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeSliderMinHeightDefault300">
            <argument name="property" value="PageBuilderSliderMinHeightDefault300Property"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSliderMinHeight500">
            <argument name="property" value="PageBuilderSliderMinHeight500Property"/>
        </actionGroup>
        <comment userInput="Edit Advanced settings for slider" stepKey="EditSliderAdvanced"/>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection"/>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeAdvancedAlignmentPropertyDefault">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterAdvancedAlignmentPropertyLeft">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyLeft"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeAdvancedBorderPropertyNone">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyNone"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterAdvancedBorderProperty">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDotted"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterAdvancedBorderColorProperty">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterAdvancedBorderWidthProperty">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterAdvancedBorderRadiusProperty">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusProperty12"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterAdvancedClassProperty">
            <argument name="property" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldMarginsAndPadding" stepKey="enterAdvancedMarginsAndPaddingProperty">
            <argument name="property" value="PageBuilderAdvancedMarginsAndPaddingProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings1"/>
        <!--Add second slide -->
        <comment userInput="Add second slide" stepKey="addSecondSlide"/>
        <actionGroup ref="addSlide" stepKey="addSlide"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideTitle2">
            <argument name="property" value="PageBuilderSlideItemTitle2"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutPropertyGeneral" stepKey="attachSlideImageFile2">
            <argument name="property" value="PageBuilderSlideBackgroundImageProperty2"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCE" stepKey="addTextToTinyMCE2">
            <argument name="property" value="PageBuilderSlideItemContent2"/>
            <argument name="section" value="SlideOnConfigurationPanel"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideLinkURL2">
            <argument name="property" value="PageBuilderSlideItemLinkURL2"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="PageBuilderSlideShowButtonAlwaysProperty2">
            <argument name="property" value="PageBuilderSlideShowButtonAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideButtonText2">
            <argument name="property" value="PageBuilderSlideItemButtonText2"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanel2Settings"/>
        <scrollTo selector="{{CmsNewPagePageActionsSection.pageTitle}}" stepKey="scrollToTop2"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <waitForElementVisible selector="{{SliderInAdmin.sliderContainer}}" stepKey="waitForSliderContainer" time="10"/>
        <seeElement selector="{{SliderInAdmin.ShowArrows}}" stepKey="verifyArrowsYesOnAdmin"/>
        <seeElement selector="{{SliderInAdmin.sliderMinHeight(PageBuilderSliderMinHeight500Property.value)}}" stepKey="verifyMinHeight500OnAdmin"/>
        <seeElement selector="{{SliderInAdmin.sliderAlignment(PageBuilderAdvancedAlignmentPropertyLeft.value)}}" stepKey="verifyAlignmentLeftOnAdmin"/>
        <seeElement selector="{{SliderInAdmin.sliderBorderStyle(PageBuilderAdvancedBorderWidthProperty10.value, PageBuilderAdvancedBorderPropertyDotted.value, PageBuilderAdvancedBorderColorProperty_green.rbg)}}" stepKey="verifyBorderStyleOnAdmin"/>
        <seeElement selector="{{SliderInAdmin.sliderBorderRadiusStyle(PageBuilderAdvancedBorderRadiusProperty12.value)}}" stepKey="verifyBorderRadiusStyleOnAdmin"/>
        <seeElement selector="{{SliderInAdmin.sliderMarginPaddings(PageBuilderAdvancedMarginsAndPaddingProperty.marginTop, PageBuilderAdvancedMarginsAndPaddingProperty.paddingTop)}}" stepKey="verifySliderMarginPaddingOnAdmin"/>
        <see userInput="{{PageBuilderSlideItemTitle1.value}}" selector="{{SlideOnBackend.slideTitle('0')}}" stepKey="seeSlide1TitleDisplayedAdmin"/>
        <see userInput="{{PageBuilderSlideItemContent1.value}}" selector="{{SlideOnBackend.slideContent('0')}}" stepKey="seeSlide1ContentDisplayedAdmin"/>
        <see userInput="{{PageBuilderSlideItemButtonText1.value}}" selector="{{SlideOnBackend.slideButtonText('0')}}" stepKey="seeSlide1ButtonTextDisplayedAdmin"/>
        <seeElement selector="{{SlideOnBackend.slideAppearancePoster('0')}}" stepKey="verifySlide1HasPosterAppearance"/>
        <seeElement selector="{{SlideOnBackend.slideLinkURL1(PageBuilderSlideItemLinkURL1.value)}}" stepKey="seeSlide1LinkURLAdmin"/>
        <seeElement selector="{{SlideOnBackend.slideBackgroundImage('0',PageBuilderSlideBackgroundImageProperty1.path, PageBuilderSlideBackgroundImageProperty1.fileType)}}" stepKey="seeSlide1BackgroundAdmin"/>
        <click selector="{{SliderInAdmin.nextSlide}}" stepKey="clickNextSlideOnSliderAdmin"/>
        <waitForElementVisible time="2" selector="{{SlideOnBackend.slide('1')}}" stepKey="waitForSlide2Admin" />
        <seeElement selector="{{SlideOnBackend.slide('1')}}" stepKey="seeSlide2InSliderAdmin"/>
        <see userInput="{{PageBuilderSlideItemTitle2.value}}" selector="{{SlideOnBackend.slideTitle('1')}}" stepKey="seeSlide2TitleDisplayedAdmin"/>
        <see userInput="{{PageBuilderSlideItemContent2.value}}" selector="{{SlideOnBackend.slideContent('1')}}" stepKey="seeSlide2ContentDisplayedAdmin"/>
        <see userInput="{{PageBuilderSlideItemButtonText2.value}}" selector="{{SlideOnBackend.slideButtonText('1')}}" stepKey="seeSlide2LinkTextDisplayedAdmin"/>
        <seeElement selector="{{SlideOnBackend.slideAppearancePoster('1')}}" stepKey="verifySlide2HasPosterAppearance"/>
        <seeElement selector="{{SlideOnBackend.slideLinkURL2(PageBuilderSlideItemLinkURL2.value)}}" stepKey="seeSlide2LinkURLAdmin"/>
        <seeElement selector="{{SlideOnBackend.slideBackgroundImage('1',PageBuilderSlideBackgroundImageProperty2.path, PageBuilderSlideBackgroundImageProperty2.fileType)}}" stepKey="seeSlide2BackgroundAdmin"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <seeElement selector="{{SliderOnFrontend.SliderDisplay}}" stepKey="seeSliderOnPageBuilderPage"/>
        <seeElement selector="{{SliderOnFrontend.Autoplay(PageBuilderSliderAutoplayOnProperty.value)}}" stepKey="seeSliderAutoplayOnSetting"/>
        <seeElement selector="{{SliderOnFrontend.AutoplaySpeed(PageBuilderSliderAutoplaySpeed5000Property.value)}}" stepKey="seeSliderAutoplaySpeedSetting"/>
        <seeElement selector="{{SliderOnFrontend.Fade(PageBuilderSliderFadeYesProperty.value)}}" stepKey="seeSliderFadeSetting"/>
        <seeElement selector="{{SliderOnFrontend.IsInfinite(PageBuilderSliderIsInfiniteProperty.value)}}" stepKey="seeSliderIsInfiniteSetting"/>
        <seeElement selector="{{SliderOnFrontend.ShowArrows(PageBuilderSliderShowArrowsYesProperty.value)}}" stepKey="seeSliderShowArrowsSetting"/>
        <seeElement selector="{{SliderOnFrontend.ShowDots(PageBuilderSliderShowDotsNoProperty.value)}}" stepKey="seeSliderShowDotsOffOnFrontendSetting"/>
        <seeElement selector="{{SliderOnFrontend.sliderMinHeight(PageBuilderSliderMinHeight500Property.value)}}" stepKey="verifyMinHeightOnFrontEnd"/>
        <seeElement selector="{{SliderOnFrontend.sliderMarginPaddings(PageBuilderAdvancedMarginsAndPaddingProperty.marginTop, PageBuilderAdvancedMarginsAndPaddingProperty.paddingTop)}}" stepKey="verifySliderMarginPaddingOnFrontEnd"/>
        <seeElement selector="{{SlideOnFrontend.slide('1')}}" stepKey="seeSlide1InSlider"/>
        <see userInput="{{PageBuilderSlideItemTitle1.value}}" selector="{{SlideOnFrontend.slideTitle('0')}}" stepKey="seeSlide1TitleDisplayed"/>
        <see userInput="{{PageBuilderSlideItemContent1.value}}" selector="{{SlideOnFrontend.slideContent('0')}}" stepKey="seeSlide1ContentDisplayed"/>
        <see userInput="{{PageBuilderSlideItemButtonText1.value}}" selector="{{SlideOnFrontend.slideButtonText('0')}}" stepKey="seeSlide1ButtonTextDisplayed"/>
        <seeElement selector="{{SlideOnFrontend.slideLinkURL1(PageBuilderSlideItemLinkURL1.value)}}" stepKey="seeSlide1LinkURL"/>
        <seeElement selector="{{SlideOnFrontend.slideBackgroundImage('0',PageBuilderSlideBackgroundImageProperty1.path, PageBuilderSlideBackgroundImageProperty1.fileType)}}" stepKey="seeSlide1Background"/>
        <seeElement selector="{{SlideOnFrontend.slideAppearancePoster('0')}}" stepKey="verifySlide1HasPosterAppearanceOnStorefront"/>
        <click selector="{{SliderOnFrontend.nextSlide}}" stepKey="clickNextSlideOnSlider"/>
        <waitForElementVisible time="2" selector="{{SlideOnFrontend.slide2}}" stepKey="waitForSlide2" />
        <seeElement selector="{{SlideOnFrontend.slide2}}" stepKey="seeSlide2InSlider"/>
        <see userInput="{{PageBuilderSlideItemTitle2.value}}" selector="{{SlideOnFrontend.slideTitle('1')}}" stepKey="seeSlide2TitleDisplayed"/>
        <see userInput="{{PageBuilderSlideItemContent2.value}}" selector="{{SlideOnFrontend.slideContent('1')}}" stepKey="seeSlide2ContentDisplayed"/>
        <see userInput="{{PageBuilderSlideItemButtonText2.value}}" selector="{{SlideOnFrontend.slideButtonText('1')}}" stepKey="seeSlide2LinkTextDisplayed"/>
        <seeElement selector="{{SlideOnFrontend.slideLinkURL2(PageBuilderSlideItemLinkURL2.value)}}" stepKey="seeSlide2LinkURL"/>
        <seeElement selector="{{SlideOnFrontend.slideBackgroundImage('1',PageBuilderSlideBackgroundImageProperty2.path, PageBuilderSlideBackgroundImageProperty2.fileType)}}" stepKey="seeSlide2Background"/>
        <seeElement selector="{{SlideOnFrontend.slideAppearancePoster('1')}}" stepKey="verifySlide2HasPosterAppearanceOnStorefront"/>
    </test>
    <test name="RemoveSliderFromStage">
        <annotations>
            <features value="Pagebuilder: Slider"/>
            <stories value="MAGETWO-87085: Empty Slider Admin Preview"/>
            <title value="Verify Empty Slider default state on admin preview and storefront"/>
            <description value="As a Content Manager I want to see empty content blocks preview on the stage so that I see their position and can access their settings"/>
            <severity value="CRITICAL"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-slider"/>
            <group value="pagebuilder-sliderCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="turnOnPageBuilder" after="enableWYSIWYG"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <comment userInput="User sees Slide configuration first slide open by default with a delay after rendering Slider on the stage" stepKey="AC0"/>
        <actionGroup ref="dragContentBlockToStageAndExpectEditPanel" stepKey="dragSliderOntoStage">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <waitForElementVisible stepKey="wait2" selector="{{SlideOnBackend.emptyslide}}" time="10"/>
        <grabTextFrom selector="{{SlideOnBackend.emptyslide}}" stepKey="grabTitleFromEmptySlide"/>
        <assertEquals stepKey="assertEditSlideOnEmptyPreview" message="Empty slide says Edit slide text on admin preview">
            <expectedResult type="string">Edit slide text</expectedResult>
            <actualResult type="variable">grabTitleFromEmptySlide</actualResult>
        </assertEquals>
        <!-- Verify Poster overlay -->
        <comment userInput="User sees Slider preview that contains first slide (poster)" stepKey="AC2"/>
        <assertElementContainsAttribute selector="{{SliderInAdmin.posterOverlay}}" attribute="style" expectedValue="background-color: transparent;" stepKey="verifyEmptySlideTransparentAdmin"/>
        <!-- Verify Add Slide on mouse over -->
        <comment userInput="User sees dot that indicates first slide present and Add Slide button" stepKey="AC3"/>
        <moveMouseOver selector="{{SliderInAdmin.sliderContainer}}" stepKey="onMouseOverSliderStage"/>
        <seeElement selector="{{SliderInAdmin.slideNavigationDot('1')}}" stepKey="seeDotForFirstSlide"/>
        <moveMouseOver selector="{{SliderInAdmin.slideNavigationDot('1')}}" stepKey="moveMouseOverSlideNavigationDot1"/>
        <!-- Empty slide min height -->
        <comment userInput="User sees slider preview with min height is 300 px" stepKey="AC4"/>
        <assertElementContainsAttribute selector="{{SliderInAdmin.posterOverlay}}" attribute="style" expectedValue="min-height: 300px;" stepKey="verifyMinHeight300OnAdmin"/>
        <!-- Empty slide default margin and paddings -->
        <comment userInput="User sees empty slide with margin to be 0 px and and paddings to be 40 px by default" stepKey="AC5"/>
        <assertElementContainsAttribute selector="{{SliderInAdmin.slideWrapper}}" attribute="style" expectedValue="margin: 0px;" stepKey="verifyMargin0px"/>
        <assertElementContainsAttribute selector="{{SliderInAdmin.posterOverlay}}" attribute="style" expectedValue="padding: 40px;" stepKey="verifyPadding40px"/>
        <!-- Empty slide no border -->
        <comment userInput="User sees no slide border by default" stepKey="AC6"/>
        <assertElementContainsAttribute selector="{{SliderInAdmin.slideWrapper}}" attribute="style" expectedValue="border: none;" stepKey="verifyBorderNone"/>
        <assertElementContainsAttribute selector="{{SliderInAdmin.slideWrapper}}" attribute="style" expectedValue="border-radius: 0px;" stepKey="verifyBorderRadius0"/>
        <!-- Slide order in option panel -->
        <comment userInput="User sees Slide order number in slide option panel" stepKey="AC7"/>
        <waitForElementVisible time="10" selector="{{PageBuilderActionsSection.contentBlockInStage(PageBuilderSliderContentBlock.role)}}" stepKey="waitForContentBlockInStageVisible" />
        <waitForElementVisible time="10" selector="{{SlideOnBackend.optionTitle}}" stepKey="waitForOptionTitle" />
        <grabTextFrom selector="{{SlideOnBackend.optionTitle}}" stepKey="grabSlide1OptionTitle"/>
        <assertEquals expected="Slide1" expectedType="string" actual="{$grabSlide1OptionTitle}" actualType="string" message="Slide order number in option panel" stepKey="assertSlideOrderInOption"/>
        <!-- Empty slide background defaults on admin preview -->
        <comment userInput="Verify slide defaults on admin: Background Color defaults to empty" stepKey="adminDefaultColor"/>
        <assertElementContainsAttribute selector="{{SliderInAdmin.posterOverlay}}" attribute="style" expectedValue="background-color: transparent" stepKey="verifyAdminTransparent"/>
        <comment userInput="Verify slide defaults on admin: Background Position defaults to Top Aligned" stepKey="adminDefaultPosition"/>
        <assertElementContainsAttribute selector="{{SliderInAdmin.slideWrapper}}" attribute="style" expectedValue="background-position: left top" stepKey="verifyAdminTopAligned"/>
        <comment userInput="Verify slide defaults on admin: Background Size defaults to Cover" stepKey="adminDefaultSize"/>
        <assertElementContainsAttribute selector="{{SliderInAdmin.slideWrapper}}" attribute="style" expectedValue="background-size: cover" stepKey="verifyAdminSizeCover"/>
        <comment userInput="Verify slide defaults on admin: Background Attachment defaults to Scroll" stepKey="adminDefaultAttachment"/>
        <assertElementContainsAttribute selector="{{SliderInAdmin.slideWrapper}}" attribute="style" expectedValue="background-attachment: scroll" stepKey="verifyAdminScrollAttachment"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <waitForElementVisible time="10" selector="{{SliderOnFrontend.SliderDisplay}}" stepKey="seeSliderOnPageBuilderPage"/>
        <comment userInput="Verify slide defaults on storefront: margin 0 px by default" stepKey="storefrontDefaultMargin"/>
        <assertElementContainsAttribute selector="{{SlideOnFrontend.slide('1')}}" attribute="style" expectedValue="margin: 0px;" stepKey="verifyMargin0pxStorefront"/>
        <comment userInput="Verify slide defaults on storefront: paddings 40 px by default" stepKey="storefrontDefaultPadding"/>
        <assertElementContainsAttribute selector="{{SlideOnFrontend.slideDefaultOverlay}}" attribute="style" expectedValue="padding: 40px;" stepKey="verifyPadding40pxStorefront"/>
        <comment userInput="Verify slide defaults on storefront: User sees no slide border by default" stepKey="storefrontDefaultBorder"/>
        <assertElementContainsAttribute selector="{{SlideOnFrontend.slide('1')}}" attribute="data-border" expectedValue="none" stepKey="verifyBorderNoneStorefront"/>
        <assertElementContainsAttribute selector="{{SlideOnFrontend.slide('1')}}" attribute="style" expectedValue="border-radius: 0px;" stepKey="verifyBorderRadius0Storefront"/>
        <comment userInput="Verify slide defaults on storefront: Appearance defaults to Poster" stepKey="storefrontDefaultAppearance" />
        <assertElementContainsAttribute selector="{{SlideOnFrontend.slide('1')}}" attribute="data-appearance" expectedValue="poster" stepKey="slideStorefrontPoster"/>
        <comment userInput="Verify slide defaults on storefront: Minimum Height defaults to 300" stepKey="storefrontDefaultMinHeight"/>
        <assertElementContainsAttribute selector="{{SlideOnFrontend.slideDefaultImage}}" attribute="style" expectedValue="min-height: 300px;" stepKey="slideStorefrontMinHeight"/>
        <comment userInput="Verify slide background defaults on storefront: Background Color defaults to empty" stepKey="storefrontDefaultColor" />
        <assertElementContainsAttribute selector="{{SlideOnFrontend.slideDefaultOverlay}}" attribute="style" expectedValue="background-color: transparent;" stepKey="slideStorefrontBackgroundColor"/>
        <comment userInput="Verify slide background defaults on storefront: Background Image defaults to empty" stepKey="storefrontDefaultImage"/>
        <assertElementContainsAttribute selector="{{SlideOnFrontend.slideDefaultImage}}" attribute="style" expectedValue="background-image: none;" stepKey="slideStorefrontBackgroundImage"/>
        <comment userInput="Verify slide background defaults on storefront: Background Position defaults to Top Aligned" stepKey="storefrontDefaultPosition"/>
        <assertElementContainsAttribute selector="{{SlideOnFrontend.slide('1')}}" attribute="style" expectedValue="background-position: left top;" stepKey="slideStorefrontPosition"/>
        <comment userInput="Verify slide background defaults on storefront: Background Size defaults to Cover" stepKey="storefrontDefaultSize"/>
        <assertElementContainsAttribute selector="{{SlideOnFrontend.slide('1')}}" attribute="style" expectedValue="background-size: cover;" stepKey="slideStorefrontSize"/>
        <comment userInput="Verify slide background defaults on storefront: Background Repeat defaults to No" stepKey="storefrontDefaultRepeat"/>
        <assertElementContainsAttribute selector="{{SlideOnFrontend.slide('1')}}" attribute="style" expectedValue="background-repeat: no-repeat;" stepKey="slideStorefrontRepeat"/>
        <comment userInput="Verify slide background defaults on storefront: Background Attachment defaults to Scroll" stepKey="storefrontDefaultAttachment"/>
        <assertElementContainsAttribute selector="{{SlideOnFrontend.slide('1')}}" attribute="style" expectedValue="background-attachment: scroll;" stepKey="slideStorefrontScroll"/>
        <comment userInput="Slide Content WYSIWYG defaults to empty" stepKey="storefrontDefaultContent" />
        <dontSeeInPageSource userInput="Edit slide text" stepKey="dontSeeDummyTextInPageSource"/>
        <comment userInput="Verify slide content defaults on storefront: Show Button defaults to Never Show" stepKey="storefrontDefaultShowButton"/>
        <assertElementContainsAttribute selector="{{SlideOnFrontend.slide('1')}}" attribute="data-show-button" expectedValue="never_show" stepKey="slideStorefrontShowButton"/>
        <comment userInput="Verify slide content defaults on storefront: Button Type defaults to Primary" stepKey="storefrontDefaultButtonType"/>
        <assertElementContainsAttribute selector="{{SlideOnFrontend.slide('1')}}" attribute="data-button-type" expectedValue="pagebuilder-button-primary" stepKey="slideStorefrontButtonType"/>
        <comment userInput="Verify slide content defaults on storefront: Show Overlay defaults to Never Show" stepKey="storefrontDefaultOverlay"/>
        <assertElementContainsAttribute selector="{{SlideOnFrontend.slide('1')}}" attribute="data-show-overlay" expectedValue="never_show" stepKey="slideStorefrontShowOverlay"/>
    </test>
    <test name="CanManageSlides">
        <annotations>
            <features value="Pagebuilder: Slider"/>
            <stories value="MAGETWO-83933: Advanced Slider"/>
            <title value="Can add slides and see tooltip and slide title when clicking navigation dots"/>
            <description value="A user should be able to manage slides by using the navigation dots in admin preview"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-87949"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-slider"/>
            <group value="pagebuilder-sliderCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="turnOnPageBuilder" after="enableWYSIWYG"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <comment userInput="User adds Slider into the content, user sees first Slide to be displayed inside the slider" stepKey="AC1"/>
        <actionGroup ref="dragContentBlockToStageAndExpectEditPanel" stepKey="dragSliderIntoStage">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <comment userInput="User sees Slide configuration opened with a delay." stepKey="AC2"/>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeSlideEditPanel"/>
        <seeElement selector="{{SlideOnBackend.emptyslide}}" stepKey="seeFirstSlideOnStage"/>

        <comment userInput="Slide is focused, its option panel is displayed on top of the slider dot." stepKey="AC3"/>
        <assertElementContainsAttribute selector="{{SliderInAdmin.slideNavigationDot('1')}}" attribute="class" expectedValue="active" stepKey="assertFirstDotActive"/>
        <seeElement selector="{{SliderInAdmin.slideOptions}}" stepKey="seeSlideOptionsPanel"/>

        <comment userInput="User sees Slide 1 default title in the Slide Option Panel." stepKey="AC4"/>
        <see userInput="Slide1" selector="{{SliderInAdmin.slideOptionsTitle}}" stepKey="seeSlideOptionsAppearWithSlide1DefaultTitle"/>

        <comment userInput="User updates settings of first slide and saves configuration." stepKey="AC5"/>
        <actionGroup ref="openSlideOptionsByIndex" stepKey="openFirstSlideOptions">
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideTitleText1">
            <argument name="property" value="PageBuilderSlideItemTitle1"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanel1Settings"/>

        <comment userInput="Slide option panel is displayed" stepKey="AC6"/>
        <waitForElementVisible time="5" selector="{{SliderInAdmin.slideOptions}}" stepKey="SeeSlideOptionsAfterSaveSlide"/>

        <comment userInput="User hovers Slider, user sees Slider option panel" stepKey="AC7"/>
        <scrollTo selector="{{CmsNewPagePageActionsSection.content}}" stepKey="scrollToContent"/>
        <moveMouseOver selector="{{SliderInAdmin.sliderContainer}}" x="10" y="10" stepKey="onMouseOverContentBlockStage"/>
        <wait time="0.5" stepKey="waitForMouseOverAnimation" />
        <click stepKey="focusOnSlider" selector="{{SliderInAdmin.sliderContainer}}"/>

        <waitForElementVisible time="5" selector="{{SliderInAdmin.sliderOptions}}" stepKey="seeContentBlockOptionsMenu"/>
        <moveMouseOver selector="{{SliderInAdmin.sliderOptions}}" stepKey="onMouseOverOptionsMenu"/>

        <comment userInput="User doesn't see Slide Option panel, both option panels not displayed at once." stepKey="AC8"/>
        <waitForElementNotVisible time="5" selector="{{SliderInAdmin.slideOptions}}" stepKey="waitForSlideOptionsPanelNotVisible" />
        <dontSeeElement selector="{{SliderInAdmin.slideOptions}}" stepKey="seeSlideOptionsPanelStillHidden"/>

        <comment userInput="User sees button (+) inside the Slider Option Panel. Tooltip shows Add New Slide" stepKey="AC9"/>
        <seeElement selector="{{SliderInAdmin.addNewSlide}}" stepKey="seeAddNewSlideChild"/>
        <assertElementContainsAttribute selector="{{SliderInAdmin.addNewSlide}}" attribute="title" expectedValue="Add" stepKey="assertAddSlideTitle"/>

        <comment userInput="User clicks (+) icon, sees new slide added to to the right." stepKey="AC10"/>
        <actionGroup ref="addSlide" stepKey="addSecondSlide"/>

        <comment userInput="User sees slide configuration opened with a delay." stepKey="AC11"/>
        <waitForLoadingMaskToDisappear stepKey="waitForSlideAnimation2" />
        <waitForElementVisible stepKey="waitForNewSlide2" selector="{{PageBuilderActionsSection.editFormClose}}" time="10"/>
        <see userInput="Edit Slide" selector="{{PageBuilderActionsSection.editFormTitle}}" stepKey="seeEditSlide2"/>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeSlideEditPanel2"/>

        <comment userInput="New slide is focused, its option panel is displayed on top of the slider dot" stepKey="AC12"/>
        <waitForElementVisible selector="{{SliderInAdmin.slideNavigationDot('2')}}" stepKey="assertSecondDotAdded"/>
        <assertElementContainsAttribute selector="{{SliderInAdmin.slideNavigationDot('2')}}" attribute="class" expectedValue="active" stepKey="assertSecondDotActive"/>
        <seeElement selector="{{SliderInAdmin.slideOptions}}" stepKey="seeSlideOptionsPanel2"/>

        <comment userInput="Slide has default title Title N that reflects the order of the slide in the Slider." stepKey="AC13"/>
        <see userInput="Slide2" selector="{{SliderInAdmin.slideOptionsTitle}}" stepKey="seeSlideOptionsAppearWithSlide2DefaultTitle"/>
        <click stepKey="focusOutsideStage" selector="{{PageBuilderActionsSection.searchPanel}}"/>

        <comment userInput="User updates settings of second slide and saves configuration." stepKey="AC14"/>
        <actionGroup ref="openSlideOptionsByIndex" stepKey="openSecondSlideOptions">
            <argument name="index" value="2"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideTitleText2">
            <argument name="property" value="PageBuilderSlideItemTitle2"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanel2Settings"/>

        <comment userInput="User hovers each slide dot, user sees tooltip displayed with Slide title" stepKey="AC15"/>
        <click stepKey="unfocusNavigation" selector="{{SliderInAdmin.sliderContainer}}"/>
        <moveMouseOver selector="{{SliderInAdmin.activeSlideNavigationDot}}" stepKey="mouseOverActiveSlide2"/>
        <see userInput="{{PageBuilderSlideItemTitle2.value}}" selector="{{SliderInAdmin.slideNavigationDotTitleTooltip}}" stepKey="seeSlideTitle2InTooltip"/>
        <moveMouseOver selector="{{SliderInAdmin.slideNavigationDot('1')}}" stepKey="moveMouseOverFirstSlideNavigationDot"/>
        <see userInput="{{PageBuilderSlideItemTitle1.value}}" selector="{{SliderInAdmin.slideNavigationDotTitleTooltip}}" stepKey="seeSlideTitle1InTooltip"/>
    </test>
    <test name="SliderDelete">
        <annotations>
            <features value="Pagebuilder: Slider"/>
            <stories value="MAGETWO-83933: Advanced Slider"/>
            <title value="Remove slider content block from stage"/>
            <description value="A user should be able to remove slider block from a row."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-84919"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-slider"/>
            <group value="pagebuilder-sliderCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="turnOnPageBuilder" after="enableWYSIWYG"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStageAndExpectEditPanel" stepKey="dragSliderIntoStage">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeSlideEditPanel"/>
        <click selector="{{SliderInAdmin.slideWrapper}}" stepKey="clickSliderInStage"/>
        <actionGroup ref="removeContentBlockFromStage" stepKey="removeEmptyContentBlockFromStage">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <dontSeeElement selector="{{PageBuilderActionsSection.contentBlockInStage(PageBuilderSliderContentBlock.role)}}" stepKey="dontSeeContentBlockInStage"/>
    </test>
    <test name="SlideCanDeleteSlide">
        <annotations>
            <features value="Pagebuilder: Slider"/>
            <stories value="MAGETWO-87095: Delete Slide from Slider"/>
            <title value="Cannot delete last slide from slider"/>
            <description value="A user should be able delete slides when there are multiple of them."/>
            <severity value="CRITICAL"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-slider"/>
            <group value="pagebuilder-sliderCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="turnOnPageBuilder" after="enableWYSIWYG"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <comment userInput="Add slider with initial slide" stepKey="addSliderWithSlide"/>

        <actionGroup ref="dragContentBlockToStageAndExpectEditPanel" stepKey="dragSliderIntoStage">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeSlideEditPanel"/>
        <click selector="{{SliderInAdmin.slideNavigationDot('1')}}" stepKey="clickNavigationDot"/>
        <wait time="0.5" stepKey="waitForMouseOverAnimation" />
        <seeElement selector="{{SliderInAdmin.slideOptions}}" stepKey="seeContentBlockOptionsMenu"/>
        <click selector="{{SliderInAdmin.slideOptionsRemove}}" stepKey="clickRemoveContentBlock"/>
        <comment userInput="Verify cannot remove last slide" stepKey="cantRemoveLastSlide"/>

        <seeElement selector="{{SliderInAdmin.slideOptionsRemoveDisabled}}" stepKey="seeContentBlockRemoveOptionDisabled"/>
        <comment userInput="Add a second slide without custom content" stepKey="addSlideNoContent"/>

        <actionGroup ref="addSlide" stepKey="add0Slide"/>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeSlideEditPanel2"/>
        <seeNumberOfElements selector="{{SliderInAdmin.allNavigationDots}}" userInput="2" stepKey="validateNumberOfSlides2"/>
        <comment userInput="Remove slide without custom content has no confirmation modal" stepKey="removeSlideNoContent"/>

        <actionGroup ref="removeSlide" stepKey="removeSlide0"/>
        <seeNumberOfElements selector="{{SliderInAdmin.allNavigationDots}}" userInput="1" stepKey="validateNumberOfSlides1"/>
        <comment userInput="Add a slide with custom content" stepKey="addSlideCustomContent"/>

        <actionGroup ref="addSlide" stepKey="addSlide1"/>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectShowButtonAlwaysProperty">
            <argument name="property" value="PageBuilderSlideShowButtonAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideButtonText">
            <argument name="property" value="PageBuilderSlideButtonTextProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <seeNumberOfElements selector="{{SliderInAdmin.allNavigationDots}}" userInput="2" stepKey="validate2SlidesAgain"/>
        <comment userInput="Remove slide with custom content has confirmation modal" stepKey="removeSlideWithContent"/>

        <actionGroup ref="removeSlide" stepKey="removeSlide1"/>
        <waitForElementVisible selector="{{PageBuilderActionsSection.modal}}" time="10" stepKey="waitForModal"/>
        <actionGroup ref="confirmRemovalModal" stepKey="confirmSlideRemoval"/>
        <seeNumberOfElements selector="{{SliderInAdmin.allNavigationDots}}" userInput="1" stepKey="validateNumberOfSlides0"/>
    </test>
    <test name="SliderValidateAdvancedConfigurationDefaultValues">
        <annotations>
            <features value="Pagebuilder: Slider"/>
            <stories value="MAGETWO-83415: Bluefoot Content Blocks and Containers Advanced Configuration settings"/>
            <title value="Slider - Validate Advanced Configuration Default Values"/>
            <description value="Validate the default values for every attribute in the Advanced Configuration form and on Stage for Slider."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-89437"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-slider"/>
            <group value="pagebuilder-sliderCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStageAndExpectEditPanel" stepKey="dragSliderIntoStage">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <click selector="{{SliderInAdmin.slideWrapper}}" stepKey="clickSliderInStage"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection"/>
        <!-- Validate Default Values -->
        <comment userInput="Validate Default Values" stepKey="CommentValidateDefaultValues"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyNone"/>
        </actionGroup>
        <grabValueFrom selector="{{PageBuilderColumnSection.panelFieldControl(PageBuilderAdvancedBorderColorDefaultProperty.section, PageBuilderAdvancedBorderColorDefaultProperty.fieldName)}}" stepKey="getBorderColor"/>
        <assertEmpty actual="getBorderColor" actualType="variable" message="Text field has text: $getBorderColor" stepKey="assertBorderColor"/>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
        </actionGroup>
        <grabValueFrom selector="{{PageBuilderColumnSection.panelFieldControl(PageBuilderAdvancedCssClassesDefaultProperty.section, PageBuilderAdvancedCssClassesDefaultProperty.fieldName)}}" stepKey="getCssClasses"/>
        <assertEmpty actual="getCssClasses" actualType="variable" message="Text field was not empty. Had text: $getCssClasses" stepKey="assertCssClasses"/>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins">
            <argument name="property" value="PageBuilderMarginsPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding">
            <argument name="property" value="PageBuilderPaddingPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings2"/>
        <!-- Validate Style On Stage -->
        <comment userInput="Validate Style On Stage" stepKey="CommentValidateStage"/>
        <waitForElementVisible selector="{{SliderInAdmin.default('1', PageBuilderAdvancedBorderPropertyNone.value, PageBuilderAdvancedBorderRadiusDefaultProperty.value, PageBuilderMarginsPropertyDefault.value, PageBuilderPaddingPropertyDefault.value, PageBuilderSliderMinHeightDefault300Property.value)}}" stepKey="waitForStyle"/>
    </test>
    <test name="SlideValidateAdvancedConfigurationDefaultValues">
        <annotations>
            <features value="Pagebuilder: Slider"/>
            <stories value="MAGETWO-83415: Bluefoot Content Blocks and Containers Advanced Configuration settings"/>
            <title value="Slide - Validate Advanced Configuration Default Values"/>
            <description value="Validate the default values for every attribute in the Advanced Configuration form and on Stage for Slide."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-89439"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-slider"/>
            <group value="pagebuilder-sliderCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStageAndExpectEditPanel" stepKey="dragSliderIntoStage">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection"/>
        <!-- Validate Default Values -->
        <comment userInput="Validate Default Values" stepKey="CommentValidateDefaultValues"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyNone"/>
        </actionGroup>
        <grabValueFrom selector="{{PageBuilderColumnSection.panelFieldControl(PageBuilderAdvancedBorderColorDefaultProperty.section, PageBuilderAdvancedBorderColorDefaultProperty.fieldName)}}" stepKey="getBorderColor"/>
        <assertEmpty actual="getBorderColor" actualType="variable" message="Text field has text: $getBorderColor" stepKey="assertBorderColor"/>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
        </actionGroup>
        <grabValueFrom selector="{{PageBuilderColumnSection.panelFieldControl(PageBuilderAdvancedCssClassesDefaultProperty.section, PageBuilderAdvancedCssClassesDefaultProperty.fieldName)}}" stepKey="getCssClasses"/>
        <assertEmpty actual="getCssClasses" actualType="variable" message="Text field was not empty. Had text: $getCssClasses" stepKey="assertCssClasses"/>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins">
            <argument name="property" value="PageBuilderMarginsPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding">
            <argument name="property" value="PageBuilderPaddingProperty40"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <!-- Validate Style On Stage. Currently Not Implemented -->
        <comment userInput="Validate Style On Stage. Currently Not Implemented" stepKey="CommentValidateStage"/>
    </test>
    <test name="CanAddImageToSlide">
        <annotations>
            <features value="Pagebuilder: Slider"/>
            <stories value="MAGETWO-75774: Bluefoot Slide Configuration (without 1 appearance)"/>
            <title value="Slide has 'Edit Button Text' button styled correctly (Luna) in admin and frontend (Base)"/>
            <description value="A user should be able to see 'Edit Button Text' button styled correctly for Slide"/>
            <severity value="CRITICAL"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-slider"/>
            <group value="pagebuilder-sliderCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="turnOnPageBuilder" after="enableWYSIWYG"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <closeTab stepKey="closeTab"/>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStageAndExpectEditPanel" stepKey="dragSliderIntoStage">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachImageFile">
            <argument name="property" value="PageBuilderSlideBackgroundImageProperty"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutPropertyGeneral" stepKey="attachMobileImageFile">
            <argument name="property" value="PageBuilderSlideMobileImageProperty"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectShowButtonAlwaysProperty">
            <argument name="property" value="PageBuilderSlideShowButtonAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideButtonText">
            <argument name="property" value="PageBuilderSlideButtonTextProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideLinkUrl">
            <argument name="property" value="PageBuilderSlideLinkExternalUrlProperty"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterSlideShowOverlayAlways">
            <argument name="property" value="PageBuilderSlideShowContentOverlayAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <waitForElementVisible time="2" selector="{{SlideOnBackend.poster}}" stepKey="waitForPosterInAdmin" />
        <seeElement selector="{{SlideOnBackend.editButton(PageBuilderSlideButtonTypePrimaryProperty.value)}}" stepKey="buttonPrimaryStyled"/>
        <openNewTab stepKey="openNewTab"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <seeElement selector="{{SlideOnFrontend.slide}}" stepKey="verifySlideInFrontend"/>
        <waitForElementVisible time="3" selector="{{SlideOnFrontend.poster}}" stepKey="waitForPosterInFrontend"/>
        <seeElement selector="{{SlideOnFrontend.poster}}" stepKey="verifyPosterInFrontend"/>
        <seeElement selector="{{SlideOnFrontend.editButton(PageBuilderSlideButtonTypePrimaryProperty.value)}}" stepKey="buttonPrimaryStyledOnFrontend"/>
        <!-- Change button type value to secondary -->
        <comment userInput="Change Button Type to Secondary in admin" stepKey="secondary"/>
        <switchToPreviousTab stepKey="switchToPreviousTab"/>
        <actionGroup ref="openSlideOptions" stepKey="openEditMenuForSlideOnStageSecondary"/>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectButtonTypeSecondaryProperty">
            <argument name="property" value="PageBuilderSlideButtonTypeSecondaryProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings2"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage2"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <!-- Validate Stage 2 -->
        <comment userInput="Validate Stage 2" stepKey="commentValidateStage2"/>
        <waitForElementVisible time="2" selector="{{SlideOnBackend.poster}}" stepKey="waitForPosterInAdmin3" />
        <seeElement selector="{{SlideOnBackend.editButton(PageBuilderSlideButtonTypeSecondaryProperty.value)}}" stepKey="buttonSecondaryStyled"/>
        <switchToNextTab stepKey="switchToNextTab"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront2">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <!-- Validate Storefront 2 -->
        <comment userInput="Validate Storefront 2" stepKey="commentValidateStorefront2"/>
        <seeElement selector="{{SlideOnFrontend.slide}}" stepKey="verifySlideInFrontend2"/>
        <waitForElementVisible time="3" selector="{{SlideOnFrontend.poster}}" stepKey="waitForPosterInFrontend2"/>
        <seeElement selector="{{SlideOnFrontend.poster}}" stepKey="verifyPosterInFrontend2"/>
        <seeElement selector="{{SlideOnFrontend.editButton(PageBuilderSlideButtonTypeSecondaryProperty.value)}}" stepKey="buttonSecondaryStyledOnFrontend"/>
        <!-- Change button type value to link -->
        <comment userInput="Change Button Type to Link in admin" stepKey="link"/>
        <switchToPreviousTab stepKey="switchToPreviousTab2"/>
        <actionGroup ref="openSlideOptions" stepKey="openEditMenuForSlideOnStageLink"/>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectButtonTypeLinkProperty">
            <argument name="property" value="PageBuilderSlideButtonTypeLinkProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings3"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage3"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage3"/>
        <!-- Validate Stage 3 -->
        <comment userInput="Validate Stage 3" stepKey="commentValidateStage3"/>
        <waitForElementVisible time="2" selector="{{SlideOnBackend.poster}}" stepKey="waitForPosterInAdmin5" />
        <seeElement selector="{{SlideOnBackend.editButton(PageBuilderSlideButtonTypeLinkProperty.value)}}" stepKey="buttonLinkStyled"/>
        <switchToNextTab stepKey="switchToNextTab2"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront3">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <!-- Validate Storefront 3 -->
        <comment userInput="Validate Storefront 3" stepKey="commentValidateStorefront3"/>
        <seeElement selector="{{SlideOnFrontend.slide}}" stepKey="verifySlideInFrontend3"/>
        <waitForElementVisible time="3" selector="{{SlideOnFrontend.poster}}" stepKey="waitForPosterInFrontend3"/>
        <seeElement selector="{{SlideOnFrontend.poster}}" stepKey="verifyPosterInFrontend3"/>
        <seeElement selector="{{SlideOnFrontend.editButton(PageBuilderSlideButtonTypeLinkProperty.value)}}" stepKey="buttonLinkStyledOnFrontend"/>
    </test>
    <test name="SlideCanOpenInNewTab">
        <annotations>
            <features value="Pagebuilder: Slider"/>
            <stories value="MAGETWO-75774: Bluefoot Slide Configuration (without 1 appearance)"/>
            <title value="Slide can open in new tab in frontend"/>
            <description value="A user should be able to click on Slide and open in new tab for frontend"/>
            <severity value="CRITICAL"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-slider"/>
            <group value="pagebuilder-sliderCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="turnOnPageBuilder" after="enableWYSIWYG"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStageAndExpectEditPanel" stepKey="dragSliderIntoStage">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="attachFileSlideOutPropertyGeneral" stepKey="attachBackgroundImageFile">
            <argument name="property" value="PageBuilderSlideBackgroundImageProperty"/>
        </actionGroup>
        <actionGroup ref="scrollToSlideOutPanelField" stepKey="scrollToShowButton">
            <argument name="property" value="PageBuilderSlideShowButtonAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectShowButtonAlwaysProperty">
            <argument name="property" value="PageBuilderSlideShowButtonAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideButtonText">
            <argument name="property" value="PageBuilderSlideButtonTextProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideLinkUrl">
            <argument name="property" value="PageBuilderSlideLinkExternalUrlProperty"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterSlideShowOverlayAlways">
            <argument name="property" value="PageBuilderSlideShowContentOverlayAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="clickSlideOutPanelFieldGeneral" stepKey="enterBannerNewTab">
            <argument name="property" value="PageBuilderSlideNewTabProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <seeElementInDOM selector="{{SlideOnFrontend.linkUrl(PageBuilderSlideLinkExternalUrlProperty.value)}}" stepKey="seeLinkUrlInDom"/>
        <seeElementInDOM selector="{{SlideOnFrontend.openInNewTab}}" stepKey="verifyLinkOpensNewWindow"/>
    </test>
    <test name="SlideDoesNotNavigateInPreview">
        <annotations>
            <features value="Pagebuilder: Slider"/>
            <stories value="MAGETWO-75774: Bluefoot Slide Configuration (without 1 appearance)"/>
            <title value="Slide does not navigate on click"/>
            <description value="A user should be to click on the Slide in preview and not have it navigate to another page."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-slider"/>
            <group value="pagebuilder-sliderCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="turnOnPageBuilder" after="enableWYSIWYG"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStageAndExpectEditPanel" stepKey="dragSliderIntoStage">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="attachFileSlideOutProperty" stepKey="attachImageFile">
            <argument name="property" value="PageBuilderSlideBackgroundImageProperty"/>
        </actionGroup>
        <actionGroup ref="attachFileSlideOutPropertyGeneral" stepKey="attachMobileImageFile">
            <argument name="property" value="PageBuilderSlideMobileImageProperty"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="selectShowButtonAlwaysProperty">
            <argument name="property" value="PageBuilderSlideShowButtonAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideButtonText">
            <argument name="property" value="PageBuilderSlideButtonTextProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideLinkUrl">
            <argument name="property" value="PageBuilderSlideLinkExternalUrlProperty"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterSlideShowOverlayAlways">
            <argument name="property" value="PageBuilderSlideShowContentOverlayAlwaysProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <dontSeeElement selector="{{SlideOnBackend.linkUrl(PageBuilderSlideLinkExternalUrlProperty.value)}}" stepKey="dontSeeLinkUrl"/>
    </test>
    <test name="SlideCanAddImageToSlide">
        <annotations>
            <features value="Pagebuilder: Slider"/>
            <stories value="MAGETWO-86533: [UI component] MediaGalleryImage: inside form"/>
            <title value="Add an image content block into slide"/>
            <description value="A user should be able to add an image into a slide."/>
            <severity value="CRITICAL"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-slider"/>
            <group value="pagebuilder-sliderCommon"/>
            <!-- Skipped; see MAGETWO-88218 -->
            <group value="skip"/>
        </annotations>
        <before>
            <waitForPageLoad stepKey="waitForAdminLoginPageLoad"/>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <createData entity="_defaultCategory" stepKey="createPreReqCategory"/>
        </before>
        <after>
            <deleteData createDataKey="createPreReqCategory" stepKey="createPreReqCategory" />
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="navigateToCreatedCategory" stepKey="navigateToCreatedCatalogPage">
            <argument name="Category" value="$$createPreReqCategory$$"/>
        </actionGroup>
        <click selector="{{AdminProductFormSection.contentTab}}" stepKey="clickContentTab"/>
        <waitForElementVisible selector="{{PageBuilderActionsSection.openPageBuilderCatalog}}" stepKey="waitForPageBuilderBtn" />
        <see userInput="Edit with Page Builder" stepKey="seePageBuilderBtn"/>
        <click selector="{{PageBuilderActionsSection.openPageBuilderCatalog}}" stepKey="clickOnPageBuilderBtn" />
        <!--See PageBuilder fullsize-->
        <waitForElementVisible selector="{{PageBuilderActionsSection.identifyPageBuilder}}" stepKey="waiForPageBuilderVisible" />
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStageAndExpectEditPanel" stepKey="dragAdvancedSliderOntoStage">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideTitle1">
            <argument name="property" value="PageBuilderSlideItemTitle1"/>
        </actionGroup>
        <fillField selector="{{TextOnSlider.textArea}}" userInput="Text from Slide" stepKey="addTextToEditor"/>
        <seeElement selector="{{ImageOnConfigurationPanel.selectFromGalleryBtn('Background Image')}}" stepKey="seeSelectFromGalleryBtnOnImage"/>
        <seeElement selector="{{ImageOnConfigurationPanel.placeholderContent('Background Image')}}" stepKey="seeImagePlaceHolderOnImage1"/>

        <!--Upload image from local machine using image placeholder button-->
        <actionGroup ref="attachFileSlideOutPropertyGeneral" stepKey="attachSlideImageFile1">
            <argument name="property" value="PageBuilderSlideBackgroundImageProperty1"/>
        </actionGroup>
        <waitForElementVisible  selector="{{ImageOnConfigurationPanel.imageName(PageBuilderSlideBackgroundImageProperty1.value)}}" stepKey="waitForUploadImage1" />
        <seeElement selector="{{ImageOnConfigurationPanel.imageName(PageBuilderSlideBackgroundImageProperty1.value)}}" stepKey="seeImageNameOnPreview1"/>
        <seeElement selector="{{ImageOnConfigurationPanel.imageSource(PageBuilderSlideBackgroundImageProperty1.fileName)}}" stepKey="seeMainImageSource1"/>
        <seeElement selector="{{ImageOnConfigurationPanel.imagePreview}}" stepKey="seeImageDisplayed1"/>

        <!--Remove uploaded image by TrashBin icon-->
        <click selector="{{ImageOnConfigurationPanel.trashBinIcon}}" stepKey="removeUploadedImage1"/>
        <seeElement selector="{{ImageOnConfigurationPanel.placeholderContent('Background Image')}}" stepKey="seeImagePlaceHolderOnImage2"/>

        <!--Upload image from local machine using image placeholder button-->
        <actionGroup ref="attachFileSlideOutPropertyGeneral" stepKey="attachSlideImageFile2">
            <argument name="property" value="PageBuilderSlideBackgroundImageProperty1"/>
        </actionGroup>
        <waitForElementVisible  selector="{{ImageOnConfigurationPanel.imageName(PageBuilderSlideBackgroundImageProperty1.value)}}" stepKey="waitForUploadImage2" />
        <seeElement selector="{{ImageOnConfigurationPanel.imageName(PageBuilderSlideBackgroundImageProperty1.value)}}" stepKey="seeImageNameOnPreview2"/>

        <seeElement selector="{{ImageOnConfigurationPanel.imagePreview}}" stepKey="seeImageDisplayed2"/>
        <seeElement selector="{{ImageOnConfigurationPanel.imageSource(PageBuilderSlideBackgroundImageProperty1.fileName)}}" stepKey="seeMainImageSource2"/>
        <!--Overwrite uploaded image by selecting image from Media Gallery Storage-->
        <click selector="{{ImageOnConfigurationPanel.selectFromGalleryBtn('Background Image')}}" stepKey="clickImageSelectFromGalleryBtn"/>
        <waitForPageLoad stepKey="waitForPageLoad2" />
        <waitForLoadingMaskToDisappear stepKey="waitForLoading2" />
        <actionGroup ref="CreateImageFolder" stepKey="createImageFolder">
            <argument name="ImageFolder" value="ImageFolder"/>
        </actionGroup>
        <actionGroup ref="attachImage" stepKey="SelectImageFromMediaStorage">
            <argument name="Image" value="PageBuilderImagePropertyJpgCopy"/>
        </actionGroup>
        <actionGroup ref="saveImage" stepKey="saveImage"/>
        <seeElement selector="{{ImageOnConfigurationPanel.imageName(PageBuilderImagePropertyJpgCopy.value)}}" stepKey="seeImageNameOnPreview3"/>
        <seeElement selector="{{ImageOnConfigurationPanel.imageSource(PageBuilderSlideBackgroundImageProperty1.fileName)}}" stepKey="seeMainImageSource3"/>
        <seeElement selector="{{ImageOnConfigurationPanel.trashBinIcon}}" stepKey="seeTrashBinBtn"/>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings1"/>
        <click selector=".icon-pagebuilder-fullscreen-exit" stepKey="exitPageBuilderFullScreen" />
        <click selector="{{AdminCategoryMainActionsSection.SaveButton}}" stepKey="saveCategory"/>
        <waitForPageLoad stepKey="waitForPageLoad3" />
        <amOnPage url="$$createPreReqCategory.name$$.html" stepKey="goToCategoryFrontPage"/>
        <waitForPageLoad stepKey="waitForPageLoad4" />

        <!--Verify image on Storefront-->
        <seeElement selector="{{ImageOnConfigurationPanel.imageSource(PageBuilderSlideBackgroundImageProperty1.fileName)}}" stepKey="seeMainImageSource4"/>
    </test>
    <test name="SlideWithDefaultMinHeightAdjustsToContentHeight">
        <annotations>
            <features value="Pagebuilder: Slider"/>
            <stories value="MAGETWO-75774: Bluefoot Slide Configuration (without 1 appearance)"/>
            <title value="Slide shows full content even when larger than slide default minimum height on Admin and Storefront"/>
            <description value="If content height is larger than min height, verify slide height equals content height"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-88743"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-slider"/>
            <group value="pagebuilder-sliderCommon"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="turnOnPageBuilder" after="enableWYSIWYG"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStageAndExpectEditPanel" stepKey="dragSliderOntoStage">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <!-- Fill Out Edit Panel -->
        <comment userInput="Fill Out Edit Panel" stepKey="commentFillEditPanel"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterSlideTitle1">
            <argument name="property" value="PageBuilderSlideItemTitle1"/>
        </actionGroup>
        <actionGroup ref="scrollToSlideOutPanelField" stepKey="scrollToLink">
            <argument name="property" value="PageBuilderSlideItemLinkURL1"/>
        </actionGroup>
        <actionGroup ref="addTextToTinyMCE" stepKey="addTextToTinyMCE">
            <argument name="property" value="PageBuilderSlideMessageLongProperty"/>
            <argument name="section" value="SlideOnConfigurationPanel"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <!-- Depends on MQE-818 to grab computed height attribute using JS so instead adding long text content-->
        <see userInput="{{PageBuilderSlideItemTitle1.value}}" selector="{{SlideOnBackend.slideTitle('0')}}" stepKey="seeSlide1TitleDisplayedAdmin"/>
        <see userInput="{{PageBuilderSlideMessageLongProperty.value}}" selector="{{SlideOnBackend.slideContent('0')}}" stepKey="seeSlide1ContentDisplayedAdmin"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage 2 -->
        <comment userInput="Validate Stage 2" stepKey="commentValidateStage2"/>
        <waitForElementVisible selector="{{SliderInAdmin.sliderContainer}}" stepKey="waitForSliderContainer" time="10"/>
        <see userInput="{{PageBuilderSlideItemTitle1.value}}" selector="{{SlideOnBackend.slideTitle('0')}}" stepKey="seeSlide1TitleDisplayedAdminAfterSave"/>
        <see userInput="{{PageBuilderSlideMessageLongProperty.value}}" selector="{{SlideOnBackend.slideContent('0')}}" stepKey="seeSlide1ContentDisplayedAdminAfterSave"/>
        <grabTextFrom selector="{{SlideOnBackend.slideContent('0')}}" stepKey="grabSlideContent"/>
        <assertEquals expected="{{PageBuilderSlideMessageLongProperty.value}}" expectedType="string" actual="grabSlideContent" actualType="variable" message="actual=$grabSlideContent" stepKey="assertContentIsVisible"/>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentBlockType" value="PageBuilderSliderContentBlock"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <waitForElementVisible selector="{{SliderOnFrontend.SliderDisplay}}" stepKey="seeSliderOnPageBuilderPage"/>
        <see userInput="{{PageBuilderSlideItemTitle1.value}}" selector="{{SlideOnFrontend.slideTitle('0')}}" stepKey="seeSlide1TitleDisplayedOnStorefront"/>
        <see userInput="{{PageBuilderSlideMessageLongProperty.value}}" selector="{{SlideOnFrontend.slideContent('0')}}" stepKey="seeSlide1ContentDisplayedOnStorefront"/>
    </test>
</tests>
