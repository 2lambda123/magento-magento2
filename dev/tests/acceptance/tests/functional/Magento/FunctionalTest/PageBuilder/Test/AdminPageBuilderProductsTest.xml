<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="../../../../../../vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/Test/etc/testSchema.xsd">
    <test name="AdminPageBuilderProductsDoesNotAppearOnFrontendWhenNotConfigured">
        <annotations>
            <features value="Pagebuilder: Products"/>
            <stories value="MAGETWO-71425: Product list configuration with Magento Condition Tree"/>
            <title value="Products - No products appear on the storefront when dialog is closed (not saved) without being configured."/>
            <description value="Validate that when Products dialog is closed without configuring settings that no products show up on the storefront."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-91579"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <createData entity="PageBuilderProductsSubCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct1">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct2">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createPreReqProduct1" stepKey="deletePreReqProduct1"/>
            <deleteData createDataKey="createPreReqProduct2" stepKey="deletePreReqProduct2"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandGroupInteractive">
            <argument name="group" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragProductsIntoStage">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>

        <!-- Close, not save -->
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>

        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <grabMultiple selector="{{ProductsOnStage.product('1')}}" stepKey="grabStorefrontProducts"/>
        <assertCount expected="0" expectedType="int" actualType="variable" actual="grabStorefrontProducts" stepKey="assertStorefrontCountIs0" />
    </test>
    <test name="AdminPageBuilderProductsCanSaveConditionTest">
        <annotations>
            <features value="Pagebuilder: Products"/>
            <stories value="MAGETWO-71425: Product list configuration with Magento Condition Tree"/>
            <title value="Products - Save with condition"/>
            <description value="Validate that adding a condition in the General form for Products will update the Stage and Storefront correctly with the correct products."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-91579"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <createData entity="PageBuilderProductsSubCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct1">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct2">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createPreReqProduct1" stepKey="deletePreReqProduct1"/>
            <deleteData createDataKey="createPreReqProduct2" stepKey="deletePreReqProduct2"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandGroupInteractive">
            <argument name="group" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragProductsIntoStage">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <actionGroup ref="addCategoryConditionToProductsBlock" stepKey="addCategory">
            <argument name="page" value="ProductsContentTypeForm"/>
            <argument name="category" value="$$createPreReqCategory.id$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductsCountStage">
            <argument name="page" value="ProductsOnStage"/>
            <argument name="count" value="2"/>
        </actionGroup>
        <actionGroup ref="validateProductInProductsOnStage" stepKey="validateProductsStage">
            <argument name="page" value="ProductsOnStage"/>
        </actionGroup>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductCountStorefront">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="count" value="2"/>
        </actionGroup>
        <actionGroup ref="validateProductInProducts" stepKey="validateProductsStorefront">
            <argument name="page" value="ProductsOnStorefront"/>
        </actionGroup>
    </test>
    <test name="AdminPageBuilderProductsWithCount">
        <annotations>
            <features value="Pagebuilder: Products"/>
            <stories value="MAGETWO-71425: Product list configuration with Magento Condition Tree"/>
            <title value="Products - Save with products count"/>
            <description value="Validate that adding a products count update the Stage and Storefront correctly with the correct number of products."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-91579"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <createData entity="PageBuilderProductsSubCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct1">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct2">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createPreReqProduct1" stepKey="deletePreReqProduct1"/>
            <deleteData createDataKey="createPreReqProduct2" stepKey="deletePreReqProduct2"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandGroupInteractive">
            <argument name="group" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragProductsIntoStage">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>

        <!-- Add both products from the created category -->
        <actionGroup ref="addCategoryConditionToProductsBlock" stepKey="addCategory">
            <argument name="page" value="ProductsContentTypeForm"/>
            <argument name="category" value="$$createPreReqCategory.id$$"/>
        </actionGroup>

        <!-- Only one of them should be showing -->
        <waitForElementVisible selector="{{ProductsContentTypeForm.productsCountInput}}" stepKey="waitForProductCountToBeVisible"/>
        <waitForLoadingMaskToDisappear stepKey="waitForConditionsToLoad"/>
        <fillField selector="{{ProductsContentTypeForm.productsCountInput}}" userInput="1" stepKey="fillProductsCountField"/>

        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductsCountStage">
            <argument name="page" value="ProductsOnStage"/>
            <argument name="count" value="1"/>
        </actionGroup>
        <actionGroup ref="validateProductInProductsOnStage" stepKey="validateProductsStage">
            <argument name="page" value="ProductsOnStage"/>
        </actionGroup>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductCountStorefront">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="count" value="1"/>
        </actionGroup>
        <actionGroup ref="validateProductInProducts" stepKey="validateProductsStorefront">
            <argument name="page" value="ProductsOnStorefront"/>
        </actionGroup>
    </test>
    <test name="AdminPageBuilderProductsConfigurationIsPersistent">
        <annotations>
            <features value="Pagebuilder: Products"/>
            <stories value="MAGETWO-71425: Product list configuration with Magento Condition Tree"/>
            <title value="Products - Main configuration settings are properly saved"/>
            <description value="Validate that main settings are saved and loaded correctly on the stage in memory and after page reload."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-91579"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <createData entity="PageBuilderProductsSubCategory" stepKey="createPreReqCategory"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandGroupInteractive">
            <argument name="group" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragProductsIntoStage">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>

        <!-- Add a category rule -->
        <actionGroup ref="addCategoryConditionToProductsBlock" stepKey="addCategory">
            <argument name="page" value="ProductsContentTypeForm"/>
            <argument name="category" value="$$createPreReqCategory.id$$"/>
        </actionGroup>

        <!-- Set products count -->
        <waitForElementVisible selector="{{ProductsContentTypeForm.productsCountInput}}" stepKey="waitForProductCountToBeVisible"/>
        <waitForLoadingMaskToDisappear stepKey="waitForConditionsToLoad"/>
        <fillField selector="{{ProductsContentTypeForm.productsCountInput}}" userInput="1" stepKey="fillProductsCountField"/>

        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>

        <!-- Reopen the settings -->
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <waitForElementVisible selector="{{ProductsContentTypeForm.conditionsList}}" stepKey="waitForConditionsToLoad2"/>

        <!-- Verify settings -->
        <comment userInput="Validate Stage Settings" stepKey="commentValidateStageSettings"/>
        <grabTextFrom selector="{{ProductsContentTypeForm.conditionsListSavedValue('1','2')}}" stepKey="grabCategoryValue"/>
        <assertEquals expected="$$createPreReqCategory.id$$" expectedType="string" actualType="variable" actual="grabCategoryValue" stepKey="assertCategoryCondition" />
        <seeInField selector="{{ProductsContentTypeForm.productsCountInput}}" userInput="1" stepKey="assertProductsCountFieldValue"/>

        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>

        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>

        <!-- Validate Stage After Save -->
        <comment userInput="Re-Validate Stage" stepKey="commentReValidateStage"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <waitForElementVisible selector="{{ProductsContentTypeForm.conditionsList}}" stepKey="waitForConditionsToLoad3"/>
        <grabTextFrom selector="{{ProductsContentTypeForm.conditionsListSavedValue('1','2')}}" stepKey="grabCategoryValue2"/>
        <assertEquals expected="$$createPreReqCategory.id$$" expectedType="string" actualType="variable" actual="grabCategoryValue2" stepKey="assertCategoryCondition2" />
        <seeInField selector="{{ProductsContentTypeForm.productsCountInput}}" userInput="1" stepKey="assertProductsCountFieldValue2"/>
    </test>
    <test name="AdminPageBuilderProductsAllProductsShowWhenSavedWithoutConditions">
        <annotations>
            <features value="Pagebuilder: Products"/>
            <stories value="MAGETWO-71425: Product list configuration with Magento Condition Tree"/>
            <title value="Products - All products show when conditions are saved blank"/>
            <description value="Validate that when Products dialog is saved without configuring settings that all products show up without filtering."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-91579"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <createData entity="PageBuilderProductsSubCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct1">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct2">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createPreReqProduct1" stepKey="deletePreReqProduct1"/>
            <deleteData createDataKey="createPreReqProduct2" stepKey="deletePreReqProduct2"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandGroupInteractive">
            <argument name="group" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragProductsIntoStage">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>

        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>

        <waitForElementVisible selector="{{ProductsOnStage.product('1')}}" stepKey="waitForProductsToLoad"/>
        <grabMultiple selector="{{ProductsOnStage.product('1')}}" stepKey="grabProducts"/>
        <assertGreaterThanOrEqual expected="2" expectedType="int" actualType="variable" actual="grabProducts" stepKey="assertCountIsAtLeast2" />

        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <grabMultiple selector="{{ProductsOnStage.product('1')}}" stepKey="grabStorefrontProducts"/>
        <assertGreaterThanOrEqual expected="2" expectedType="int" actualType="variable" actual="grabStorefrontProducts" stepKey="assertStorefrontCountIsAtLeast2" />
    </test>
    <test name="ProductsDelete">
        <annotations>
            <features value="Pagebuilder: Products"/>
            <stories value="MAGETWO-71425: Product list configuration with Magento Condition Tree"/>
            <title value="Products - Delete Product List"/>
            <description value="A user should be able to delete an Product List content block. Verify on Stage amd Storefront."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-89887"/>
            <group value="pagebuilder"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disabledWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandGroupInteractive">
            <argument name="group" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragContentBlockToStage">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <actionGroup ref="removeEmptyContentBlockFromStage" stepKey="removeEmptyContentBlockFromStage">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <dontSeeElement selector="{{PageBuilderActionsSection.contentBlockInStage(PageBuilderProductsContentBlock.role)}}" stepKey="dontSeeContentBlockInStage"/>
    </test>
    <test name="ProductsValidateAdvancedConfigurationDefaultValues">
        <annotations>
            <features value="Pagebuilder: Products"/>
            <stories value="MAGETWO-71425: Product list configuration with Magento Condition Tree"/>
            <title value="Product List - Validate Advanced Configuration Default Values"/>
            <description value="Validate the default values for every attribute in the Advanced Configuration form and on Stage for Product List."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-89472"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-products"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <createData entity="PageBuilderProductsSubCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disabledWYSIWYG"/>
            <deleteData createDataKey="createPreReqProduct" stepKey="deletePreReqProduct"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandGroupInteractive">
            <argument name="group" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragProductsIntoStage">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <!-- Add both products from the created category -->
        <actionGroup ref="addCategoryConditionToProductsBlock" stepKey="addCategory">
            <argument name="page" value="ProductsContentTypeForm"/>
            <argument name="category" value="$$createPreReqCategory.id$$"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection"/>
        <!-- Validate Default Values -->
        <comment userInput="Validate Default Values" stepKey="CommentValidateDefaultValues"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyNone"/>
        </actionGroup>
        <grabValueFrom selector="{{PageBuilderColumnSection.panelFieldControl(PageBuilderAdvancedBorderColorDefaultProperty.section, PageBuilderAdvancedBorderColorDefaultProperty.fieldName)}}" stepKey="getBorderColor"/>
        <assertEmpty actual="getBorderColor" actualType="variable" message="Text field has text: $getBorderColor" stepKey="assertBorderColor"/>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
        </actionGroup>
        <grabValueFrom selector="{{PageBuilderColumnSection.panelFieldControl(PageBuilderAdvancedCssClassesDefaultProperty.section, PageBuilderAdvancedCssClassesDefaultProperty.fieldName)}}" stepKey="getCssClasses"/>
        <assertEmpty actual="getCssClasses" actualType="variable" message="Text field was not empty. Had text: $getCssClasses" stepKey="assertCssClasses"/>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins">
            <argument name="property" value="PageBuilderMarginsPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding">
            <argument name="property" value="PageBuilderPaddingPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <actionGroup ref="validateAdvancedStyleWithNoAlignment" stepKey="validateStage">
            <argument name="page" value="ProductsOnStage"/>
            <argument name="border" value="PageBuilderAdvancedBorderPropertyNone"/>
            <argument name="borderWidth" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
            <argument name="borderRadius" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
            <argument name="margin" value="PageBuilderMarginsPropertyDefault"/>
            <argument name="padding" value="PageBuilderPaddingPropertyDefault"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStage2"/>
        <actionGroup ref="validateAdvancedStyleWithNoAlignment" stepKey="validateStage2">
            <argument name="page" value="ProductsOnStage"/>
            <argument name="border" value="PageBuilderAdvancedBorderPropertyNone"/>
            <argument name="borderWidth" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
            <argument name="borderRadius" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
            <argument name="margin" value="PageBuilderMarginsPropertyDefault"/>
            <argument name="padding" value="PageBuilderPaddingPropertyDefault"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection2"/>
        <!-- Validate Edit Panel After Save -->
        <comment userInput="Validate Edit Panel After Save" stepKey="commentValidateEditPanel2"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment2">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder2">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyNone"/>
        </actionGroup>
        <grabValueFrom selector="{{PageBuilderColumnSection.panelFieldControl(PageBuilderAdvancedBorderColorDefaultProperty.section, PageBuilderAdvancedBorderColorDefaultProperty.fieldName)}}" stepKey="getBorderColor2"/>
        <assertEmpty actual="getBorderColor2" actualType="variable" message="Text field has text: $getBorderColor2" stepKey="assertBorderColor2"/>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth2">
            <argument name="property" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius2">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
        </actionGroup>
        <grabValueFrom selector="{{PageBuilderColumnSection.panelFieldControl(PageBuilderAdvancedCssClassesDefaultProperty.section, PageBuilderAdvancedCssClassesDefaultProperty.fieldName)}}" stepKey="getCssClasses2"/>
        <assertEmpty actual="getCssClasses2" actualType="variable" message="Text field was not empty. Had text: $getCssClasses2" stepKey="assertCssClasses2"/>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins2">
            <argument name="property" value="PageBuilderMarginsPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding2">
            <argument name="property" value="PageBuilderPaddingPropertyDefault"/>
        </actionGroup>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="validateAdvancedStyleWithNoAlignment" stepKey="validateStorefront">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="border" value="PageBuilderAdvancedBorderPropertyNone"/>
            <argument name="borderWidth" value="PageBuilderAdvancedBorderWidthPropertyDefault"/>
            <argument name="borderRadius" value="PageBuilderAdvancedBorderRadiusDefaultProperty"/>
            <argument name="margin" value="PageBuilderMarginsPropertyDefault"/>
            <argument name="padding" value="PageBuilderPaddingPropertyDefault"/>
            <argument name="index" value="1"/>
        </actionGroup>
    </test>
    <test name="ProductsUpdateAdvancedConfigurationValues">
        <annotations>
            <features value="Pagebuilder: Products"/>
            <stories value="MAGETWO-71425: Products configuration with Magento Condition Tree"/>
            <title value="Products - Update Advanced Configuration Values"/>
            <description value="Validate that updating every attribute in the Advanced Configuration form for Product List will update the Stage and Storefront correctly."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-90015"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-products"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <createData entity="PageBuilderProductsSubCategory" stepKey="createPreReqCategory"/>
            <createData entity="_defaultProduct" stepKey="createPreReqProduct">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createPreReqProduct" stepKey="deletePreReqProduct"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disabledWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragContentBlockToStage">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <!-- Add both products from the created category -->
        <actionGroup ref="addCategoryConditionToProductsBlock" stepKey="addCategory">
            <argument name="page" value="ProductsContentTypeForm"/>
            <argument name="category" value="$$createPreReqCategory.id$$"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection"/>
        <!-- Update Values -->
        <comment userInput="Update Values" stepKey="commentUpdateValues"/>
        <actionGroup ref="selectAlignment" stepKey="enterAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDouble"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderColor">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterBorderRadius">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusProperty12"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterCssClasses">
            <argument name="property" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldMargins" stepKey="enterMargins">
            <argument name="property" value="PageBuilderMarginsPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldPadding" stepKey="enterPadding">
            <argument name="property" value="PageBuilderPaddingPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate Stage -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage"/>
        <actionGroup ref="validateAdvancedStyleWithAllUpdated" stepKey="validateAllAdvancedStage">
            <argument name="page" value="ProductsOnStage"/>
            <argument name="alignment" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
            <argument name="border" value="PageBuilderAdvancedBorderPropertyDouble"/>
            <argument name="borderColor" value="PageBuilderAdvancedBorderColorProperty_green"/>
            <argument name="borderWidth" value="PageBuilderAdvancedBorderWidthProperty10"/>
            <argument name="borderRadius" value="PageBuilderAdvancedBorderRadiusProperty12"/>
            <argument name="cssClasses" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
            <argument name="margin" value="PageBuilderMarginsPropertyUnique"/>
            <argument name="padding" value="PageBuilderPaddingPropertyUnique"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection2"/>
        <!-- Validate Edit Panel -->
        <comment userInput="Validate Edit Panel" stepKey="commentValidateEditPanel"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDouble"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderColor">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusProperty12"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateCssClasses">
            <argument name="property" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
        </actionGroup>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins">
            <argument name="property" value="PageBuilderMarginsPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding">
            <argument name="property" value="PageBuilderPaddingPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Stage After Save -->
        <comment userInput="Validate Stage After Save" stepKey="commentValidateStage2"/>
        <actionGroup ref="validateAdvancedStyleWithAllUpdated" stepKey="validateAllAdvancedStage2">
            <argument name="page" value="ProductsOnStage"/>
            <argument name="alignment" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
            <argument name="border" value="PageBuilderAdvancedBorderPropertyDouble"/>
            <argument name="borderColor" value="PageBuilderAdvancedBorderColorProperty_green"/>
            <argument name="borderWidth" value="PageBuilderAdvancedBorderWidthProperty10"/>
            <argument name="borderRadius" value="PageBuilderAdvancedBorderRadiusProperty12"/>
            <argument name="cssClasses" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
            <argument name="margin" value="PageBuilderMarginsPropertyUnique"/>
            <argument name="padding" value="PageBuilderPaddingPropertyUnique"/>
            <argument name="index" value="1"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage3">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection3"/>
        <!-- Validate Edit Panel After Save -->
        <comment userInput="Validate Edit Panel After Save" stepKey="commentValidateEditPanel2"/>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateAlignment2">
            <argument name="property" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
        </actionGroup>
        <actionGroup ref="seeOptionIsSelectedSlideOutProperty" stepKey="validateBorder2">
            <argument name="property" value="PageBuilderAdvancedBorderPropertyDouble"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderColor2">
            <argument name="property" value="PageBuilderAdvancedBorderColorProperty_green"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderWidth2">
            <argument name="property" value="PageBuilderAdvancedBorderWidthProperty10"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateBorderRadius2">
            <argument name="property" value="PageBuilderAdvancedBorderRadiusProperty12"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="validateCssClasses2">
            <argument name="property" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
        </actionGroup>
        <actionGroup ref="seeInMarginFieldsSlideOutPanel" stepKey="validateMargins2">
            <argument name="property" value="PageBuilderMarginsPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="seeInPaddingFieldsSlideOutPanel" stepKey="validatePadding2">
            <argument name="property" value="PageBuilderPaddingPropertyUnique"/>
        </actionGroup>
        <actionGroup ref="navigateToStoreFront" stepKey="navigateToStoreFront">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <!-- Validate Storefront -->
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront"/>
        <actionGroup ref="validateAdvancedStyleWithAllUpdated" stepKey="validateAllAdvancedStorefront">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="alignment" value="PageBuilderAdvancedAlignmentPropertyCenter"/>
            <argument name="border" value="PageBuilderAdvancedBorderPropertyDouble"/>
            <argument name="borderColor" value="PageBuilderAdvancedBorderColorProperty_green"/>
            <argument name="borderWidth" value="PageBuilderAdvancedBorderWidthProperty10"/>
            <argument name="borderRadius" value="PageBuilderAdvancedBorderRadiusProperty12"/>
            <argument name="cssClasses" value="PageBuilderAdvancedCssClassesPropertyThreeClasses"/>
            <argument name="margin" value="PageBuilderMarginsPropertyUnique"/>
            <argument name="padding" value="PageBuilderPaddingPropertyUnique"/>
            <argument name="index" value="1"/>
        </actionGroup>
    </test>
    <test name="ShowOutOfStokProduct">
        <annotations>
            <features value="Pagebuilder: Products"/>
            <stories value="MAGETWO-71425: Product list configuration with Magento Condition Tree"/>
            <title value="Products - Show out of stock"/>
            <description value="Products display and respect global configuration settings Show Out Of Stock products"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-91579"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-products"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <actionGroup ref="displayOutOfStockProduct" stepKey="displayOutOfStockProduct"/>
            <createData entity="_defaultCmsPage" stepKey="createdCMSPage" />
            <createData entity="PageBuilderProductsSubCategory" stepKey="createPreReqCategory"/>
            <createData entity="SimpleProduct3" stepKey="createPreReqProductA">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <!--Create product quantity = 0-->
            <createData entity="SimpleProduct4" stepKey="createPreReqProductB">
                <requiredEntity createDataKey="createPreReqCategory"/>
            </createData>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <deleteData createDataKey="createPreReqProductA" stepKey="deletePreReqProductA"/>
            <deleteData createDataKey="createPreReqProductB" stepKey="deletePreReqProductB"/>
            <deleteData createDataKey="createPreReqCategory" stepKey="deletePreReqCategory"/>
            <deleteData createDataKey="createdCMSPage" stepKey="deleteCreatedCMSPage"/>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disabledWYSIWYG"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSBPage1">
            <argument name="CMSPage" value="$$createdCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="expandPageBuilderPanelGroup" stepKey="expandPageBuilderPanelGroup">
            <argument name="group" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <actionGroup ref="dragContentBlockToStage" stepKey="dragContentBlockToStage">
            <argument name="contentBlockType" value="PageBuilderProductsContentBlock"/>
        </actionGroup>
        <!-- Add both products from the created category -->
        <actionGroup ref="addCategoryConditionToProductsBlock" stepKey="addCategory">
            <argument name="page" value="ProductsContentTypeForm"/>
            <argument name="category" value="$$createPreReqCategory.id$$"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Validate Stage After Save Setting -->
        <comment userInput="Validate Stage" stepKey="commentValidateStage1"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductsCountStage1">
            <argument name="page" value="ProductsOnStage"/>
            <argument name="count" value="2"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront1"/>
        <amOnPage url="$$createdCMSPage.identifier$$" stepKey="amOnPageTestPage"/>
        <!-- Validate Storefront -->
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductCountStorefront1">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="count" value="2"/>
        </actionGroup>
        <actionGroup ref="noDisplayOutOfStockProduct" stepKey="dontDisplayOutOfStockProduct"/>
        <actionGroup ref="ClearCacheActionGroup" stepKey="clearMagentoCache"/>
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCreatedCMSBPage2">
            <argument name="CMSPage" value="$$createdCMSPage$$"/>
        </actionGroup>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <comment userInput="Validate Stage" stepKey="commentValidateStage2"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductsCountStage2">
            <argument name="page" value="ProductsOnStage"/>
            <argument name="count" value="1"/>
        </actionGroup>
        <comment userInput="Validate Storefront" stepKey="commentValidateStorefront2"/>
        <actionGroup ref="validateProductCountInProducts" stepKey="validateProductCountStorefront2">
            <argument name="page" value="ProductsOnStorefront"/>
            <argument name="count" value="1"/>
        </actionGroup>
    </test>
</tests>
