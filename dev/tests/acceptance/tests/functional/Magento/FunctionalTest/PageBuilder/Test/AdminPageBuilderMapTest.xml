<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="../../../../../../vendor/magento/magento2-functional-testing-framework/src/Magento/FunctionalTestingFramework/Test/etc/testSchema.xsd">
    <test name="MapDefaultState">
        <annotations>
            <features value="Pagebuilder"/>
            <stories value="Map"/>
            <stories value="MAGETWO-87083"/>
            <title value="Map - Default Map State"/>
            <description value="Tests default state of a map content block in the stage and storefront"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-88749"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-map"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <amOnPage url="admin/admin/auth/logout" stepKey="amOnLogoutPage"/>
            <waitForPageLoad stepKey="waitForAdminLoginPageLoad"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle1">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <click selector="{{PageBuilderActionsSection.interactiveGroup}}" stepKey="clickInteractiveGroup"/>
        <actionGroup ref="dragContentBlockToStageAndExpectEditPanel" stepKey="dragContentBlockIntoStage">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanel"/>
        <!-- Verify Default Map in Preview -->
        <actionGroup ref="validateEmptyMapStage" stepKey="validateEmptyMapStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <!-- Verify Default Map in Stage After Page Save -->
        <actionGroup ref="validateEmptyMapStage" stepKey="validateEmptyMapStage2"/>
        <amOnPage url="map{{PageBuilderPageTitle.pageName}}" stepKey="amOnPageBuilderPage"/>
        <waitForPageLoad stepKey="waitForStoreFrontPageLoad"/>
        <!-- Verify Default Map in Storefront -->
        <actionGroup ref="validateEmptyMapStoreFront" stepKey="validateEmptyMapStoreFront"/>
    </test>
    <test name="MapEditPanelGeneralSectionDefaultState">
        <annotations>
            <features value="Pagebuilder"/>
            <stories value="Map"/>
            <stories value="MAGETWO-87083"/>
            <title value="Map - General Section Default State"/>
            <description value="Tests the following for each attribute under General Section: 1) field exists, 2) field required or not, 3) field enabled/disabled, 4) field default value, 5) drop-down options count if applicable, 6) placeholder text if applicable"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-88892"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-map"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <amOnPage url="admin/admin/auth/logout" stepKey="amOnLogoutPage"/>
            <waitForPageLoad stepKey="waitForAdminLoginPageLoad"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle1">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <click selector="{{PageBuilderActionsSection.interactiveGroup}}" stepKey="clickInteractiveGroup"/>
        <actionGroup ref="dragContentBlockToStageAndExpectEditPanel" stepKey="dragContentBlockIntoStage">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <!-- Position -->
        <actionGroup ref="validateSlideOutPanelField" stepKey="seePositionAttribute">
            <argument name="property" value="PageBuilderMapPositionDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotRequired" stepKey="validatePositionAttributeNotRequired">
            <argument name="property" value="PageBuilderMapPositionDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateEmptyMapConfigurationPanel" stepKey="validateEmptyMapConfigurationPanel"/>
        <seeElement selector="{{MapOnConfigurationPanel.mapHelperText}}" stepKey="seeMapHelperText"/>
        <!-- Width -->
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeWidthAttribute">
            <argument name="property" value="PageBuilderMapWidthDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotRequired" stepKey="validateWidthAttributeNotRequired">
            <argument name="property" value="PageBuilderMapWidthDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotDisabled" stepKey="validateWidthAttributeNotDisabled">
            <argument name="property" value="PageBuilderMapWidthDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeWidthAttributeValue">
            <argument name="property" value="PageBuilderMapWidthDefaultProperty"/>
        </actionGroup>
        <!-- Height -->
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeHeightAttribute">
            <argument name="property" value="PageBuilderMapHeightDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotRequired" stepKey="validateHeightAttributeNotRequired">
            <argument name="property" value="PageBuilderMapHeightDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotDisabled" stepKey="validateHeightAttributeNotDisabled">
            <argument name="property" value="PageBuilderMapHeightDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeHeightAttributeValue">
            <argument name="property" value="PageBuilderMapHeightDefaultProperty"/>
        </actionGroup>
        <!-- Save page and verify fields -->
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <!-- Position -->
        <seeElement selector="{{MapOnConfigurationPanel.map}}" stepKey="seeMap2"/>
        <seeElement selector="{{MapOnConfigurationPanel.mapFullScreen}}" stepKey="seeFullScreenButton2"/>
        <seeElement selector="{{MapOnConfigurationPanel.mapPegman}}" stepKey="seePegmanButton2"/>
        <seeElement selector="{{MapOnConfigurationPanel.mapSatelliteView}}" stepKey="seeSatelliteViewButton2"/>
        <seeElement selector="{{MapOnConfigurationPanel.mapStreetView}}" stepKey="seeStreetViewButton2"/>
        <seeElement selector="{{MapOnConfigurationPanel.mapZoomIn}}" stepKey="seeZoomInButton2"/>
        <seeElement selector="{{MapOnConfigurationPanel.mapZoomOut}}" stepKey="seeZoomOutButton2"/>
        <!-- Width -->
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeWidthAttributeValue2">
            <argument name="property" value="PageBuilderMapWidthDefaultProperty"/>
        </actionGroup>
        <!-- Height -->
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeHeightAttributeValue2">
            <argument name="property" value="PageBuilderMapHeightDefaultProperty"/>
        </actionGroup>
    </test>
    <test name="MapEditPanelAdvancedSectionDefaultState">
        <annotations>
            <features value="Pagebuilder"/>
            <stories value="Map"/>
            <stories value="MAGETWO-87083"/>
            <title value="Map - Advanced Section Default State"/>
            <description value="Tests the following for each attribute under Advanced Section: 1) field exists, 2) field required or not, 3) field enabled/disabled, 4) field default value, 5) drop-down options count if applicable, 6) placeholder text if applicable"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-88893"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-map"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <amOnPage url="admin/admin/auth/logout" stepKey="amOnLogoutPage"/>
            <waitForPageLoad stepKey="waitForAdminLoginPageLoad"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle1">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <click selector="{{PageBuilderActionsSection.interactiveGroup}}" stepKey="clickInteractiveGroup"/>
        <actionGroup ref="dragContentBlockToStageAndExpectEditPanel" stepKey="dragContentBlockIntoStage">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection"/>
        <!-- CSS Classes -->
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeCSSClassesAttribute">
            <argument name="property" value="PageBuilderAdvancedCssClassesDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotRequired" stepKey="validateCSSClassesAttributeNotReqouired">
            <argument name="property" value="PageBuilderAdvancedCssClassesDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotDisabled" stepKey="validateCSSClassesAttributeNotDisabled">
            <argument name="property" value="PageBuilderAdvancedCssClassesDefaultProperty"/>
        </actionGroup>
        <!-- Refactor in MAGETWO-88795 -->
        <grabValueFrom selector="{{PageBuilderColumnSection.panelFieldControl(PageBuilderAdvancedCssClassesDefaultProperty.section, PageBuilderAdvancedCssClassesDefaultProperty.fieldName)}}" stepKey="getTextFromCSSClassesAttribute"/>
        <assertEmpty actual="getTextFromCSSClassesAttribute" actualType="variable" message="Text field was not empty. Had text: $getTextFromCSSClassesAttribute" stepKey="assertGetTextFromCSSClassesAttribute"/>
        <!-- Alignment -->
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeAlignmentAttribute">
            <argument name="property" value="PageBuilderAdvancedAlignmentDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotRequired" stepKey="validateAlignmentAttributeNotRequired">
            <argument name="property" value="PageBuilderAdvancedAlignmentDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotDisabled" stepKey="validateAlignmentAttributeNotDisabled">
            <argument name="property" value="PageBuilderAdvancedAlignmentDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeAlignmentAttributeValue">
            <argument name="property" value="PageBuilderAdvancedAlignmentDefaultProperty"/>
        </actionGroup>
        <grabMultiple selector="{{PageBuilderColumnSection.panelFieldOptions(PageBuilderAdvancedAlignmentDefaultProperty.section, PageBuilderAdvancedAlignmentDefaultProperty.fieldName)}}" userInput="value" stepKey="grabAlignmentOptions"/>
        <assertCount actual="grabAlignmentOptions" actualType="variable" expected="4" expectedType="int" stepKey="assertAlignmentOptions"/>
        <!-- Margins and Padding -->
        <actionGroup ref="validateSlideOutPanelField" stepKey="seeMarginsAndPaddingAttribute">
            <argument name="property" value="PageBuilderAdvancedMarginsAndPaddingDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="validateSlideOutPanelFieldIsNotRequired" stepKey="validateMarginsAndPaddingAttributeNotRequired">
            <argument name="property" value="PageBuilderAdvancedMarginsAndPaddingDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="seeInMarginsAndPaddingFieldSlideOutPanel" stepKey="seeMarginsAndPaddingValues">
            <argument name="property" value="PageBuilderAdvancedMarginsAndPaddingPropertyDefault"/>
        </actionGroup>
        <!-- Save page and verify fields (because some of them change) -->
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection2"/>
        <!--CSS Classes-->
        <!-- Refactor in MAGETWO-88795 -->
        <grabValueFrom selector="{{PageBuilderColumnSection.panelFieldControl(PageBuilderAdvancedCssClassesDefaultProperty.section, PageBuilderAdvancedCssClassesDefaultProperty.fieldName)}}" stepKey="getTextFromCSSClassesAttribute2"/>
        <assertEmpty actual="getTextFromCSSClassesAttribute2" actualType="variable" message="Text field was not empty. Had text: $getTextFromCSSClassesAttribute2" stepKey="assertGetTextFromCSSClassesAttribute2"/>
        <!-- Alignment -->
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeAlignmentAttributeValue2">
            <argument name="property" value="PageBuilderAdvancedAlignmentDefaultProperty"/>
        </actionGroup>
        <!-- Margins and Padding -->
        <actionGroup ref="seeInMarginsAndPaddingFieldSlideOutPanel" stepKey="seeMarginsAndPaddingValues2">
            <argument name="property" value="PageBuilderAdvancedMarginsAndPaddingPropertyDefault"/>
        </actionGroup>
    </test>
    <test name="MapVerifyOnHoverOptionMenu">
        <annotations>
            <features value="Pagebuilder"/>
            <stories value="Map"/>
            <stories value="MAGETWO-87083"/>
            <title value="Map - Verify On Hover Option Menu"/>
            <description value="Test verifies that on hover option menu for Map content block contains all buttons"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-88894"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-map"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <amOnPage url="admin/admin/auth/logout" stepKey="amOnLogoutPage"/>
            <waitForPageLoad stepKey="waitForAdminLoginPageLoad"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle1">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <click selector="{{PageBuilderActionsSection.interactiveGroup}}" stepKey="clickInteractiveGroup"/>
        <actionGroup ref="dragContentBlockToStageAndExpectEditPanel" stepKey="dragContentBlockIntoStage">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanelSettings"/>
        <waitForElementVisible time="10" selector="{{PageBuilderActionsSection.contentBlockInStage(PageBuilderMapContentBlock.role)}}" stepKey="waitForMapInStageVisible" />
        <moveMouseOver selector="{{PageBuilderActionsSection.contentBlockInStage(PageBuilderMapContentBlock.role)}}" stepKey="onMouseOverMapStage"/>
        <waitForElementVisible time="10" selector="{{PageBuilderActionsSection.contentBlockOptionsMenu(PageBuilderMapContentBlock.role)}}" stepKey="waitForOptionsMenu" />
        <see selector="{{PageBuilderActionsSection.contentBlockOptionsMenu(PageBuilderMapContentBlock.role)}}" userInput="{{PageBuilderMapContentBlock.name}}" stepKey="seeMapOptionMenuTitle"/>
        <seeElement selector="{{PageBuilderActionsSection.contentBlockMove(PageBuilderMapContentBlock.role)}}" stepKey="seeMapOptionsMove"/>
        <seeElement selector="{{PageBuilderActionsSection.contentBlockEdit(PageBuilderMapContentBlock.role)}}" stepKey="seeMapOptionsEdit"/>
        <seeElement selector="{{PageBuilderActionsSection.contentBlockDuplicate(PageBuilderMapContentBlock.role, '1')}}" stepKey="seeMapOptionsDuplicate"/>
        <seeElement selector="{{PageBuilderActionsSection.contentBlockRemove(PageBuilderMapContentBlock.role)}}" stepKey="seeMapOptionsRemove"/>
    </test>
    <test name="MapAddPinToMap">
        <annotations>
            <features value="Pagebuilder"/>
            <stories value="Map"/>
            <stories value="MAGETWO-87083"/>
            <title value="Map - Add Pin To Map"/>
            <description value="A user should be able to add a pin to a map and see the pin on Edit Panel, Preview, and Storefront."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-88929"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-map"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <amOnPage url="admin/admin/auth/logout" stepKey="amOnLogoutPage"/>
            <waitForPageLoad stepKey="waitForAdminLoginPageLoad"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle1">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <click selector="{{PageBuilderActionsSection.interactiveGroup}}" stepKey="clickInteractiveGroup"/>
        <actionGroup ref="dragContentBlockToStageAndExpectEditPanel" stepKey="dragContentBlockIntoStage">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection"/>
        <!-- Add Pin To Map -->
        <actionGroup ref="addMapPin" stepKey="enterMapPositionProperties">
            <argument name="property" value="PageBuilderMapPinDefaultProperty"/>
        </actionGroup>
        <!-- Edit Panel: Verify Pin Position -->
        <seeElement selector="{{MapOnConfigurationPanel.mapPinPosition(PageBuilderMapPinDefaultProperty.leftPosition, PageBuilderMapPinDefaultProperty.topPosition, PageBuilderMapPinDefaultProperty.zIndex, PageBuilderMapPinDefaultProperty.leftPosition2)}}" stepKey="verifyMapPinPosition"/>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Preview: Verify Map Has Pin & Tooltip -->
        <seeElement selector="{{MapOnStage.mapWithPin(PageBuilderMapPinDefaultProperty.lat, PageBuilderMapPinDefaultProperty.lng)}}" stepKey="verifyPreviewHasMapWithPin"/>
        <actionGroup ref="validateMapToolTipStage" stepKey="validateMapToolTipStage">
            <argument name="property" value="PageBuilderMapPinDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <!-- Preview: Verify Map Has Pin After Save -->
        <seeElement selector="{{MapOnStage.mapWithPin(PageBuilderMapPinDefaultProperty.lat, PageBuilderMapPinDefaultProperty.lng)}}" stepKey="verifyPreviewHasMapWithPin2"/>
        <actionGroup ref="validateMapToolTipStage" stepKey="validateMapToolTipStage2">
            <argument name="property" value="PageBuilderMapPinDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <!-- Edit Panel: Verify Pin Position After Save -->
        <seeElement selector="{{MapOnConfigurationPanel.mapPinPosition(PageBuilderMapPinDefaultProperty.leftPosition, PageBuilderMapPinDefaultProperty.topPosition, PageBuilderMapPinDefaultProperty.zIndex, PageBuilderMapPinDefaultProperty.leftPosition2)}}" stepKey="verifyMapPinPosition2"/>
        <amOnPage url="map{{PageBuilderPageTitle.pageName}}" stepKey="amOnPageBuilderPage2"/>
        <waitForPageLoad stepKey="waitForStoreFrontPageLoad"/>
        <!-- Storefront: Verify Pin Position -->
        <waitForElementVisible selector="{{MapOnFrontend.mapWithPin(PageBuilderMapPinDefaultProperty.lat, PageBuilderMapPinDefaultProperty.lng)}}" stepKey="waitForMapPinOnFrontend"/>
        <actionGroup ref="validateMapToolTipStoreFront" stepKey="validateMapToolTipStoreFront">
            <argument name="property" value="PageBuilderMapPinDefaultProperty"/>
        </actionGroup>
    </test>
    <test name="MapCannotAddPinToMapOnStageOrStoreFront">
        <annotations>
            <features value="Pagebuilder"/>
            <stories value="Map"/>
            <stories value="MAGETWO-87083"/>
            <title value="Map - Cannot Add Pin To Map In Preview Or Store Front"/>
            <description value="A user should not be able to add a pin to a map from the preview nor the store front."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-88895"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-map"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <amOnPage url="admin/admin/auth/logout" stepKey="amOnLogoutPage"/>
            <waitForPageLoad stepKey="waitForAdminLoginPageLoad"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle1">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <click selector="{{PageBuilderActionsSection.interactiveGroup}}" stepKey="clickInteractiveGroup"/>
        <actionGroup ref="dragContentBlockToStageAndExpectEditPanel" stepKey="dragContentBlockIntoStage">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanel"/>
        <!-- Try To Add Pin From Preview -->
        <waitForElementVisible selector="{{MapOnStage.map}}" stepKey="waitForMapVisible" />
        <click selector="{{MapOnStage.map}}" stepKey="doubleClickMap"/>
        <seeElement selector="{{MapOnStage.emptyMap(PageBuilderMapPositionDefaultProperty.lat, PageBuilderMapPositionDefaultProperty.lng)}}" stepKey="seeEmptyMapPreview"/>
        <dontSeeElementInDOM selector="{{MapOnStage.mapWithPin(PageBuilderMapPinDefaultProperty.lat, PageBuilderMapPinDefaultProperty.lng)}}" stepKey="dontSeeMapPinPreview"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <waitForElementVisible selector="{{MapOnConfigurationPanel.map}}" stepKey="waitForMapVisibleEditPanel" />
        <!-- Verify No Pin In Configuration Panel -->
        <dontSeeElementInDOM selector="{{MapOnConfigurationPanel.mapPin(PageBuilderMapPinDefaultProperty.lat, PageBuilderMapPinDefaultProperty.lng)}}" stepKey="dontSeeMapPinEditPanel"/>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanel2"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <amOnPage url="map{{PageBuilderPageTitle.pageName}}" stepKey="amOnPageBuilderPage2"/>
        <waitForPageLoad stepKey="waitForStoreFrontPageLoad"/>
        <waitForElement selector="{{MapOnFrontend.emptyMap}}" stepKey="waitForMapStoreFront" />
        <!-- Verify No Pin In Store Front -->
        <dontSeeElementInDOM selector="{{MapOnFrontend.mapWithPin(PageBuilderMapPinDefaultProperty.lat, PageBuilderMapPinDefaultProperty.lng)}}" stepKey="dontSeeMapPinStoreFront"/>
    </test>
    <test name="MapMoveMapPin">
        <annotations>
            <features value="Pagebuilder"/>
            <stories value="Map"/>
            <stories value="MAGETWO-87083"/>
            <title value="Map - Add Pin To Map"/>
            <description value="A user should be able to move a map pin only on the Configuration Panel."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-88930"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-map"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <amOnPage url="admin/admin/auth/logout" stepKey="amOnLogoutPage"/>
            <waitForPageLoad stepKey="waitForAdminLoginPageLoad"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle1">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <click selector="{{PageBuilderActionsSection.interactiveGroup}}" stepKey="clickInteractiveGroup"/>
        <actionGroup ref="dragContentBlockToStageAndExpectEditPanel" stepKey="dragContentBlockIntoStage">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection"/>
        <!-- Add Pin To Map -->
        <actionGroup ref="addMapPin" stepKey="addMapPin">
            <argument name="property" value="PageBuilderMapPinDefaultProperty"/>
        </actionGroup>
        <!-- Edit Panel: Get Initial Pin Location -->
        <waitForElementVisible selector="{{MapOnConfigurationPanel.map}}" stepKey="waitForMapVisibleEditPanel"/>
        <executeJS function="document.querySelector('{{MapOnConfigurationPanel.mapPositionJS}}').style.display = 'block'" stepKey="setPositionPropertyVisibleEditPanel"/>
        <grabValueFrom selector="{{MapOnConfigurationPanel.mapPosition}}" stepKey="mapPositionEditPanel"/>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Stage: Get Initial Pin Location -->
        <executeJS function="document.querySelectorAll('{{MapOnStage.mapGetIFrameJS}}')[0].setAttribute('id', 'mapIFrame');" stepKey="makeIFrameInteractableStage"/>
        <switchToIFrame selector="mapIFrame" stepKey="switchToIFrameStage"/>
        <waitForElementVisible selector="{{MapOnStage.mapPinInitialLocation}}" stepKey="waitForPinLocationStage"/>
        <grabAttributeFrom selector="{{MapOnStage.mapPinInitialLocation}}" userInput="style" stepKey="grabPinLocationStage"/>
        <switchToIFrame selector="" stepKey="exitIFrameStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <!-- Storefront: Get Initial Pin Location -->
        <openNewTab stepKey="openNewTab"/>
        <amOnPage url="map{{PageBuilderPageTitle.pageName}}" stepKey="amOnPageBuilderPage"/>
        <waitForPageLoad stepKey="waitForStoreFrontPageLoad"/>
        <executeJS function="document.querySelectorAll('{{MapOnFrontend.mapGetIFrameJS}}')[0].setAttribute('id', 'mapIFrame');" stepKey="makeIFrameInteractableStoreFront"/>
        <switchToIFrame selector="mapIFrame" stepKey="switchToIFrameStoreFront"/>
        <waitForElementVisible selector="{{MapOnFrontend.mapPinInitialLocation}}" stepKey="waitForPinLocationStoreFront"/>
        <grabAttributeFrom selector="{{MapOnFrontend.mapPinInitialLocation}}" userInput="style" stepKey="grabPinLocationStoreFront"/>
        <switchToIFrame selector="" stepKey="exitIFrameStoreFront"/>
        <!-- Switch Back To Backend -->
        <switchToNextTab stepKey="switchToNextTab"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <!-- Move Map Pin -->
        <actionGroup ref="moveMapPinByClick" stepKey="moveMapPinByClick"/>
        <!-- Edit Panel: Verify Pin Location Moved -->
        <waitForElementVisible selector="{{MapOnConfigurationPanel.map}}" stepKey="waitForMapVisibleEditPanel2"/>
        <executeJS function="document.querySelector('{{MapOnConfigurationPanel.mapPositionJS}}').style.display = 'block'" stepKey="setPositionPropertyVisibleEditPanel2"/>
        <grabValueFrom selector="{{MapOnConfigurationPanel.mapPosition}}" stepKey="mapPositionEditPanel2"/>
        <assertNotEquals expected="mapPositionEditPanel" expectedType="variable" actual="mapPositionEditPanel2" actualType="variable" message="actual=$mapPositionEditPanel2, expected=$mapPositionEditPanel2" stepKey="assertPinLocationChangedEditPanel"/>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings2"/>
        <!-- Stage: Verify Pin Location Moved -->
        <executeJS function="document.querySelectorAll('{{MapOnStage.mapGetIFrameJS}}')[0].setAttribute('id', 'mapIFrame');" stepKey="makeIFrameInteractableStage2"/>
        <switchToIFrame selector="mapIFrame" stepKey="switchToIFrameStage2"/>
        <waitForElementVisible selector="{{MapOnStage.mapPinMovedLocation}}" stepKey="waitForPinLocationStage2"/>
        <grabAttributeFrom selector="{{MapOnStage.mapPinMovedLocation}}" userInput="style" stepKey="grabPinLocationStage2"/>
        <switchToIFrame selector="" stepKey="exitIFrameStage2"/>
        <assertNotEquals expected="grabPinLocationStage" expectedType="variable" actual="grabPinLocationStage2" actualType="variable" message="actual=$grabPinLocationStage2, expected=$grabPinLocationStage2" stepKey="assertPinLocationChangedStage"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage2"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage3"/>
        <!-- Stage: Verify Map Pin Still Moved After Save -->
        <scrollTo selector="{{CmsNewPagePageContentSection.header}}" stepKey="scrollToMap"/>
        <executeJS function="document.querySelectorAll('{{MapOnStage.mapGetIFrameJS}}')[0].setAttribute('id', 'mapIFrame');" stepKey="makeIFrameInteractableStage3"/>
        <switchToIFrame selector="mapIFrame" stepKey="switchToIFrameStage3"/>
        <waitForElementVisible selector="{{MapOnStage.mapPinMovedLocation}}" stepKey="waitForPinLocationStage3"/>
        <grabAttributeFrom selector="{{MapOnStage.mapPinMovedLocation}}" userInput="style" stepKey="grabPinLocationStage3"/>
        <switchToIFrame selector="" stepKey="exitIFrameStage3"/>
        <assertNotEquals expected="grabPinLocationStage" expectedType="variable" actual="grabPinLocationStage3" actualType="variable" message="actual=$grabPinLocationStage3, expected=$grabPinLocationStage" stepKey="assertPinLocationChangedStage2"/>
        <assertEquals expected="grabPinLocationStage2" expectedType="variable" actual="grabPinLocationStage3" actualType="variable" message="actual=$grabPinLocationStage3, expected=$grabPinLocationStage2" stepKey="assertPinLocationChangedStage3"/>
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage2">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <!-- Edit Panel: Verify Pin Location Moved After Save -->
        <waitForElementVisible selector="{{MapOnConfigurationPanel.map}}" stepKey="waitForMapVisibleEditPanel3"/>
        <executeJS function="document.querySelector('{{MapOnConfigurationPanel.mapPositionJS}}').style.display = 'block'" stepKey="setPositionPropertyVisibleEditPanel3"/>
        <grabValueFrom selector="{{MapOnConfigurationPanel.mapPosition}}" stepKey="mapPositionEditPanel3"/>
        <assertNotEquals expected="mapPositionEditPanel" expectedType="variable" actual="mapPositionEditPanel3" actualType="variable" message="actual=$mapPositionEditPanel3, expected=$mapPositionEditPanel" stepKey="assertPinLocationChangedEditPanel2"/>
        <assertStringStartsWith expected="mapPositionEditPanel2" expectedType="variable" actual="mapPositionEditPanel3" actualType="variable" message="actual=$mapPositionEditPanel3, expected=$mapPositionEditPanel2" stepKey="assertPinLocationChangedEditPanel3"/>
        <!-- Storefront: Verify Pin Location Moved On Storefront -->
        <switchToNextTab stepKey="switchToNextTab2"/>
        <amOnPage url="map{{PageBuilderPageTitle.pageName}}" stepKey="amOnPageBuilderPage2"/>
        <waitForPageLoad stepKey="waitForStoreFrontPageLoad2"/>
        <executeJS function="document.querySelectorAll('{{MapOnFrontend.mapGetIFrameJS}}')[0].setAttribute('id', 'mapIFrame');" stepKey="makeIFrameInteractableStoreFront2"/>
        <switchToIFrame selector="mapIFrame" stepKey="switchToIFrameStoreFront2"/>
        <waitForElementVisible selector="{{MapOnFrontend.mapPinMovedLocation}}" stepKey="waitForPinLocationStoreFront2"/>
        <grabAttributeFrom selector="{{MapOnFrontend.mapPinMovedLocation}}" userInput="style" stepKey="grabPinLocationStoreFront2"/>
        <switchToIFrame selector="" stepKey="exitIFrameStoreFront2"/>
        <assertNotEquals expected="grabPinLocationStoreFront" expectedType="variable" actual="grabPinLocationStoreFront2" actualType="variable" message="actual=$grabPinLocationStoreFront2, expected=$grabPinLocationStoreFront" stepKey="assertPinLocationChangedStoreFront"/>
        <assertEquals expected="grabPinLocationStage2" expectedType="variable" actual="grabPinLocationStoreFront2" actualType="variable" message="actual=$grabPinLocationStoreFront2, expected=$mapPositionEditPanel2" stepKey="assertPinLocationSameOnStageAndStoreFront"/>
    </test>
    <test name="MapAddAllAttributes">
        <annotations>
            <features value="Pagebuilder"/>
            <stories value="Map"/>
            <stories value="MAGETWO-83935"/>
            <stories value="MAGETWO-87083"/>
            <title value="Map - Add Map With All Attributes"/>
            <description value="A user should be able to add a map with all attribute fields filled."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-84914"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-map"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <amOnPage url="admin/admin/auth/logout" stepKey="amOnLogoutPage"/>
            <waitForPageLoad stepKey="waitForAdminLoginPageLoad"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle1">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <click selector="{{PageBuilderActionsSection.interactiveGroup}}" stepKey="clickInteractiveGroup"/>
        <actionGroup ref="dragContentBlockToStageAndExpectEditPanel" stepKey="dragContentBlockIntoStage">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <!-- Add Pin To Map -->
        <actionGroup ref="addMapPin" stepKey="enterMapPositionProperties">
            <argument name="property" value="PageBuilderMapPinDefaultProperty"/>
        </actionGroup>
        <executeJS function="document.querySelector('{{MapOnConfigurationPanel.mapPositionJS}}').style.display = 'block'" stepKey="setPositionPropertyVisible"/>
        <grabValueFrom selector="{{MapOnConfigurationPanel.mapPosition}}" stepKey="mapPosition1"/>
        <!-- Fill Remaining Fields -->
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterMapWidthProperty">
            <argument name="property" value="PageBuilderMapWidthProperty50"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterMapHeightProperty">
            <argument name="property" value="PageBuilderMapHeightProperty500"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection"/>
        <actionGroup ref="selectSlideOutPanelField" stepKey="enterAdvancedAlignmentProperty">
            <argument name="property" value="PageBuilderAdvancedAlignmentLeftProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelField" stepKey="enterAdvancedClassProperty">
            <argument name="property" value="PageBuilderAdvancedCssClassesProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldMarginsAndPadding" stepKey="enterAdvancedMarginsAndPaddingProperty">
            <argument name="property" value="PageBuilderAdvancedMarginsAndPaddingProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        <!-- Validate Edit Panel -->
        <actionGroup ref="openPageBuilderEditPanel" stepKey="openEditMenuOnStage">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <waitForElementVisible selector="{{MapOnStage.mapWithPin(PageBuilderMapPinDefaultProperty.lat, PageBuilderMapPinDefaultProperty.lng)}}" stepKey="waitForPinOnConfigurationMapVisible"/>
        <executeJS function="document.querySelector('{{MapOnConfigurationPanel.mapPositionJS}}').style.display = 'block'" stepKey="setPositionPropertyVisible2"/>
        <grabValueFrom selector="{{MapOnConfigurationPanel.mapPosition}}" stepKey="mapPosition2"/>
        <assertStringStartsWith stepKey="assertRegExp" expected="mapPosition1" expectedType="variable" actual="mapPosition2" actualType="variable" message="actual=$mapPosition2 expected=$mapPosition1"/>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeMapWidthProperty">
            <argument name="property" value="PageBuilderMapWidthProperty50"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeMapHeightProperty">
            <argument name="property" value="PageBuilderMapHeightProperty500"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection2"/>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeAdvancedAlignmentProperty">
            <argument name="property" value="PageBuilderAdvancedAlignmentLeftProperty"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeAdvancedCssClassesProperty">
            <argument name="property" value="PageBuilderAdvancedCssClassesProperty"/>
        </actionGroup>
        <actionGroup ref="seeInMarginsAndPaddingFieldSlideOutPanel" stepKey="seeAdvancedMarginsAndPaddingProperty">
            <argument name="property" value="PageBuilderAdvancedMarginsAndPaddingProperty"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanel"/>
        <!-- Validate Stage -->
        <waitForElementVisible time="2" selector="{{MapOnStage.map}}" stepKey="waitMap2" />
        <seeElement selector="{{MapOnStage.mapWithPin(PageBuilderMapPinDefaultProperty.lat, PageBuilderMapPinDefaultProperty.lng)}}" stepKey="seeMapWithPin"/>
        <seeElement selector="{{MapOnStage.mapHeight(PageBuilderMapHeightProperty500.value)}}" stepKey="seeMapHeight"/>
        <seeElement selector="{{MapOnStage.mapWidth(PageBuilderMapWidthProperty50.value)}}" stepKey="seeMapWidth"/>
        <seeElement selector="{{MapOnStage.mapAlignment(PageBuilderAdvancedAlignmentLeftProperty.value)}}" stepKey="seeMapAlignment"/>
        <seeElement selector="{{MapOnStage.mapMargin(PageBuilderAdvancedMarginsAndPaddingProperty.marginTop)}}" stepKey="seeMapMargin"/>
        <seeElement selector="{{MapOnStage.mapPadding(PageBuilderAdvancedMarginsAndPaddingProperty.paddingTop)}}" stepKey="seeMapPadding"/>
        <!-- Validate Storefront -->
        <amOnPage url="map{{PageBuilderPageTitle.pageName}}" stepKey="amOnPageBuilderPage"/>
        <waitForPageLoad stepKey="waitForStoreFrontPageLoad"/>
        <waitForElementVisible selector="{{MapOnFrontend.mapWithPin(PageBuilderMapPinDefaultProperty.lat, PageBuilderMapPinDefaultProperty.lng)}}" stepKey="seeMapPinOnFrontend"/>
        <seeElement selector="{{MapOnFrontend.mapZoom(PageBuilderMapPinDefaultProperty.zoom)}}" stepKey="seeMapZoomOnFrontend"/>
        <seeElement selector="{{MapOnFrontend.mapWidth(PageBuilderMapWidthProperty50.value)}}" stepKey="seeMapWidthOnFrontend"/>
        <seeElement selector="{{MapOnFrontend.mapHeight(PageBuilderMapHeightProperty500.value)}}" stepKey="seeMapHeightOnFrontend"/>
        <seeElement selector="{{MapOnFrontend.mapAlignment(PageBuilderAdvancedAlignmentLeftProperty.value)}}" stepKey="seeMapAlignmentOnFrontend"/>
        <seeElement selector="{{MapOnFrontend.mapCssClass(PageBuilderAdvancedCssClassesProperty.value)}}" stepKey="seeMapCssClassOnFrontend"/>
        <seeElement selector="{{MapOnFrontend.mapMargin(PageBuilderAdvancedMarginsAndPaddingProperty.marginTop)}}" stepKey="seeMapMarginOnFrontend"/>
        <seeElement selector="{{MapOnFrontend.mapPadding(PageBuilderAdvancedMarginsAndPaddingProperty.paddingTop)}}" stepKey="seeMapPaddingOnFrontend"/>
    </test>
    <test name="MapDuplicate">
        <annotations>
            <features value="Pagebuilder"/>
            <stories value="Map"/>
            <stories value="MAGETWO-87083"/>
            <title value="Map - Duplicate Map"/>
            <description value="A user should be able to duplicate a map content block. Verify on Stage amd Storefront."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-88896"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-map"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <amOnPage url="admin/admin/auth/logout" stepKey="amOnLogoutPage"/>
            <waitForPageLoad stepKey="waitForAdminLoginPageLoad"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle1">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <click selector="{{PageBuilderActionsSection.interactiveGroup}}" stepKey="clickInteractiveGroup"/>
        <actionGroup ref="dragContentBlockToStageAndExpectEditPanel" stepKey="dragContentBlockIntoStage">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <!-- Fill All Fields -->
        <actionGroup ref="addMapPin" stepKey="enterMapPositionProperties">
            <argument name="property" value="PageBuilderMapPinDefaultProperty"/>
        </actionGroup>
        <actionGroup ref="moveMapPinByClick" stepKey="moveMapPinByClick"/>
        <!-- Edit Panel: Get Map Pin Position -->
        <waitForElementVisible selector="{{MapOnConfigurationPanel.map}}" stepKey="waitForMapVisibleEditPanel"/>
        <executeJS function="document.querySelector('{{MapOnConfigurationPanel.mapPositionJS}}').style.display = 'block'" stepKey="setPositionPropertyVisibleEditPanel"/>
        <grabValueFrom selector="{{MapOnConfigurationPanel.mapPosition}}" stepKey="mapPositionEditPanel"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterWidth">
            <argument name="property" value="PageBuilderMapWidthProperty50"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterHeight">
            <argument name="property" value="PageBuilderMapHeightProperty500"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection"/>
        <actionGroup ref="fillSlideOutPanelFieldGeneral" stepKey="enterCSSClasses">
            <argument name="property" value="PageBuilderAdvancedCssClassesProperty"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelFieldGeneral" stepKey="enterAlignment">
            <argument name="property" value="PageBuilderAdvancedAlignmentLeftProperty"/>
        </actionGroup>
        <actionGroup ref="fillSlideOutPanelFieldMarginsAndPadding" stepKey="enterMarginsAndPaddings">
            <argument name="property" value="PageBuilderAdvancedMarginsAndPaddingProperty"/>
        </actionGroup>
        <actionGroup ref="saveEditPanelSettings" stepKey="saveEditPanelSettings"/>
        <!-- Stage: Get Map Pin Position -->
        <executeJS function="document.querySelectorAll('{{MapOnStage.mapGetIFrameJS}}')[0].setAttribute('id', 'mapIFrame');" stepKey="makeIFrameInteractableStage"/>
        <switchToIFrame selector="mapIFrame" stepKey="switchToIFrameStage"/>
        <waitForElementVisible selector="{{MapOnStage.mapPinMovedLocation}}" stepKey="waitForPinLocationStage"/>
        <grabAttributeFrom selector="{{MapOnStage.mapPinMovedLocation}}" userInput="style" stepKey="grabPinLocationStage"/>
        <switchToIFrame selector="" stepKey="exitIFrameStage"/>
        <!-- Duplicate and Verify Stage -->
        <actionGroup ref="duplicateContentBlock" stepKey="duplicateContentBlock">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <seeElement selector="{{MapOnStage.mapAll(PageBuilderMapPinDefaultProperty.zoom, PageBuilderMapWidthProperty50.value, PageBuilderMapHeightProperty500.value, PageBuilderAdvancedAlignmentLeftProperty.value, PageBuilderAdvancedMarginsAndPaddingProperty.marginTop, PageBuilderAdvancedMarginsAndPaddingProperty.paddingTop, '2')}}" stepKey="seeDuplicateMapStage"/>
        <actionGroup ref="validateMapToolTipStage2" stepKey="validateMapToolTipStage">
            <argument name="property" value="PageBuilderMapMovedPinProperty"/>
        </actionGroup>
        <!-- Stage: Verify Map Pin Position On Duplicate -->
        <executeJS function="document.querySelectorAll('{{MapOnStage.mapGetIFrameJS}}')[1].setAttribute('id', 'mapIFrame2');" stepKey="makeIFrameInteractableStage2"/>
        <switchToIFrame selector="mapIFrame2" stepKey="switchToIFrameStage2"/>
        <waitForElementVisible selector="{{MapOnStage.mapPinMovedLocation}}" stepKey="waitForPinLocationStage2"/>
        <grabAttributeFrom selector="{{MapOnStage.mapPinMovedLocation}}" userInput="style" stepKey="grabPinLocationStage2"/>
        <switchToIFrame selector="" stepKey="exitIFrameStage2"/>
        <assertEquals expected="grabPinLocationStage" expectedType="variable" actual="grabPinLocationStage2" actualType="variable" message="actual=$grabPinLocationStage2, expected=$grabPinLocationStage2" stepKey="assertPinLocationStage"/>
        <!-- Scroll To Duplicate -->
        <actionGroup ref="openPageBuilderEditPanelByIndex2" stepKey="openEditMenuOnStage2">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <waitForElementVisible selector="{{MapOnConfigurationPanel.map}}" stepKey="waitForMapVisible"/>
        <seeElement selector="{{MapOnConfigurationPanel.mapPinPosition(PageBuilderMapPinDefaultProperty.leftPosition, PageBuilderMapPinDefaultProperty.topPosition, PageBuilderMapPinDefaultProperty.zIndex, PageBuilderMapPinDefaultProperty.leftPosition2)}}" stepKey="seeMapPinOnEditPanel"/>
        <!-- Edit Panel: Verify Map Pin Position On Duplicate -->
        <waitForElementVisible selector="{{MapOnConfigurationPanel.map}}" stepKey="waitForMapVisibleEditPanel2"/>
        <executeJS function="document.querySelector('{{MapOnConfigurationPanel.mapPositionJS}}').style.display = 'block'" stepKey="setPositionPropertyVisibleEditPanel2"/>
        <grabValueFrom selector="{{MapOnConfigurationPanel.mapPosition}}" stepKey="mapPositionEditPanel2"/>
        <assertEquals expected="mapPositionEditPanel" expectedType="variable" actual="mapPositionEditPanel2" actualType="variable" message="actual=$mapPositionEditPanel2, expected=$mapPositionEditPanel" stepKey="assertPinLocationEditPanel"/>
        <!-- Verify Edit Panel Values -->
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeMapWidth">
            <argument name="property" value="PageBuilderMapWidthProperty50"/>
        </actionGroup>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeMapHeight">
            <argument name="property" value="PageBuilderMapHeightProperty500"/>
        </actionGroup>
        <actionGroup ref="expandConfigurationSection" stepKey="expandConfigurationSection2"/>
        <actionGroup ref="seeInFieldSlideOutProperty" stepKey="seeCSSClasses">
            <argument name="property" value="PageBuilderAdvancedCssClassesProperty"/>
        </actionGroup>
        <actionGroup ref="selectSlideOutPanelFieldGeneral" stepKey="seeTextAlignment">
        <argument name="property" value="PageBuilderAdvancedAlignmentLeftProperty"/>
        </actionGroup>
        <actionGroup ref="seeInMarginsAndPaddingFieldSlideOutPanel" stepKey="seeMarginsAndPaddings">
            <argument name="property" value="PageBuilderAdvancedMarginsAndPaddingProperty"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanel"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <amOnPage url="map{{PageBuilderPageTitle.pageName}}" stepKey="amOnPageBuilderPage"/>
        <waitForPageLoad stepKey="waitForStoreFrontPageLoad"/>
        <!-- Verify Storefront -->
        <waitForElementVisible selector="{{MapOnFrontend.mapAll(PageBuilderMapPinDefaultProperty.zoom, PageBuilderMapWidthProperty50.value, PageBuilderMapHeightProperty500.value, PageBuilderAdvancedAlignmentLeftProperty.value, PageBuilderAdvancedMarginsAndPaddingProperty.marginTop, PageBuilderAdvancedMarginsAndPaddingProperty.paddingTop, '2')}}" stepKey="waitForDuplicateMapStoreFront"/>
        <actionGroup ref="validateMapToolTipStoreFront2" stepKey="validateMapToolTipStoreFront">
            <argument name="property" value="PageBuilderMapMovedPinProperty"/>
        </actionGroup>
        <!-- Storefront: Verify Map Pin Position On Duplicate -->
        <executeJS function="document.querySelectorAll('{{MapOnFrontend.mapGetIFrameJS}}')[1].setAttribute('id', 'mapIFrame2');" stepKey="makeIFrameInteractableStoreFront2"/>
        <switchToIFrame selector="mapIFrame2" stepKey="switchToIFrameStoreFront2"/>
        <waitForElementVisible selector="{{MapOnFrontend.mapPinMovedLocation}}" stepKey="waitForPinLocationStoreFront2"/>
        <grabAttributeFrom selector="{{MapOnFrontend.mapPinMovedLocation}}" userInput="style" stepKey="grabPinLocationStoreFront2"/>
        <switchToIFrame selector="" stepKey="exitIFrameStoreFront2"/>
        <assertEquals expected="grabPinLocationStage2" expectedType="variable" actual="grabPinLocationStoreFront2" actualType="variable" message="actual=$grabPinLocationStoreFront2, expected=$mapPositionEditPanel2" stepKey="assertPinLocationSameOnStageAndStoreFront"/>
    </test>
    <test name="MapDelete">
        <annotations>
            <features value="Pagebuilder"/>
            <stories value="Map"/>
            <stories value="MAGETWO-83935"/>
            <stories value="MAGETWO-87083"/>
            <title value="Map - Delete Map"/>
            <description value="A user should be able to delete a map contennt block. Verify on Stage amd Storefront."/>
            <severity value="CRITICAL"/>
            <testCaseId value="MAGETWO-88897"/>
            <group value="pagebuilder"/>
            <group value="pagebuilder-map"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
            <actionGroup ref="EnabledWYSIWYG" stepKey="enableWYSIWYG"/>
            <actionGroup ref="enablePageBuilderSetting" stepKey="enablePageBuilderSetting"/>
            <actionGroup ref="navigateToAPageWithPageBuilder" stepKey="navigateToAPageWithPageBuilder"/>
            <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage"/>
        </before>
        <after>
            <actionGroup ref="DisabledWYSIWYG" stepKey="disableWYSIWYG"/>
            <amOnPage url="admin/admin/auth/logout" stepKey="amOnLogoutPage"/>
            <waitForPageLoad stepKey="waitForAdminLoginPageLoad"/>
        </after>
        <actionGroup ref="addPageBuilderPageTitle" stepKey="enterPageTitle">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <click selector="{{PageBuilderActionsSection.interactiveGroup}}" stepKey="clickInteractiveGroup"/>
        <actionGroup ref="dragContentBlockToStageAndExpectEditPanel" stepKey="dragContentBlockIntoStage">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <actionGroup ref="closeEditPanelSettings" stepKey="closeEditPanel"/>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage2"/>
        <actionGroup ref="removeContentBlockFromStage" stepKey="removeContentBlockFromStage">
            <argument name="contentBlockType" value="PageBuilderMapContentBlock"/>
        </actionGroup>
        <actionGroup ref="saveAndContinueEditCmsPage" stepKey="saveAndContinueEditCmsPage2"/>
        <actionGroup ref="switchToPageBuilderStage" stepKey="switchToPageBuilderStage3"/>
        <!-- Verify Not In Stage -->
        <dontSeeElementInDOM selector="{{PageBuilderActionsSection.contentBlockInStageByIndex(PageBuilderMapContentBlock.role, '1')}}" stepKey="dontSeeContentBlockInStage"/>
        <amOnPage url="map{{PageBuilderPageTitle.pageName}}" stepKey="amOnPageBuilderPage"/>
        <waitForPageLoad stepKey="waitForStoreFrontPageLoad"/>
        <!-- Verify Not In Storefront -->
        <dontSeeElementInDOM selector="{{MapOnFrontend.map}}" stepKey="dontSeeContentBlockInStorefront"/>
    </test>
</tests>
